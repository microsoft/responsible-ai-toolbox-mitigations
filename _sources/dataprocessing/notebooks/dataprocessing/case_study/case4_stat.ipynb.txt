{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Case Study 4 - Multiple Runs\n",
    "\n",
    "# 0 - Defining Basic Functionalities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import uci_dataset as database\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import figure\n",
    "\n",
    "import raimitigations.dataprocessing as dp\n",
    "\n",
    "N_EXEC = 20\n",
    "\n",
    "USE_AUC_TH = False\n",
    "\n",
    "RESULT_KEYS = [\"roc\", \"pr\", \"rc\", \"f1\"]\n",
    "COL_METRIC = \"Metric\"\n",
    "COL_VALUE = \"Value\"\n",
    "COL_TEST = \"Test Case\"\n",
    "\n",
    "SEQ_FWD = 0\n",
    "SEQ_BWD = 1\n",
    "CATBOOST = 2\n",
    "\n",
    "# -----------------------------------\n",
    "def get_encoders(df):\n",
    "\teducation_order = [\"Below Secondary\", \"Bachelor's\", \"Master's & above\"]\n",
    "\n",
    "\t# Encode 'education' using ordinal encoding\n",
    "\t#enc_ord = dp.EncoderOrdinal(col_encode=[\"education\"],\n",
    "\t#\t\t\t\t\t\t\tcategories={\"education\":education_order},\n",
    "\t#\t\t\t\t\t\t\tverbose=False\n",
    "\t#\t\t\t\t\t\t)\n",
    "\tenc_ord = dp.EncoderOrdinal(categories={\"education\":education_order},\n",
    "\t\t\t\t\t\t\t\tverbose=False\n",
    "\t\t\t\t\t\t\t)\n",
    "\tenc_ohe = dp.EncoderOHE(drop=False, unknown_err=False, verbose=False)\n",
    "\treturn enc_ord, enc_ohe\n",
    "\n",
    "# -----------------------------------\n",
    "def encode_case4(df):\n",
    "\tenc_ord, enc_ohe = get_encoders(df)\n",
    "\tenc_ord.fit(df)\n",
    "\tproc_df = enc_ord.transform(df)\n",
    "\n",
    "\t# Encode the remaining categorical columns using One-Hot Encoding\n",
    "\t#enc_ohe.fit(proc_df)\n",
    "\t#proc_df = enc_ohe.transform(proc_df)\n",
    "\treturn proc_df\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def encode_case4_train_test(train_x, test_x):\n",
    "\tenc_ord, enc_ohe = get_encoders(df)\n",
    "\tenc_ord.fit(train_x)\n",
    "\ttrain_x_enc = enc_ord.transform(train_x)\n",
    "\ttest_x_enc = enc_ord.transform(test_x)\n",
    "\n",
    "\t#enc_ohe.fit(train_x_enc)\n",
    "\t#train_x_enc = enc_ohe.transform(train_x_enc)\n",
    "\t#test_x_enc = enc_ohe.transform(test_x_enc)\n",
    "\treturn train_x_enc, test_x_enc\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def impute_case4(df):\n",
    "\timputer = dp.BasicImputer(\tnumerical={\t'missing_values':np.nan,\n",
    "\t\t\t\t\t\t\t\t\t\t\t'strategy':'constant',\n",
    "\t\t\t\t\t\t\t\t\t\t\t'fill_value':-1},\n",
    "\t\t\t\t\t\t\t\tverbose=False)\n",
    "\timputer.fit(df)\n",
    "\tproc_df = imputer.transform(df)\n",
    "\treturn proc_df\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def impute_case4_train_test(train_x, test_x):\n",
    "\timputer = dp.BasicImputer(\tnumerical={\t'missing_values':np.nan,\n",
    "\t\t\t\t\t\t\t\t\t\t\t'strategy':'constant',\n",
    "\t\t\t\t\t\t\t\t\t\t\t'fill_value':-1},\n",
    "\t\t\t\t\t\t\t\tverbose=False)\n",
    "\timputer.fit(train_x)\n",
    "\ttrain_x_enc = imputer.transform(train_x)\n",
    "\ttest_x_enc = imputer.transform(test_x)\n",
    "\treturn train_x_enc, test_x_enc\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def remove_corr_feat(df, label_col):\n",
    "\tcor_feat = dp.CorrelatedFeatures(\n",
    "\t\t\t\t\tmethod_num_num=[\"spearman\", \"pearson\", \"kendall\"],\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tnum_corr_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tnum_pvalue_th=0.05,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tmethod_num_cat=\"model\",\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tmodel_metrics=[\"f1\", \"auc\"],\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tmetric_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tcat_corr_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Categorical x Categorical correlations\n",
    "\t\t\t\t\tcat_pvalue_th=0.01,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Categorical x Categorical correlations\n",
    "\t\t\t\t\tsave_json=False,\n",
    "\t\t\t\t\tverbose=False\n",
    "\t\t\t\t)\n",
    "\tcor_feat.fit(df=df, label_col=label_col)\n",
    "\tproc_df = cor_feat.transform(df)\n",
    "\treturn proc_df\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def transform_num_data(train_x, test_x, scaler_ref, num_col):\n",
    "\tignore = None\n",
    "\tif num_col is not None:\n",
    "\t\tignore = [col for col in train_x.columns if col not in num_col]\n",
    "\ttransformer = scaler_ref(exclude_cols=ignore, verbose=False)\n",
    "\ttransformer.fit(train_x)\n",
    "\ttrain_x_scl = transformer.transform(train_x)\n",
    "\ttest_x_scl = transformer.transform(test_x)\n",
    "\treturn train_x_scl, test_x_scl\n",
    "\n",
    "# -----------------------------------\n",
    "def feature_selection(train_x, train_y, test_x, feat_sel_type):\n",
    "\tif feat_sel_type == SEQ_FWD:\n",
    "\t\tfeat_sel = dp.SeqFeatSelection(forward=True, n_jobs=4, verbose=False)\n",
    "\telif feat_sel_type == SEQ_BWD:\n",
    "\t\tfeat_sel = dp.SeqFeatSelection(forward=False, n_jobs=4, verbose=False)\n",
    "\telse:\n",
    "\t\tfeat_sel = dp.CatBoostSelection(verbose=False)\n",
    "\tfeat_sel.fit(X=train_x, y=train_y)\n",
    "\ttrain_x_sel = feat_sel.transform(train_x)\n",
    "\ttest_x_sel = feat_sel.transform(test_x)\n",
    "\n",
    "\tfeatures = feat_sel.get_selected_features()\n",
    "\treturn train_x_sel, test_x_sel\n",
    "\n",
    "# -----------------------------------\n",
    "def artificial_smote(train_x, train_y, strategy, under_sample):\n",
    "\trebalance = dp.Rebalance(\n",
    "\t\t\t\tX=train_x,\n",
    "\t\t\t\ty=train_y,\n",
    "\t\t\t\tstrategy_over=strategy,\n",
    "\t\t\t\tover_sampler=True,\n",
    "\t\t\t\tunder_sampler=under_sample,\n",
    "\t\t\t\tverbose=False\n",
    "\t\t\t)\n",
    "\ttrain_x_res, train_y_res = rebalance.fit_resample()\n",
    "\treturn train_x_res, train_y_res\n",
    "\n",
    "# -----------------------------------\n",
    "def artificial_ctgan(train_x, train_y, strategy, savefile):\n",
    "\tsynth = dp.Synthesizer(\n",
    "\t\t\t\tX=train_x,\n",
    "\t\t\t\ty=train_y,\n",
    "\t\t\t\tepochs=1000,\n",
    "\t\t\t\tmodel=\"ctgan\",\n",
    "\t\t\t\tload_existing=True,\n",
    "\t\t\t\tsave_file=savefile,\n",
    "\t\t\t\tverbose=False\n",
    "\t\t\t)\n",
    "\tsynth.fit()\n",
    "\tsyn_train_x, syn_train_y = synth.transform(X=train_x, y=train_y, strategy=strategy)\n",
    "\treturn syn_train_x, syn_train_y\n",
    "\n",
    "# -----------------------------------\n",
    "# -----------------------------------\n",
    "# -----------------------------------\n",
    "def result_statistics(result_list):\n",
    "\tresult_stat = {}\n",
    "\tfor result in result_list:\n",
    "\t\tfor key in RESULT_KEYS:\n",
    "\t\t\tif key in result_stat.keys():\n",
    "\t\t\t\tresult_stat[key].append(result[key])\n",
    "\t\t\telse:\n",
    "\t\t\t\tresult_stat[key] = [result[key]]\n",
    "\n",
    "\treturn result_stat\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def add_results_df(result_df, result_stat, test_name):\n",
    "\tcol_test = []\n",
    "\tcol_metric = []\n",
    "\tcol_value = []\n",
    "\tfor metric in RESULT_KEYS:\n",
    "\t\tcol_value += result_stat[metric]\n",
    "\t\tcol_test += [test_name for _ in range(len(result_stat[metric]))]\n",
    "\t\tcol_metric += [metric for _ in range(len(result_stat[metric]))]\n",
    "\n",
    "\tnew_df = pd.DataFrame()\n",
    "\tnew_df[COL_VALUE] = col_value\n",
    "\tnew_df[COL_TEST] = col_test\n",
    "\tnew_df[COL_METRIC] = col_metric\n",
    "\tnew_df[COL_VALUE] = new_df[COL_VALUE].apply(float)\n",
    "\n",
    "\tif result_df is None:\n",
    "\t\treturn new_df\n",
    "\t\n",
    "\tresult_df = pd.concat([result_df, new_df], axis=0)\n",
    "\t\n",
    "\treturn result_df\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def test_base(df, label_col, n_exec, model_name):\n",
    "\tresult_list = []\n",
    "\tproc_df = encode_case4(df)\n",
    "\tproc_df = impute_case4(proc_df)\n",
    "\tfor n in range(n_exec):\n",
    "\t\ttrain_x, test_x, train_y, test_y = dp.split_data(proc_df, label_col, test_size=0.25)\n",
    "\t\tresult = dp.train_model_fetch_results(train_x, train_y, test_x, test_y, model_name, USE_AUC_TH)\n",
    "\t\tresult_list.append(result)\n",
    "\n",
    "\tresult_stat = result_statistics(result_list)\n",
    "\n",
    "\treturn result_stat\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def test_corr(df, label_col, n_exec, model_name):\n",
    "\tresult_list = []\n",
    "\tproc_df = remove_corr_feat(df, label_col)\n",
    "\tproc_df = encode_case4(proc_df)\n",
    "\tproc_df = impute_case4(proc_df)\n",
    "\tfor n in range(n_exec):\n",
    "\t\ttrain_x, test_x, train_y, test_y = dp.split_data(proc_df, label_col, test_size=0.25)\n",
    "\t\tresult = dp.train_model_fetch_results(train_x, train_y, test_x, test_y, model_name, USE_AUC_TH)\n",
    "\t\tresult_list.append(result)\n",
    "\n",
    "\tresult_stat = result_statistics(result_list)\n",
    "\n",
    "\treturn result_stat\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def test_corr_transf(df, label_col, n_exec, scaler_ref, model_name, num_col=None):\n",
    "\tresult_list = []\n",
    "\tproc_df = remove_corr_feat(df, label_col)\n",
    "\tproc_df = encode_case4(proc_df)\n",
    "\tproc_df = impute_case4(proc_df)\n",
    "\tfor n in range(n_exec):\n",
    "\t\ttrain_x, test_x, train_y, test_y = dp.split_data(proc_df, label_col, test_size=0.25)\n",
    "\t\ttrain_x, test_x = transform_num_data(train_x, test_x, scaler_ref, num_col)\n",
    "\t\tresult = dp.train_model_fetch_results(train_x, train_y, test_x, test_y, model_name, USE_AUC_TH)\n",
    "\t\tresult_list.append(result)\n",
    "\n",
    "\tresult_stat = result_statistics(result_list)\n",
    "\n",
    "\treturn result_stat\n",
    "\n",
    "# -----------------------------------\n",
    "def test_smote_transf(df, label_col, n_exec, model_name, rcorr=True, scaler_ref=None, num_col=None, feat_sel_type=None, art_str=None, under=False):\n",
    "\tresult_list = []\n",
    "\tproc_df = df\n",
    "\tif rcorr:\n",
    "\t\tproc_df = remove_corr_feat(proc_df, label_col)\n",
    "\tproc_df = encode_case4(proc_df)\n",
    "\tproc_df = impute_case4(proc_df)\n",
    "\tfor n in range(n_exec):\n",
    "\t\ttrain_x, test_x, train_y, test_y = dp.split_data(proc_df, label_col, test_size=0.25)\n",
    "\t\tif art_str is not None:\n",
    "\t\t\ttrain_x, train_y = artificial_smote(train_x, train_y, art_str, under)\n",
    "\t\tif feat_sel_type is not None:\n",
    "\t\t\ttrain_x, test_x = feature_selection(train_x, train_y, test_x, feat_sel_type)\n",
    "\t\tif scaler_ref is not None:\n",
    "\t\t\ttrain_x, test_x = transform_num_data(train_x, test_x, scaler_ref, num_col)\n",
    "\t\tresult = dp.train_model_fetch_results(train_x, train_y, test_x, test_y, model_name, USE_AUC_TH)\n",
    "\t\tresult_list.append(result)\n",
    "\n",
    "\tresult_stat = result_statistics(result_list)\n",
    "\n",
    "\treturn result_stat\n",
    "\n",
    "\n",
    "\n",
    "# -----------------------------------\n",
    "def test_ctgan_first(df, label_col, n_exec, model_name, rcorr=True, scaler_ref=None, num_col=None, feat_sel_type=None, art_str=None, savefile=None):\n",
    "\tresult_list = []\n",
    "\tproc_df = df\n",
    "\tif rcorr:\n",
    "\t\tproc_df = remove_corr_feat(proc_df, label_col)\n",
    "\tfor n in range(n_exec):\n",
    "\t\ttrain_x, test_x, train_y, test_y = dp.split_data(proc_df, label_col, test_size=0.25)\n",
    "\t\tif art_str is not None:\n",
    "\t\t\ttrain_x, train_y = artificial_ctgan(train_x, train_y, art_str, savefile)\n",
    "\t\ttrain_x, test_x = encode_case4_train_test(train_x, test_x)\n",
    "\t\ttrain_x, test_x = impute_case4_train_test(train_x, test_x)\n",
    "\t\tif feat_sel_type is not None:\n",
    "\t\t\ttrain_x, test_x = feature_selection(train_x, train_y, test_x, feat_sel_type)\n",
    "\t\tif scaler_ref is not None:\n",
    "\t\t\ttrain_x, test_x = transform_num_data(train_x, test_x, scaler_ref, num_col)\n",
    "\t\tresult = dp.train_model_fetch_results(train_x, train_y, test_x, test_y, model_name, USE_AUC_TH)\n",
    "\t\tresult_list.append(result)\n",
    "\n",
    "\tresult_stat = result_statistics(result_list)\n",
    "\n",
    "\treturn result_stat\n",
    "\n",
    "# -----------------------------------\n",
    "# -----------------------------------\n",
    "# -----------------------------------\n",
    "def plot_results(res_df, y_lim=[0.5, 1.0]):\n",
    "\tplt.figure().clear()\n",
    "\tplt.close()\n",
    "\tplt.cla()\n",
    "\tplt.clf()\n",
    "\n",
    "\tfig = plt.gcf()\n",
    "\tfig.set_size_inches(18, 10)\n",
    "\t#fig.set_dpi(100)\n",
    "\n",
    "\tsns.set_theme(style=\"whitegrid\")\n",
    "\tplt.ylim(y_lim[0], y_lim[1])\n",
    "\tax = sns.barplot(x=COL_METRIC, y=COL_VALUE, hue=COL_TEST, data=res_df)\n",
    "\tplt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0, fontsize=20)\n",
    "\t#ax.axes.set_title(\"Title\",fontsize=50)\n",
    "\tax.set_xlabel(COL_METRIC, fontsize=30)\n",
    "\tax.set_ylabel(COL_VALUE, fontsize=30)\n",
    "\tax.tick_params(labelsize=15)\n",
    "\tplt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1 - Understanding the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>education</th>\n",
       "      <th>gender</th>\n",
       "      <th>recruitment_channel</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_7</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>f</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Operations</td>\n",
       "      <td>region_22</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_19</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_23</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Technology</td>\n",
       "      <td>region_26</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54803</th>\n",
       "      <td>Technology</td>\n",
       "      <td>region_14</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54804</th>\n",
       "      <td>Operations</td>\n",
       "      <td>region_27</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>f</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>56</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54805</th>\n",
       "      <td>Analytics</td>\n",
       "      <td>region_1</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>79</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54806</th>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54807</th>\n",
       "      <td>HR</td>\n",
       "      <td>region_22</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>54808 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              department     region         education gender  \\\n",
       "0      Sales & Marketing   region_7  Master's & above      f   \n",
       "1             Operations  region_22        Bachelor's      m   \n",
       "2      Sales & Marketing  region_19        Bachelor's      m   \n",
       "3      Sales & Marketing  region_23        Bachelor's      m   \n",
       "4             Technology  region_26        Bachelor's      m   \n",
       "...                  ...        ...               ...    ...   \n",
       "54803         Technology  region_14        Bachelor's      m   \n",
       "54804         Operations  region_27  Master's & above      f   \n",
       "54805          Analytics   region_1        Bachelor's      m   \n",
       "54806  Sales & Marketing   region_9               NaN      m   \n",
       "54807                 HR  region_22        Bachelor's      m   \n",
       "\n",
       "      recruitment_channel  no_of_trainings  age  previous_year_rating  \\\n",
       "0                sourcing                1   35                   5.0   \n",
       "1                   other                1   30                   5.0   \n",
       "2                sourcing                1   34                   3.0   \n",
       "3                   other                2   39                   1.0   \n",
       "4                   other                1   45                   3.0   \n",
       "...                   ...              ...  ...                   ...   \n",
       "54803            sourcing                1   48                   3.0   \n",
       "54804               other                1   37                   2.0   \n",
       "54805               other                1   27                   5.0   \n",
       "54806            sourcing                1   29                   1.0   \n",
       "54807               other                1   27                   1.0   \n",
       "\n",
       "       length_of_service  awards_won?  avg_training_score  is_promoted  \n",
       "0                      8            0                  49            0  \n",
       "1                      4            0                  60            0  \n",
       "2                      7            0                  50            0  \n",
       "3                     10            0                  50            0  \n",
       "4                      2            0                  73            0  \n",
       "...                  ...          ...                 ...          ...  \n",
       "54803                 17            0                  78            0  \n",
       "54804                  6            0                  56            0  \n",
       "54805                  3            0                  79            0  \n",
       "54806                  2            0                  45            0  \n",
       "54807                  5            0                  49            0  \n",
       "\n",
       "[54808 rows x 12 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dir = '../../../datasets/hr_promotion'\n",
    "df =  pd.read_csv(data_dir + '/train.csv')\n",
    "df.drop(columns=['employee_id'], inplace=True)\n",
    "label_col = \"is_promoted\"\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54808 entries, 0 to 54807\n",
      "Data columns (total 12 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   department            54808 non-null  object \n",
      " 1   region                54808 non-null  object \n",
      " 2   education             52399 non-null  object \n",
      " 3   gender                54808 non-null  object \n",
      " 4   recruitment_channel   54808 non-null  object \n",
      " 5   no_of_trainings       54808 non-null  int64  \n",
      " 6   age                   54808 non-null  int64  \n",
      " 7   previous_year_rating  50684 non-null  float64\n",
      " 8   length_of_service     54808 non-null  int64  \n",
      " 9   awards_won?           54808 non-null  int64  \n",
      " 10  avg_training_score    54808 non-null  int64  \n",
      " 11  is_promoted           54808 non-null  int64  \n",
      "dtypes: float64(1), int64(6), object(5)\n",
      "memory usage: 5.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_col = ['no_of_trainings', 'age', 'previous_year_rating', 'length_of_service', 'awards_won?', 'avg_training_score']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2 - Efficiency of Different Classes from raimitigations.dataprocessing lib\n",
    "\n",
    "## XGBoost Model\n",
    "\n",
    "### Data Transformations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "MODEL_NAME = \"xgb\"\n",
    "\n",
    "result_base = test_base(df, label_col, N_EXEC, MODEL_NAME)\n",
    "result_df = add_results_df(None, result_base, \"Baseline\")\n",
    "\n",
    "result_cor = test_corr(df, label_col, N_EXEC, MODEL_NAME)\n",
    "result_df = add_results_df(result_df, result_cor, \"Corr.\")\n",
    "\n",
    "result_tr = test_corr_transf(df, label_col, N_EXEC, dp.DataStandardScaler, MODEL_NAME, num_col)\n",
    "result_df = add_results_df(result_df, result_tr, \"Std.\")\n",
    "\n",
    "result_tr = test_corr_transf(df, label_col, N_EXEC, dp.DataMinMaxScaler, MODEL_NAME, num_col)\n",
    "result_df = add_results_df(result_df, result_tr, \"Min/Max.\")\n",
    "\n",
    "result_tr = test_corr_transf(df, label_col, N_EXEC, dp.DataQuantileTransformer, MODEL_NAME, num_col)\n",
    "result_df = add_results_df(result_df, result_tr, \"Quantile\")\n",
    "\n",
    "result_tr = test_corr_transf(df, label_col, N_EXEC, dp.DataNormalizer, MODEL_NAME, num_col)\n",
    "result_df = add_results_df(result_df, result_tr, \"Normalizer\")\n",
    "\n",
    "result_tr = test_corr_transf(df, label_col, N_EXEC, dp.DataRobustScaler, MODEL_NAME, num_col)\n",
    "result_df = add_results_df(result_df, result_tr, \"Robust\")\n",
    "\n",
    "result_tr = test_corr_transf(df, label_col, N_EXEC, dp.DataPowerTransformer, MODEL_NAME, num_col)\n",
    "result_df = add_results_df(result_df, result_tr, \"Power\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1296x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_results(result_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "MODEL_NAME = \"xgb\"\n",
    "\n",
    "result_base = test_base(df, label_col, N_EXEC, MODEL_NAME)\n",
    "result_df = add_results_df(None, result_base, \"Baseline\")\n",
    "\n",
    "restult_fs = test_smote_transf(df, label_col, N_EXEC, MODEL_NAME, rcorr=False, feat_sel_type=SEQ_BWD)\n",
    "result_df = add_results_df(result_df, restult_fs, \"Seq.Bwd.\")\n",
    "\n",
    "restult_fs = test_smote_transf(df, label_col, N_EXEC, MODEL_NAME, rcorr=False, feat_sel_type=CATBOOST)\n",
    "result_df = add_results_df(result_df, restult_fs, \"CatBoost\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_results(result_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Artificial Instances - SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "MODEL_NAME = \"xgb\"\n",
    "\n",
    "result_base = test_base(df, label_col, N_EXEC, MODEL_NAME)\n",
    "result_df = add_results_df(None, result_base, \"Baseline\")\n",
    "\n",
    "restult_fs = test_smote_transf(df, label_col, N_EXEC, MODEL_NAME, rcorr=True, art_str=0.2, under=False)\n",
    "result_df = add_results_df(result_df, restult_fs, \"SM\")\n",
    "\n",
    "restult_fs = test_smote_transf(df, label_col, N_EXEC, MODEL_NAME, rcorr=True, art_str=0.2, under=True)\n",
    "result_df = add_results_df(result_df, restult_fs, \"SM+TK\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1296x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_results(result_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Artificial Instances - CTGAN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:146: ConvergenceWarning: Number of distinct clusters (6) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
      "  .fit(X)\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1     7521\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n",
      "BEFORE: 0    37605\n",
      "1     3501\n",
      "Name: is_promoted, dtype: int64\n",
      "AFTER: 0    37605\n",
      "1    11281\n",
      "Name: is_promoted, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "MODEL_NAME = \"xgb\"\n",
    "\n",
    "result_base = test_base(df, label_col, N_EXEC, MODEL_NAME)\n",
    "result_df = add_results_df(None, result_base, \"Baseline\")\n",
    "\n",
    "restult_fs = test_ctgan_first(df, label_col, N_EXEC, MODEL_NAME, rcorr=True, feat_sel_type=None, art_str=0.2, savefile=\"4_1.pkl\")\n",
    "result_df = add_results_df(result_df, restult_fs, \"CTGAN 0.2\")\n",
    "\n",
    "restult_fs = test_ctgan_first(df, label_col, N_EXEC, MODEL_NAME, rcorr=True, feat_sel_type=None, art_str=0.3, savefile=\"4_1.pkl\")\n",
    "result_df = add_results_df(result_df, restult_fs, \"CTGAN 0.3\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1296x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_results(result_df)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.12 ('rai')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "5215fd1cce9b64233b490e6c4e868a314fa8a5a2b064fe0583fd0c29542af034"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
