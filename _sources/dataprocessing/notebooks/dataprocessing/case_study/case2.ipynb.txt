{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import uci_dataset as database\n",
    "\n",
    "import raimitigations.dataprocessing as dp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Case Study 2\n",
    "\n",
    "# 1 - Understanding the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>GLCM_pan</th>\n",
       "      <th>Mean_Green</th>\n",
       "      <th>Mean_Red</th>\n",
       "      <th>Mean_NIR</th>\n",
       "      <th>SD_pan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>w</td>\n",
       "      <td>120.362774</td>\n",
       "      <td>205.500000</td>\n",
       "      <td>119.395349</td>\n",
       "      <td>416.581395</td>\n",
       "      <td>20.676318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>w</td>\n",
       "      <td>124.739583</td>\n",
       "      <td>202.800000</td>\n",
       "      <td>115.333333</td>\n",
       "      <td>354.333333</td>\n",
       "      <td>16.707151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>w</td>\n",
       "      <td>134.691964</td>\n",
       "      <td>199.285714</td>\n",
       "      <td>116.857143</td>\n",
       "      <td>477.857143</td>\n",
       "      <td>22.496712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>w</td>\n",
       "      <td>127.946309</td>\n",
       "      <td>178.368421</td>\n",
       "      <td>92.368421</td>\n",
       "      <td>278.473684</td>\n",
       "      <td>14.977453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>w</td>\n",
       "      <td>135.431548</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>112.690476</td>\n",
       "      <td>532.952381</td>\n",
       "      <td>17.604193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>n</td>\n",
       "      <td>123.554348</td>\n",
       "      <td>202.826087</td>\n",
       "      <td>106.391304</td>\n",
       "      <td>364.565217</td>\n",
       "      <td>17.314068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>n</td>\n",
       "      <td>121.549028</td>\n",
       "      <td>276.220000</td>\n",
       "      <td>175.593333</td>\n",
       "      <td>402.620000</td>\n",
       "      <td>13.394574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>n</td>\n",
       "      <td>119.076687</td>\n",
       "      <td>247.951220</td>\n",
       "      <td>113.365854</td>\n",
       "      <td>808.024390</td>\n",
       "      <td>24.830059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>n</td>\n",
       "      <td>107.944444</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>451.000000</td>\n",
       "      <td>8.214887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>n</td>\n",
       "      <td>119.731928</td>\n",
       "      <td>182.238095</td>\n",
       "      <td>74.285714</td>\n",
       "      <td>301.690476</td>\n",
       "      <td>22.944278</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4839 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    class    GLCM_pan  Mean_Green    Mean_Red    Mean_NIR     SD_pan\n",
       "0       w  120.362774  205.500000  119.395349  416.581395  20.676318\n",
       "1       w  124.739583  202.800000  115.333333  354.333333  16.707151\n",
       "2       w  134.691964  199.285714  116.857143  477.857143  22.496712\n",
       "3       w  127.946309  178.368421   92.368421  278.473684  14.977453\n",
       "4       w  135.431548  197.000000  112.690476  532.952381  17.604193\n",
       "..    ...         ...         ...         ...         ...        ...\n",
       "495     n  123.554348  202.826087  106.391304  364.565217  17.314068\n",
       "496     n  121.549028  276.220000  175.593333  402.620000  13.394574\n",
       "497     n  119.076687  247.951220  113.365854  808.024390  24.830059\n",
       "498     n  107.944444  197.000000   90.000000  451.000000   8.214887\n",
       "499     n  119.731928  182.238095   74.285714  301.690476  22.944278\n",
       "\n",
       "[4839 rows x 6 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = database.load_wilt()\n",
    "label_col = \"class\"\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4839 entries, 0 to 499\n",
      "Data columns (total 6 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   class       4839 non-null   int64  \n",
      " 1   GLCM_pan    4839 non-null   float64\n",
      " 2   Mean_Green  4839 non-null   float64\n",
      " 3   Mean_Red    4839 non-null   float64\n",
      " 4   Mean_NIR    4839 non-null   float64\n",
      " 5   SD_pan      4839 non-null   float64\n",
      "dtypes: float64(5), int64(1)\n",
      "memory usage: 264.6 KB\n"
     ]
    }
   ],
   "source": [
    "df[label_col] = df[label_col].replace({\"w\": 1, \"n\": 0})\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No correlations detected. Nothing to be done here.\n"
     ]
    }
   ],
   "source": [
    "cor_feat = dp.CorrelatedFeatures(\n",
    "\t\t\t\t\tmethod_num_num=[\"spearman\", \"pearson\", \"kendall\"],\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tnum_corr_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tnum_pvalue_th=0.05,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tmethod_num_cat=\"model\",\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tmodel_metrics=[\"f1\", \"auc\"],\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tmetric_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tcat_corr_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Categorical x Categorical correlations\n",
    "\t\t\t\t\tcat_pvalue_th=0.01,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Categorical x Categorical correlations\n",
    "\t\t\t\t\tjson_summary=\"./corr_json/c2_summary.json\",\n",
    "\t\t\t\t\tjson_corr=\"./corr_json/c2_corr.json\",\n",
    "\t\t\t\t\tjson_uncorr=\"./corr_json/c2_uncorr.json\"\n",
    "\t\t\t\t)\n",
    "cor_feat.fit(df=df, label_col=label_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember to look through the JSON files generated in the previous cell"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2 - Baseline Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x, test_x, train_y, test_y = dp.split_data(df, label_col, test_size=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/xgboost/sklearn.py:1224: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1076   69]\n",
      " [   9   56]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 93.55%\n",
      "Precision:  0.719852534562212\n",
      "Recall:  0.9006382264024186\n",
      "F1 =  0.777248052867595\n",
      "ROC AUC =  0.94718844474303\n",
      "best_th = 0.12699560821056366\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x, train_y, test_x, test_y, model_name=\"xgb\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1105   40]\n",
      " [  10   55]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 95.87%\n",
      "Precision:  0.7849893792777909\n",
      "Recall:  0.9056096741686261\n",
      "F1 =  0.8326880530973452\n",
      "ROC AUC =  0.916022841787034\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x, train_y, test_x, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3 - Data Transformation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DataMinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1015  130]\n",
      " [  22   43]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 87.44%\n",
      "Precision:  0.6136699349501954\n",
      "Recall:  0.7740006718172656\n",
      "F1 =  0.6458418381101295\n",
      "ROC AUC =  0.7831709774941216\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataMinMaxScaler()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DataNormalizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No columns specified for imputation. These columns have been automatically identified:\n",
      "[]\n",
      "WARNING: No columns with NaN values identified. Nothing to be done.\n",
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1080   65]\n",
      " [   4   61]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 94.30%\n",
      "Precision:  0.7402184736133076\n",
      "Recall:  0.9408464897547867\n",
      "F1 =  0.8038939350165242\n",
      "ROC AUC =  0.9593416190796104\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataNormalizer()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DataStandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1080   65]\n",
      " [  12   53]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 93.64%\n",
      "Precision:  0.7190817656919353\n",
      "Recall:  0.8793080282163251\n",
      "F1 =  0.7724069364952575\n",
      "ROC AUC =  0.8901511588847832\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataStandardScaler()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DataQuantileTransformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1103   42]\n",
      " [   4   61]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 96.20%\n",
      "Precision:  0.7943098201208549\n",
      "Recall:  0.9508901578770574\n",
      "F1 =  0.8528820942231246\n",
      "ROC AUC =  0.960893516963386\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataQuantileTransformer()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, this transformation had some impact in the results (depends on the seed used) when we use KNN. Let's check how this data transformation impacts the XGBoost model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/xgboost/sklearn.py:1224: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1076   69]\n",
      " [   9   56]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 93.55%\n",
      "Precision:  0.719852534562212\n",
      "Recall:  0.9006382264024186\n",
      "F1 =  0.777248052867595\n",
      "ROC AUC =  0.9457910648303662\n",
      "best_th = 0.12699560821056366\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"xgb\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As depicted above, the results for the XGBoost remains the same as before. This shows us that data transformations are more impactful in certain models and less meaningful in others.\n",
    "\n",
    "## DataRobustScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1109   36]\n",
      " [   7   58]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 96.45%\n",
      "Precision:  0.8053744375810264\n",
      "Recall:  0.930433322136379\n",
      "F1 =  0.8552708074292279\n",
      "ROC AUC =  0.9397715821296606\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataRobustScaler()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DataPowerTransformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1111   34]\n",
      " [   6   59]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 96.69%\n",
      "Precision:  0.8145185356321175\n",
      "Recall:  0.9389989922741014\n",
      "F1 =  0.8645759885393234\n",
      "ROC AUC =  0.9472489082969431\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataPowerTransformer()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4 - Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No columns specified for imputation. These columns have been automatically identified:\n",
      "[]\n",
      "WARNING: No columns with NaN values identified. Nothing to be done.\n",
      "No columns specified for encoding. These columns have been automatically identfied as the following:\n",
      "[]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=4)]: Done   5 out of   5 | elapsed:    0.7s finished\n",
      "\n",
      "[2022-03-16 10:07:03] Features: 4/1 -- score: 0.8816067968906397[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=4)]: Done   4 out of   4 | elapsed:    0.0s finished\n",
      "\n",
      "[2022-03-16 10:07:03] Features: 3/1 -- score: 0.8549936296115336[Parallel(n_jobs=3)]: Using backend LokyBackend with 3 concurrent workers.\n",
      "[Parallel(n_jobs=3)]: Done   3 out of   3 | elapsed:    0.1s finished\n",
      "\n",
      "[2022-03-16 10:07:03] Features: 2/1 -- score: 0.8616183246641761[Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.\n",
      "[Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    0.5s finished\n",
      "\n",
      "[2022-03-16 10:07:04] Features: 1/1 -- score: 0.5828580172198672"
     ]
    }
   ],
   "source": [
    "feat_sel = dp.SeqFeatSelection(n_jobs=4, forward=False)\n",
    "feat_sel.fit(X=train_x_scl, y=train_y)\n",
    "train_x_sel = feat_sel.transform(train_x_scl)\n",
    "test_x_sel = feat_sel.transform(test_x_scl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['GLCM_pan', 'Mean_Green', 'Mean_Red', 'Mean_NIR']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_sel.get_selected_features()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1114   31]\n",
      " [   4   61]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 97.11%\n",
      "Precision:  0.8297328303647817\n",
      "Recall:  0.955693651326839\n",
      "F1 =  0.8808019341891578\n",
      "ROC AUC =  0.9635807860262008\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x_sel, train_y, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5 - Synthetic Data\n",
    "\n",
    "## imblearn Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    3433\n",
       "1     196\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_y.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No columns specified for imputation. These columns have been automatically identified:\n",
      "[]\n",
      "WARNING: No columns with NaN values identified. Nothing to be done.\n",
      "\n",
      "SMOTE.\n",
      "\n",
      "Running oversampling...\n",
      "...finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    3433\n",
       "1     400\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rebalance = dp.Rebalance(\n",
    "\t\t\t\tX=train_x_sel,\n",
    "\t\t\t\ty=train_y,\n",
    "\t\t\t\tstrategy_over={0:3433, 1:400},\n",
    "\t\t\t\tover_sampler=True,\n",
    "\t\t\t\tunder_sampler=False\n",
    "\t\t\t)\n",
    "train_x_res, train_y_res = rebalance.fit_resample()\n",
    "train_y_res.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1111   34]\n",
      " [   3   62]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 96.94%\n",
      "Precision:  0.8215701675643328\n",
      "Recall:  0.9620759153510245\n",
      "F1 =  0.8769037033371001\n",
      "ROC AUC =  0.9707625125965738\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x_res, train_y_res, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating Artificial Data using Deep Learning\n",
    "\n",
    "### CTGAN\n",
    "\n",
    "Let's use the dataset with the original categorical variables, since CTGAN is capable of dealing with categorical variables internally. We will start by re-encoding the ordinal variables. We then proceed to split the dataset before using the CTGAN. This guarantees that we don't contaminate our test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    3433\n",
       "1     396\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "synth = dp.Synthesizer(\n",
    "\t\t\t\tX=train_x_sel,\n",
    "\t\t\t\ty=train_y,\n",
    "\t\t\t\tepochs=400,\n",
    "\t\t\t\tmodel=\"ctgan\",\n",
    "\t\t\t\tload_existing=True\n",
    "\t\t\t)\n",
    "synth.fit()\n",
    "\n",
    "conditions = {label_col:1}\t# create more of the undersampled class\n",
    "syn_train_x, syn_train_y = synth.transform(X=train_x_sel, y=train_y, n_samples=200, conditions=conditions)\n",
    "\n",
    "syn_train_y.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1046   99]\n",
      " [   1   64]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 91.74%\n",
      "Precision:  0.6958414634860923\n",
      "Recall:  0.9490762512596573\n",
      "F1 =  0.7578915354078628\n",
      "ROC AUC =  0.9839234128317098\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(syn_train_x, syn_train_y, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try creating more artificial instances and check how this impacts the model's performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1087   58]\n",
      " [   6   59]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 94.71%\n",
      "Precision:  0.7493920128869809\n",
      "Recall:  0.9285186429291232\n",
      "F1 =  0.8098773433894078\n",
      "ROC AUC =  0.978018139066174\n",
      "best_th = 0.6\n"
     ]
    }
   ],
   "source": [
    "conditions = {label_col:1}\t# create more of the undersampled class\n",
    "syn_train_x, syn_train_y = synth.transform(X=train_x_sel, y=train_y, n_samples=2000, conditions=conditions)\n",
    "\n",
    "model = dp.train_model_plot_results(syn_train_x, syn_train_y, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TVAE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n",
      "/home/matheus/miniconda3/envs/resp/lib/python3.7/site-packages/sklearn/mixture/_base.py:282: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1051   94]\n",
      " [   2   63]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 92.07%\n",
      "Precision:  0.699687275058825\n",
      "Recall:  0.9435673496808867\n",
      "F1 =  0.7619457492068957\n",
      "ROC AUC =  0.9733087000335909\n",
      "best_th = 0.2\n"
     ]
    }
   ],
   "source": [
    "synth = dp.Synthesizer(\n",
    "\t\t\t\tX=train_x_sel,\n",
    "\t\t\t\ty=train_y,\n",
    "\t\t\t\tepochs=400,\n",
    "\t\t\t\tmodel=\"tvae\",\n",
    "\t\t\t\tload_existing=True\n",
    "\t\t\t)\n",
    "synth.fit()\n",
    "\n",
    "conditions = {label_col:1}\t# create more of the undersampled class\n",
    "syn2_train_x, syn2_train_y = synth.transform(X=train_x_sel, y=train_y, n_samples=200, conditions=conditions)\n",
    "\n",
    "model = dp.train_model_plot_results(syn2_train_x, syn2_train_y, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.12 ('rai')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "5215fd1cce9b64233b490e6c4e868a314fa8a5a2b064fe0583fd0c29542af034"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
