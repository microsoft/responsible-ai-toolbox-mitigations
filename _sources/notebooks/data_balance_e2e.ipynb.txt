{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# End to End Data Balance and Error Mitigation\n",
    "This Notebook will demonstrate how to use both the Data Balance Analysis capabilities and error mitigation functions together using an example HR dataset which is a tabular dataset with a label column that indicates whether or not a person is promoted based on attributes such as education, gender, number of trainings, and other factors. \n",
    "The steps that we will take in this notebook are \n",
    "1. We will first conduct an analysis on how balanced the data is. \n",
    "2. We will train an example model to see how it performs on the data using metrics and the Responsible AI Error Analysis Dashboard. \n",
    "3. We will try to balance the data to mitigate biases that may have resulted from unbalanced data\n",
    "5. We will train a new model using our data after applying \n",
    "4. We will then compare model performance before and after mitigating data imbalances by again using various performance metrics and the Error Analysis Dashboard."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we import all the dependencies needed in our analysis. This includes the classes to produce the data balance metrics, the sklearn functions to see the model performance and the error mitigation steps like DataRebalance and DataSplit that we apply to the dataset itself. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append('../notebooks')\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "import raimitigations.dataprocessing as dp\n",
    "\n",
    "from raimitigations.databalanceanalysis import (\n",
    "    FeatureBalanceMeasure,\n",
    "    AggregateBalanceMeasure,\n",
    "    DistributionBalanceMeasure,\n",
    ")\n",
    "\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "\n",
    "from download import download_datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train LightGBM Model\n",
    "Now we import the tabular dataset that we will look at in the example, we load it into a pandas dataframe that we can then modify and use for all the other steps. For the data balance analysis portion we need our label columns and a list of sensitive columns that are interested in checking for balance. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = \"../datasets/\"\n",
    "download_datasets(data_dir)\n",
    "df = pd.read_csv(data_dir + 'hr_promotion/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>education</th>\n",
       "      <th>gender</th>\n",
       "      <th>recruitment_channel</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>65438</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_7</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>f</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65141</td>\n",
       "      <td>Operations</td>\n",
       "      <td>region_22</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7513</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_19</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2542</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_23</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48945</td>\n",
       "      <td>Technology</td>\n",
       "      <td>region_26</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54803</th>\n",
       "      <td>3030</td>\n",
       "      <td>Technology</td>\n",
       "      <td>region_14</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54804</th>\n",
       "      <td>74592</td>\n",
       "      <td>Operations</td>\n",
       "      <td>region_27</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>f</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>56</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54805</th>\n",
       "      <td>13918</td>\n",
       "      <td>Analytics</td>\n",
       "      <td>region_1</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>79</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54806</th>\n",
       "      <td>13614</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54807</th>\n",
       "      <td>51526</td>\n",
       "      <td>HR</td>\n",
       "      <td>region_22</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>54808 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       employee_id         department     region         education gender  \\\n",
       "0            65438  Sales & Marketing   region_7  Master's & above      f   \n",
       "1            65141         Operations  region_22        Bachelor's      m   \n",
       "2             7513  Sales & Marketing  region_19        Bachelor's      m   \n",
       "3             2542  Sales & Marketing  region_23        Bachelor's      m   \n",
       "4            48945         Technology  region_26        Bachelor's      m   \n",
       "...            ...                ...        ...               ...    ...   \n",
       "54803         3030         Technology  region_14        Bachelor's      m   \n",
       "54804        74592         Operations  region_27  Master's & above      f   \n",
       "54805        13918          Analytics   region_1        Bachelor's      m   \n",
       "54806        13614  Sales & Marketing   region_9               NaN      m   \n",
       "54807        51526                 HR  region_22        Bachelor's      m   \n",
       "\n",
       "      recruitment_channel  no_of_trainings  age  previous_year_rating  \\\n",
       "0                sourcing                1   35                   5.0   \n",
       "1                   other                1   30                   5.0   \n",
       "2                sourcing                1   34                   3.0   \n",
       "3                   other                2   39                   1.0   \n",
       "4                   other                1   45                   3.0   \n",
       "...                   ...              ...  ...                   ...   \n",
       "54803            sourcing                1   48                   3.0   \n",
       "54804               other                1   37                   2.0   \n",
       "54805               other                1   27                   5.0   \n",
       "54806            sourcing                1   29                   1.0   \n",
       "54807               other                1   27                   1.0   \n",
       "\n",
       "       length_of_service  KPIs_met >80%  awards_won?  avg_training_score  \\\n",
       "0                      8              1            0                  49   \n",
       "1                      4              0            0                  60   \n",
       "2                      7              0            0                  50   \n",
       "3                     10              0            0                  50   \n",
       "4                      2              0            0                  73   \n",
       "...                  ...            ...          ...                 ...   \n",
       "54803                 17              0            0                  78   \n",
       "54804                  6              0            0                  56   \n",
       "54805                  3              1            0                  79   \n",
       "54806                  2              0            0                  45   \n",
       "54807                  5              0            0                  49   \n",
       "\n",
       "       is_promoted  \n",
       "0                0  \n",
       "1                0  \n",
       "2                0  \n",
       "3                0  \n",
       "4                0  \n",
       "...            ...  \n",
       "54803            0  \n",
       "54804            0  \n",
       "54805            0  \n",
       "54806            0  \n",
       "54807            0  \n",
       "\n",
       "[54808 rows x 14 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We do some data transformation on the categorical columns in order to make the training data input in the format that the lightGBM model expects. Although lightGBM can internally deal with categorical columns that the user specifies, we need to encode those categories into integers before we are able to train the lightGBM model on it, so we create a scikit pipeline contains the encoder and the LGBM classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>education</th>\n",
       "      <th>gender</th>\n",
       "      <th>recruitment_channel</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>65438</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_7</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>f</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65141</td>\n",
       "      <td>Operations</td>\n",
       "      <td>region_22</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7513</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_19</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2542</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_23</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48945</td>\n",
       "      <td>Technology</td>\n",
       "      <td>region_26</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee_id         department     region         education gender  \\\n",
       "0        65438  Sales & Marketing   region_7  Master's & above      f   \n",
       "1        65141         Operations  region_22        Bachelor's      m   \n",
       "2         7513  Sales & Marketing  region_19        Bachelor's      m   \n",
       "3         2542  Sales & Marketing  region_23        Bachelor's      m   \n",
       "4        48945         Technology  region_26        Bachelor's      m   \n",
       "\n",
       "  recruitment_channel  no_of_trainings  age  previous_year_rating  \\\n",
       "0            sourcing                1   35                   5.0   \n",
       "1               other                1   30                   5.0   \n",
       "2            sourcing                1   34                   3.0   \n",
       "3               other                2   39                   1.0   \n",
       "4               other                1   45                   3.0   \n",
       "\n",
       "   length_of_service  KPIs_met >80%  awards_won?  avg_training_score  \\\n",
       "0                  8              1            0                  49   \n",
       "1                  4              0            0                  60   \n",
       "2                  7              0            0                  50   \n",
       "3                 10              0            0                  50   \n",
       "4                  2              0            0                  73   \n",
       "\n",
       "   is_promoted  \n",
       "0            0  \n",
       "1            0  \n",
       "2            0  \n",
       "3            0  \n",
       "4            0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols_of_interest = [\"education\", \"recruitment_channel\"]\n",
    "categorical_cols = [\n",
    "    \"department\",\n",
    "    \"gender\",\n",
    "    \"education\",\n",
    "    \"region\",\n",
    "    \"recruitment_channel\",\n",
    "]\n",
    "label_col = \"is_promoted\"\n",
    "seed = 42\n",
    "# handle duplicates\n",
    "df = df.drop_duplicates().dropna()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "pipeline = Pipeline([\n",
    "                (\"ohe\", dp.EncoderOHE(col_encode=categorical_cols, drop=False)),\n",
    "                (\"model\", LGBMClassifier(n_estimators=50, random_state=42)),\n",
    "            ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we do a split on the data, train a LightGBM model using the scikit pipeline we created, and see how this model does on some test data. After this processing, we train the model and we can see that the model does well on false values, getting 97.3% of them correct, but the model does a lot worse on the true values, only identifying approximately a third of the true positives correctly. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def conf_matrix(y, pred):\n",
    "    ((tn, fp), (fn, tp)) = metrics.confusion_matrix(y, pred)\n",
    "    ((tnr, fpr), (fnr, tpr)) = metrics.confusion_matrix(y, pred, normalize=\"true\")\n",
    "    return pd.DataFrame(\n",
    "        [\n",
    "            [f\"TP = {tp} ({tpr:1.2%})\", f\"FN = {fn} ({fnr:1.2%})\"],\n",
    "            [f\"FP = {fp} ({fpr:1.2%})\", f\"TN = {tn} ({tnr:1.2%})\"],\n",
    "        ],\n",
    "        index=[\"True\", \"False\"],\n",
    "        columns=[\"Pred 1\", \"Pred 0\"],\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of errors on test dataset: 281\n",
      "                  Pred 1              Pred 0\n",
      "True   TP = 146 (34.52%)   FN = 277 (65.48%)\n",
      "False     FP = 4 (0.09%)  TN = 4439 (99.91%)\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      1.00      0.97      4443\n",
      "           1       0.97      0.35      0.51       423\n",
      "\n",
      "    accuracy                           0.94      4866\n",
      "   macro avg       0.96      0.67      0.74      4866\n",
      "weighted avg       0.94      0.94      0.93      4866\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## Train a model and get accuracy numbers\n",
    "# splitting the dataset\n",
    "np.random.seed(42)\n",
    "x_train, x_test, y_train, y_test = dp.split_data(df, label_col, test_size=0.1)\n",
    "# fitting the pipeline and predicting\n",
    "pipeline.fit(x_train, y_train)\n",
    "pred = pipeline.predict(x_test)\n",
    "\n",
    "\n",
    "print(\"number of errors on test dataset: \" + str(sum(pred != y_test)))\n",
    "print(conf_matrix(y_test, pred))\n",
    "print(classification_report(y_test, pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Error Analysis on Baseline Model\n",
    "Now that we have a baseline model to work with, we can see how this model is doing overall on the data and see if there are any cohorts within the data that the model performs worse on. Even if the model has a high accuracy, we want to make sure that accuracy is applicable over different sensitive groups. We use the [Error Analysis Dashboard](https://erroranalysis.ai/) to determine which cohorts of data this model performs worse on. Since the error analysis dashboard is interactive and too large to render on Github, we will include screenshots from our analysis. From these screenshots we can see that if we zoom in on certain cohorts that the model is getting more errors on, that region, department and education are all attributes that are involved in those cohorts. For the purpose of this example, we chose remove some of the other columns like KPIs_met from the error analysis since we want to focus on attributes that may lead to biases rather than more measurable attributes. We will focus on analyzing and mitigating errors within the department and education columns for the rest of the analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nfrom raiwidgets import ErrorAnalysisDashboard\\n\\nErrorAnalysisDashboard(\\n    dataset=x_test,\\n    true_y=y_test,\\n    features=x_test.columns,\\n    pred_y=pred,\\n    categorical_features=categorical_cols,\\n)\\n'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "from raiwidgets import ErrorAnalysisDashboard\n",
    "\n",
    "ErrorAnalysisDashboard(\n",
    "    dataset=x_test,\n",
    "    true_y=y_test,\n",
    "    features=x_test.columns,\n",
    "    pred_y=pred,\n",
    "    categorical_features=categorical_cols,\n",
    ")\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Balance Analysis\n",
    "First we can take a look at the feature balance measures. These measures indicate the difference in the label column amongst different feature values. For example the first row here indicates if people with the \"Masters & above\" education has a different proportion of people receiving the promoted outcome than those that have a Bachelor's. Lower values of these measures indicates that the amounts of people with class A vs versus those with class B with a label of 1 is similar. The t-test value can also tell us if the difference we see is statistically significant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ClassA</th>\n",
       "      <th>ClassB</th>\n",
       "      <th>FeatureName</th>\n",
       "      <th>dp</th>\n",
       "      <th>pmi</th>\n",
       "      <th>sdc</th>\n",
       "      <th>ji</th>\n",
       "      <th>krc</th>\n",
       "      <th>llr</th>\n",
       "      <th>t_test</th>\n",
       "      <th>ttest_pvalue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>education</td>\n",
       "      <td>-0.016964</td>\n",
       "      <td>-0.188396</td>\n",
       "      <td>-0.004202</td>\n",
       "      <td>-0.004908</td>\n",
       "      <td>-4.957166</td>\n",
       "      <td>0.625158</td>\n",
       "      <td>-0.260358</td>\n",
       "      <td>0.409471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Below Secondary</td>\n",
       "      <td>education</td>\n",
       "      <td>0.001259</td>\n",
       "      <td>0.015504</td>\n",
       "      <td>0.064587</td>\n",
       "      <td>0.070209</td>\n",
       "      <td>-31.829677</td>\n",
       "      <td>4.281150</td>\n",
       "      <td>-2.863668</td>\n",
       "      <td>0.051688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>Below Secondary</td>\n",
       "      <td>education</td>\n",
       "      <td>0.018223</td>\n",
       "      <td>0.203900</td>\n",
       "      <td>0.068788</td>\n",
       "      <td>0.075116</td>\n",
       "      <td>-26.872510</td>\n",
       "      <td>3.655992</td>\n",
       "      <td>-2.603310</td>\n",
       "      <td>0.060643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>sourcing</td>\n",
       "      <td>other</td>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>0.003066</td>\n",
       "      <td>0.035499</td>\n",
       "      <td>-0.000410</td>\n",
       "      <td>-0.000477</td>\n",
       "      <td>1.576541</td>\n",
       "      <td>-0.234355</td>\n",
       "      <td>0.084912</td>\n",
       "      <td>0.470033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sourcing</td>\n",
       "      <td>referred</td>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>-0.035991</td>\n",
       "      <td>-0.343135</td>\n",
       "      <td>0.048845</td>\n",
       "      <td>0.053990</td>\n",
       "      <td>-18.710400</td>\n",
       "      <td>2.661363</td>\n",
       "      <td>-1.731014</td>\n",
       "      <td>0.112794</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             ClassA            ClassB          FeatureName        dp  \\\n",
       "0        Bachelor's  Master's & above            education -0.016964   \n",
       "1        Bachelor's   Below Secondary            education  0.001259   \n",
       "2  Master's & above   Below Secondary            education  0.018223   \n",
       "0          sourcing             other  recruitment_channel  0.003066   \n",
       "1          sourcing          referred  recruitment_channel -0.035991   \n",
       "\n",
       "        pmi       sdc        ji        krc       llr    t_test  ttest_pvalue  \n",
       "0 -0.188396 -0.004202 -0.004908  -4.957166  0.625158 -0.260358      0.409471  \n",
       "1  0.015504  0.064587  0.070209 -31.829677  4.281150 -2.863668      0.051688  \n",
       "2  0.203900  0.068788  0.075116 -26.872510  3.655992 -2.603310      0.060643  \n",
       "0  0.035499 -0.000410 -0.000477   1.576541 -0.234355  0.084912      0.470033  \n",
       "1 -0.343135  0.048845  0.053990 -18.710400  2.661363 -1.731014      0.112794  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_measures = FeatureBalanceMeasure(cols_of_interest, label_col)\n",
    "\n",
    "train_df = x_train.copy()\n",
    "train_df[label_col] = y_train\n",
    "\n",
    "feat_measures1 = feature_measures.measures(train_df)\n",
    "feat_measures1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline \n",
    "educations = train_df[\"education\"].unique()\n",
    "education_dp_values = feat_measures1[feat_measures1[\"FeatureName\"] == \"education\"][\n",
    "    [\"ClassA\", \"ClassB\", \"pmi\"]\n",
    "]\n",
    "education_dp_array = np.zeros((len(educations), len(educations)))\n",
    "\n",
    "for idx, row in education_dp_values.iterrows():\n",
    "    class_a = row[0]\n",
    "    class_b = row[1]\n",
    "    dp_value = row[2]\n",
    "    i, j = np.where(educations == class_a)[0][0], np.where(educations == class_b)\n",
    "    dp_value = round(dp_value, 2)\n",
    "    education_dp_array[i, j] = dp_value\n",
    "    education_dp_array[j, i] = -1 * dp_value\n",
    "\n",
    "colormap = \"RdBu\"\n",
    "dp_min, dp_max = -1.0, 1.0\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "im = ax.imshow(education_dp_array, vmin=dp_min, vmax=dp_max, cmap=colormap)\n",
    "\n",
    "cbar = ax.figure.colorbar(im, ax=ax)\n",
    "cbar.ax.set_ylabel(\"Point Mutual Info\", rotation=-90, va=\"bottom\")\n",
    "\n",
    "ax.set_xticks(np.arange(len(educations)))\n",
    "ax.set_yticks(np.arange(len(educations)))\n",
    "ax.set_xticklabels(educations)\n",
    "ax.set_yticklabels(educations)\n",
    "\n",
    "plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n",
    "\n",
    "for i in range(len(educations)):\n",
    "    for j in range(len(educations)):\n",
    "        text = ax.text(\n",
    "            j, i, education_dp_array[i, j], ha=\"center\", va=\"center\", color=\"k\"\n",
    "        )\n",
    "\n",
    "ax.set_title(\"PMI of education in HR Dataset\")\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we can take a look at the distribution balance measures. These measures each of the columns of interest that we selected to the uniform distribution of those values. Values that are closer to zero indicate that the difference between the actual distribution of the data and the uniform distribution of values. We find that these values pretty far from zero, so they don't align to a uniform distribution well before we make any modifications to the original data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FeatureName</th>\n",
       "      <th>kl_divergence</th>\n",
       "      <th>js_dist</th>\n",
       "      <th>wasserstein_dist</th>\n",
       "      <th>inf_norm_dist</th>\n",
       "      <th>total_variation_dist</th>\n",
       "      <th>chi_sq_p_value</th>\n",
       "      <th>chi_sq_stat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>education</td>\n",
       "      <td>0.433445</td>\n",
       "      <td>0.358342</td>\n",
       "      <td>0.235238</td>\n",
       "      <td>0.352857</td>\n",
       "      <td>0.352857</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30235.985340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>0.326923</td>\n",
       "      <td>0.315666</td>\n",
       "      <td>0.208217</td>\n",
       "      <td>0.312326</td>\n",
       "      <td>0.312326</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20356.403343</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           FeatureName  kl_divergence   js_dist  wasserstein_dist  \\\n",
       "0            education       0.433445  0.358342          0.235238   \n",
       "1  recruitment_channel       0.326923  0.315666          0.208217   \n",
       "\n",
       "   inf_norm_dist  total_variation_dist  chi_sq_p_value   chi_sq_stat  \n",
       "0       0.352857              0.352857             0.0  30235.985340  \n",
       "1       0.312326              0.312326             0.0  20356.403343  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist_measures = DistributionBalanceMeasure(cols_of_interest)\n",
    "dist_measures1 = dist_measures.measures(train_df)\n",
    "dist_measures1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline \n",
    "measures_of_interest = [\n",
    "    \"kl_divergence\",\n",
    "    \"js_dist\",\n",
    "    \"inf_norm_dist\",\n",
    "    \"total_variation_dist\",\n",
    "    \"wasserstein_dist\",\n",
    "]\n",
    "education_measures = dist_measures1[dist_measures1[\"FeatureName\"] == \"education\"].iloc[\n",
    "    0\n",
    "]\n",
    "recruitment_measures = dist_measures1[\n",
    "    dist_measures1[\"FeatureName\"] == \"recruitment_channel\"\n",
    "].iloc[0]\n",
    "education_array = [\n",
    "    round(education_measures[measure], 4) for measure in measures_of_interest\n",
    "]\n",
    "recruitment_array = [\n",
    "    round(recruitment_measures[measure], 4) for measure in measures_of_interest\n",
    "]\n",
    "\n",
    "x = np.arange(len(measures_of_interest))\n",
    "width = 0.35\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "rects1 = ax.bar(x - width / 2, education_array, width, label=\"education\")\n",
    "rects2 = ax.bar(x + width / 2, recruitment_array, width, label=\"recruitment_channel\")\n",
    "\n",
    "ax.set_xlabel(\"Measure\")\n",
    "ax.set_ylabel(\"Value\")\n",
    "ax.set_title(\n",
    "    \"Distribution Balance Measures of Education and Recruitment Channel in Adult Dataset\"\n",
    ")\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(measures_of_interest)\n",
    "ax.legend()\n",
    "\n",
    "plt.setp(ax.get_xticklabels(), rotation=20, ha=\"right\", rotation_mode=\"default\")\n",
    "\n",
    "\n",
    "def autolabel(rects):\n",
    "    for rect in rects:\n",
    "        height = rect.get_height()\n",
    "        ax.annotate(\n",
    "            \"{}\".format(height),\n",
    "            xy=(rect.get_x() + rect.get_width() / 2, height),\n",
    "            xytext=(0, 1),  # 1 point vertical offset\n",
    "            textcoords=\"offset points\",\n",
    "            ha=\"center\",\n",
    "            va=\"bottom\",\n",
    "        )\n",
    "\n",
    "\n",
    "autolabel(rects1)\n",
    "autolabel(rects2)\n",
    "\n",
    "fig.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also look at aggregate balance measures which indicate a notion of overall inequality in the data. We can see that the Atkinson Index is 0.79. This means that in order to create a perfectly balanced dataset over these measures we would need to forgo 79.9% of the data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>theil_l_index</th>\n",
       "      <th>theil_t_index</th>\n",
       "      <th>atkinson_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.60865</td>\n",
       "      <td>0.760961</td>\n",
       "      <td>0.799842</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   theil_l_index  theil_t_index  atkinson_index\n",
       "0        1.60865       0.760961        0.799842"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agg_measures = AggregateBalanceMeasure(cols_of_interest)\n",
    "agg_measures1 = agg_measures.measures(train_df)\n",
    "agg_measures1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Error Mitigation: Rebalancing dataset\n",
    "In order to rebalance the data we can choose from three different methods of under or oversampling. These are SMOTE, Tomek and SMOTE-Tomek. SMOTE is a oversampling technique for the less represented class. Tomek is an undersampling technique that would be applied to the more represented class. Smote-Tomek is when both of these methods are applied in conjunction on the dataset. In this example, we will choose to use the SMOTE sampling technique on the columns of interest. The Rebalance function can only be applied on one column at a time so in order to apply this rebalancing technique on a cohort of two sensitive columns instead of an individual column, we combine these two columns into a single column that can be balanced. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>gender</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "      <th>education_recruitment_cohort</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12551</th>\n",
       "      <td>37468</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>2.0</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>0 * 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29225</th>\n",
       "      <td>42421</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>75</td>\n",
       "      <td>0</td>\n",
       "      <td>2 * 0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53838</th>\n",
       "      <td>75216</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>3.0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>0 * 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13948</th>\n",
       "      <td>12975</td>\n",
       "      <td>5</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>69</td>\n",
       "      <td>0</td>\n",
       "      <td>0 * 0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26298</th>\n",
       "      <td>6524</td>\n",
       "      <td>7</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>0 * 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38940</th>\n",
       "      <td>51399</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>0 * 0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8800</th>\n",
       "      <td>30117</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "      <td>3.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>2 * 0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12235</th>\n",
       "      <td>50057</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>0 * 0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34219</th>\n",
       "      <td>22338</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0 * 0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19296</th>\n",
       "      <td>50970</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>3.0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>0 * 1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>43794 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       employee_id  department  region  gender  no_of_trainings  age  \\\n",
       "12551        37468           7      11       1                1   57   \n",
       "29225        42421           5       4       0                1   42   \n",
       "53838        75216           7       1       1                1   39   \n",
       "13948        12975           5      14       1                1   57   \n",
       "26298         6524           7      25       1                1   35   \n",
       "...            ...         ...     ...     ...              ...  ...   \n",
       "38940        51399           7      31       1                1   52   \n",
       "8800         30117           5      11       1                1   56   \n",
       "12235        50057           8       7       1                1   36   \n",
       "34219        22338           4      14       1                1   33   \n",
       "19296        50970           7      11       1                1   45   \n",
       "\n",
       "       previous_year_rating  length_of_service  KPIs_met >80%  awards_won?  \\\n",
       "12551                   2.0                 26              0            0   \n",
       "29225                   3.0                  6              0            0   \n",
       "53838                   3.0                 12              0            0   \n",
       "13948                   3.0                  7              0            0   \n",
       "26298                   4.0                  7              0            0   \n",
       "...                     ...                ...            ...          ...   \n",
       "38940                   3.0                  9              0            0   \n",
       "8800                    3.0                 29              1            0   \n",
       "12235                   1.0                 10              0            0   \n",
       "34219                   3.0                  2              0            0   \n",
       "19296                   3.0                 13              1            0   \n",
       "\n",
       "       avg_training_score  is_promoted education_recruitment_cohort  \n",
       "12551                  54            0                        0 * 2  \n",
       "29225                  75            0                        2 * 0  \n",
       "53838                  51            0                        0 * 2  \n",
       "13948                  69            0                        0 * 0  \n",
       "26298                  49            0                        0 * 2  \n",
       "...                   ...          ...                          ...  \n",
       "38940                  46            0                        0 * 0  \n",
       "8800                   90            1                        2 * 0  \n",
       "12235                  82            0                        0 * 0  \n",
       "34219                  61            0                        0 * 0  \n",
       "19296                  52            0                        0 * 1  \n",
       "\n",
       "[43794 rows x 13 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def combine_cols(df):\n",
    "    return str(df[0]) + \" * \" + str(df[1])\n",
    "\n",
    "encoder = dp.EncoderOrdinal(col_encode=categorical_cols)\n",
    "\n",
    "train_df2 = train_df.copy()\n",
    "encoder.fit(train_df2)\n",
    "train_df2 = encoder.transform(train_df2)\n",
    "\n",
    "train_df2[\"education_recruitment_cohort\"] = train_df2[ [\"education\", \"recruitment_channel\"] ].apply(combine_cols, axis=1)\n",
    "train_df2 = train_df2.drop([\"education\", \"recruitment_channel\"], axis=1)\n",
    "train_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0 * 0    16581\n",
       "0 * 2    12755\n",
       "2 * 0     7509\n",
       "2 * 2     5623\n",
       "0 * 1      715\n",
       "1 * 0      222\n",
       "2 * 1      189\n",
       "1 * 2      184\n",
       "1 * 1       16\n",
       "Name: education_recruitment_cohort, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df2['education_recruitment_cohort'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No columns specified for imputation. These columns have been automatically identified:\n",
      "[]\n",
      "Running oversampling...\n",
      "...finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0 * 2    16581\n",
       "2 * 0    16581\n",
       "0 * 0    16581\n",
       "2 * 2    16581\n",
       "1 * 2    16581\n",
       "1 * 0    16581\n",
       "0 * 1    16581\n",
       "2 * 1    16581\n",
       "1 * 1    16581\n",
       "Name: education_recruitment_cohort, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rebalance = dp.Rebalance(\n",
    "\t\t\t\tdf=train_df2,\n",
    "\t\t\t\trebalance_col='education_recruitment_cohort',\n",
    "\t\t\t\tk_neighbors=4\n",
    "\t\t\t)\n",
    "smote_df = rebalance.fit_resample()\n",
    "smote_df['education_recruitment_cohort'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "smote_df['education'] = smote_df['education_recruitment_cohort'].apply(lambda x: int(x.split(\" * \")[0]))\n",
    "smote_df['recruitment_channel'] = smote_df['education_recruitment_cohort'].apply(lambda x: int(x.split(\" * \")[1]))\n",
    "smote_df = smote_df.drop([\"education_recruitment_cohort\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>gender</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "      <th>education</th>\n",
       "      <th>recruitment_channel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>37468</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_2</td>\n",
       "      <td>m</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>sourcing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42421</td>\n",
       "      <td>Procurement</td>\n",
       "      <td>region_13</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>75</td>\n",
       "      <td>0</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75216</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_10</td>\n",
       "      <td>m</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>sourcing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12975</td>\n",
       "      <td>Procurement</td>\n",
       "      <td>region_22</td>\n",
       "      <td>m</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>69</td>\n",
       "      <td>0</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6524</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_32</td>\n",
       "      <td>m</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>sourcing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149224</th>\n",
       "      <td>19927</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_25</td>\n",
       "      <td>m</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>sourcing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149225</th>\n",
       "      <td>50400</td>\n",
       "      <td>HR</td>\n",
       "      <td>region_17</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>4.326005</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>sourcing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149226</th>\n",
       "      <td>73625</td>\n",
       "      <td>Operations</td>\n",
       "      <td>region_13</td>\n",
       "      <td>m</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>sourcing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149227</th>\n",
       "      <td>73791</td>\n",
       "      <td>Operations</td>\n",
       "      <td>region_17</td>\n",
       "      <td>m</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>4.379261</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>sourcing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149228</th>\n",
       "      <td>9161</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_2</td>\n",
       "      <td>m</td>\n",
       "      <td>1</td>\n",
       "      <td>38</td>\n",
       "      <td>3.134218</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>79</td>\n",
       "      <td>0</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>sourcing</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>149229 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        employee_id         department     region gender  no_of_trainings  \\\n",
       "0             37468  Sales & Marketing   region_2      m                1   \n",
       "1             42421        Procurement  region_13      f                1   \n",
       "2             75216  Sales & Marketing  region_10      m                1   \n",
       "3             12975        Procurement  region_22      m                1   \n",
       "4              6524  Sales & Marketing  region_32      m                1   \n",
       "...             ...                ...        ...    ...              ...   \n",
       "149224        19927  Sales & Marketing  region_25      m                1   \n",
       "149225        50400                 HR  region_17      f                1   \n",
       "149226        73625         Operations  region_13      m                1   \n",
       "149227        73791         Operations  region_17      m                1   \n",
       "149228         9161  Sales & Marketing   region_2      m                1   \n",
       "\n",
       "        age  previous_year_rating  length_of_service  KPIs_met >80%  \\\n",
       "0        57              2.000000                 26              0   \n",
       "1        42              3.000000                  6              0   \n",
       "2        39              3.000000                 12              0   \n",
       "3        57              3.000000                  7              0   \n",
       "4        35              4.000000                  7              0   \n",
       "...     ...                   ...                ...            ...   \n",
       "149224   41              3.000000                 11              0   \n",
       "149225   36              4.326005                  7              0   \n",
       "149226   40              3.000000                 13              0   \n",
       "149227   41              4.379261                 10              0   \n",
       "149228   38              3.134218                  8              0   \n",
       "\n",
       "        awards_won?  avg_training_score  is_promoted         education  \\\n",
       "0                 0                  54            0        Bachelor's   \n",
       "1                 0                  75            0  Master's & above   \n",
       "2                 0                  51            0        Bachelor's   \n",
       "3                 0                  69            0        Bachelor's   \n",
       "4                 0                  49            0        Bachelor's   \n",
       "...             ...                 ...          ...               ...   \n",
       "149224            0                  45            0  Master's & above   \n",
       "149225            0                  61            0  Master's & above   \n",
       "149226            0                  72            0  Master's & above   \n",
       "149227            0                  62            0  Master's & above   \n",
       "149228            0                  79            0  Master's & above   \n",
       "\n",
       "       recruitment_channel  \n",
       "0                 sourcing  \n",
       "1                    other  \n",
       "2                 sourcing  \n",
       "3                    other  \n",
       "4                 sourcing  \n",
       "...                    ...  \n",
       "149224            sourcing  \n",
       "149225            sourcing  \n",
       "149226            sourcing  \n",
       "149227            sourcing  \n",
       "149228            sourcing  \n",
       "\n",
       "[149229 rows x 14 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smote_df = encoder.inverse_transform(smote_df)\n",
    "smote_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43794\n",
      "149229\n"
     ]
    }
   ],
   "source": [
    "print(x_train.shape[0])\n",
    "print(smote_df.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After applying the SMOTE Rebalancing mitigation, we get a dataset that is much larger than the original data frame. The SMOTE Method applies oversampling in order to balance the dataset. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New Model on Rebalanced Datasets\n",
    "After applying the SMOTE Method on the data, we can then train a new lightGBM model on this newly balanced data and see if there are differences in model performance based on this balancing. We compare the results below and find that the new model trained on the data post rebalancing does a better job predicting true positives than the original model and thus has greater recall and overall precision. So not only does data rebalancing help with making sure a model is less biased, it also helps the model actually fit and be able to predict the data outcomes more accurately. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train2 = smote_df.drop(columns=[label_col])\n",
    "y_train2 = smote_df[label_col]\n",
    "\n",
    "pipeline2 = Pipeline([\n",
    "                (\"ohe\", dp.EncoderOHE(col_encode=categorical_cols, drop=False)),\n",
    "                (\"model\", LGBMClassifier(n_estimators=50, random_state=42)),\n",
    "            ])\n",
    "\n",
    "pipeline2.fit(x_train2, y_train2)\n",
    "\n",
    "pred2 = pipeline2.predict(x_test)\n",
    "pred_model1 = pipeline.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We compare the number of error that the model 1 that was trained before rebalancing and model 2 that was trained after rebalancing have and we find that overall there are less errors with model 2. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\u001b[95m\u001b[1mBEFORE: \u001b[0mnumber of test dataset instances: \u001b[1m\u001b[92m4866\u001b[0m\n",
      "      : number of errors on test dataset: \u001b[1m\u001b[91m281\u001b[0m\n",
      "\n",
      "\u001b[95m\u001b[1mAFTER:  \u001b[0mnumber of test dataset instances: \u001b[1m\u001b[92m4866\u001b[0m\n",
      "     :  number of errors on test dataset: \u001b[1m\u001b[91m311\u001b[0m\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Compare Results\n",
    "class color:\n",
    "    PURPLE = \"\\033[95m\"\n",
    "    CYAN = \"\\033[96m\"\n",
    "    DARKCYAN = \"\\033[36m\"\n",
    "    BLUE = \"\\033[94m\"\n",
    "    GREEN = \"\\033[92m\"\n",
    "    YELLOW = \"\\033[93m\"\n",
    "    RED = \"\\033[91m\"\n",
    "    BOLD = \"\\033[1m\"\n",
    "    UNDERLINE = \"\\033[4m\"\n",
    "    END = \"\\033[0m\"\n",
    "\n",
    "\n",
    "print(\"\")\n",
    "print(\n",
    "    color.PURPLE\n",
    "    + color.BOLD\n",
    "    + \"BEFORE: \"\n",
    "    + color.END\n",
    "    + \"number of test dataset instances: \"\n",
    "    + color.BOLD\n",
    "    + color.GREEN\n",
    "    + str(len(y_test))\n",
    "    + color.END\n",
    ")\n",
    "print(\n",
    "    \"      : number of errors on test dataset: \"\n",
    "    + color.BOLD\n",
    "    + color.RED\n",
    "    + str(sum(pred_model1 != y_test))\n",
    "    + color.END\n",
    ")\n",
    "print(\"\")\n",
    "print(\n",
    "    color.PURPLE\n",
    "    + color.BOLD\n",
    "    + \"AFTER:  \"\n",
    "    + color.END\n",
    "    + \"number of test dataset instances: \"\n",
    "    + color.BOLD\n",
    "    + color.GREEN\n",
    "    + str(len(y_test))\n",
    "    + color.END\n",
    ")\n",
    "print(\n",
    "    \"     :  number of errors on test dataset: \"\n",
    "    + color.BOLD\n",
    "    + color.RED\n",
    "    + str(sum(pred2 != y_test))\n",
    "    + color.END\n",
    ")\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------------------------------------------------\n",
      "\n",
      "\u001b[94m\u001b[1mBEFORE: conf_matrix:\u001b[0m\n",
      "--------------------\n",
      "                  Pred 1              Pred 0\n",
      "True   TP = 146 (34.52%)   FN = 277 (65.48%)\n",
      "False     FP = 4 (0.09%)  TN = 4439 (99.91%)\n",
      "\n",
      "\u001b[94m\u001b[1mAFTER: conf_matrix:\u001b[0m\n",
      "-------------------\n",
      "                  Pred 1              Pred 0\n",
      "True   TP = 114 (26.95%)   FN = 309 (73.05%)\n",
      "False     FP = 2 (0.05%)  TN = 4441 (99.95%)\n",
      "-----------------------------------------------------------------------\n",
      "-----------------------------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# compare conf matrices\n",
    "print(\"-----------------------------------------------------------------------\")\n",
    "print(\"\")\n",
    "print(color.BLUE + color.BOLD + \"BEFORE: conf_matrix:\" + color.END)\n",
    "print(\"--------------------\")\n",
    "print(conf_matrix(y_test, pred_model1))\n",
    "print(\"\")\n",
    "print(color.BLUE + color.BOLD + \"AFTER: conf_matrix:\" + color.END)\n",
    "print(\"-------------------\")\n",
    "print(conf_matrix(y_test, pred2))\n",
    "print(\"-----------------------------------------------------------------------\")\n",
    "print(\"-----------------------------------------------------------------------\")\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[93m\u001b[1mBEFORE: classification_report:\u001b[0m\n",
      "--------------------------------\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      1.00      0.97      4443\n",
      "           1       0.97      0.35      0.51       423\n",
      "\n",
      "    accuracy                           0.94      4866\n",
      "   macro avg       0.96      0.67      0.74      4866\n",
      "weighted avg       0.94      0.94      0.93      4866\n",
      "\n",
      "\u001b[93m\u001b[1mAFTER: classification_report:\u001b[0m\n",
      "--------------------------------\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      1.00      0.97      4443\n",
      "           1       0.98      0.27      0.42       423\n",
      "\n",
      "    accuracy                           0.94      4866\n",
      "   macro avg       0.96      0.63      0.69      4866\n",
      "weighted avg       0.94      0.94      0.92      4866\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# compare classification report\n",
    "print(color.YELLOW + color.BOLD + \"BEFORE: classification_report:\" + color.END)\n",
    "print(\"--------------------------------\")\n",
    "print(classification_report(y_test, pred_model1))\n",
    "print(color.YELLOW + color.BOLD + \"AFTER: classification_report:\" + color.END)\n",
    "print(\"--------------------------------\")\n",
    "print(classification_report(y_test, pred2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even though the model started with fairly high accuracy, we were able to increase other measures of the model's performance "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We return the dataframe columns to their original form after rebalancing the data. We no longer encode  We want to be able to run the data balance analysis again on the newly rebalanced data and see what the difference is from before applying SMOTE and after."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The feature value measures before rebalancing don't indicate a lot of discrepancy in the outcome within specific features within a class since the values such as demographic parity which is on a 0 to 1 scale are very close to zero. After rebalancing, we still have similarly low values of these measures but there is not a significant improvement since they already started low."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ClassA</th>\n",
       "      <th>ClassB</th>\n",
       "      <th>FeatureName</th>\n",
       "      <th>dp</th>\n",
       "      <th>pmi</th>\n",
       "      <th>sdc</th>\n",
       "      <th>ji</th>\n",
       "      <th>krc</th>\n",
       "      <th>llr</th>\n",
       "      <th>t_test</th>\n",
       "      <th>ttest_pvalue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>education</td>\n",
       "      <td>-0.016964</td>\n",
       "      <td>-0.188396</td>\n",
       "      <td>-0.004202</td>\n",
       "      <td>-0.004908</td>\n",
       "      <td>-4.957166</td>\n",
       "      <td>0.625158</td>\n",
       "      <td>-0.260358</td>\n",
       "      <td>0.409471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Below Secondary</td>\n",
       "      <td>education</td>\n",
       "      <td>0.001259</td>\n",
       "      <td>0.015504</td>\n",
       "      <td>0.064587</td>\n",
       "      <td>0.070209</td>\n",
       "      <td>-31.829677</td>\n",
       "      <td>4.281150</td>\n",
       "      <td>-2.863668</td>\n",
       "      <td>0.051688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>Below Secondary</td>\n",
       "      <td>education</td>\n",
       "      <td>0.018223</td>\n",
       "      <td>0.203900</td>\n",
       "      <td>0.068788</td>\n",
       "      <td>0.075116</td>\n",
       "      <td>-26.872510</td>\n",
       "      <td>3.655992</td>\n",
       "      <td>-2.603310</td>\n",
       "      <td>0.060643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>sourcing</td>\n",
       "      <td>other</td>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>0.003066</td>\n",
       "      <td>0.035499</td>\n",
       "      <td>-0.000410</td>\n",
       "      <td>-0.000477</td>\n",
       "      <td>1.576541</td>\n",
       "      <td>-0.234355</td>\n",
       "      <td>0.084912</td>\n",
       "      <td>0.470033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sourcing</td>\n",
       "      <td>referred</td>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>-0.035991</td>\n",
       "      <td>-0.343135</td>\n",
       "      <td>0.048845</td>\n",
       "      <td>0.053990</td>\n",
       "      <td>-18.710400</td>\n",
       "      <td>2.661363</td>\n",
       "      <td>-1.731014</td>\n",
       "      <td>0.112794</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             ClassA            ClassB          FeatureName        dp  \\\n",
       "0        Bachelor's  Master's & above            education -0.016964   \n",
       "1        Bachelor's   Below Secondary            education  0.001259   \n",
       "2  Master's & above   Below Secondary            education  0.018223   \n",
       "0          sourcing             other  recruitment_channel  0.003066   \n",
       "1          sourcing          referred  recruitment_channel -0.035991   \n",
       "\n",
       "        pmi       sdc        ji        krc       llr    t_test  ttest_pvalue  \n",
       "0 -0.188396 -0.004202 -0.004908  -4.957166  0.625158 -0.260358      0.409471  \n",
       "1  0.015504  0.064587  0.070209 -31.829677  4.281150 -2.863668      0.051688  \n",
       "2  0.203900  0.068788  0.075116 -26.872510  3.655992 -2.603310      0.060643  \n",
       "0  0.035499 -0.000410 -0.000477   1.576541 -0.234355  0.084912      0.470033  \n",
       "1 -0.343135  0.048845  0.053990 -18.710400  2.661363 -1.731014      0.112794  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_measures1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ClassA</th>\n",
       "      <th>ClassB</th>\n",
       "      <th>FeatureName</th>\n",
       "      <th>dp</th>\n",
       "      <th>pmi</th>\n",
       "      <th>sdc</th>\n",
       "      <th>ji</th>\n",
       "      <th>krc</th>\n",
       "      <th>llr</th>\n",
       "      <th>t_test</th>\n",
       "      <th>ttest_pvalue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>education</td>\n",
       "      <td>0.020505</td>\n",
       "      <td>0.477400</td>\n",
       "      <td>0.018736</td>\n",
       "      <td>0.020331</td>\n",
       "      <td>0.166071</td>\n",
       "      <td>0.477400</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Below Secondary</td>\n",
       "      <td>education</td>\n",
       "      <td>0.047102</td>\n",
       "      <td>2.055539</td>\n",
       "      <td>0.043037</td>\n",
       "      <td>0.045560</td>\n",
       "      <td>0.381475</td>\n",
       "      <td>2.055539</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>Below Secondary</td>\n",
       "      <td>education</td>\n",
       "      <td>0.026597</td>\n",
       "      <td>1.578139</td>\n",
       "      <td>0.024302</td>\n",
       "      <td>0.025229</td>\n",
       "      <td>0.215404</td>\n",
       "      <td>1.578139</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>sourcing</td>\n",
       "      <td>other</td>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>-0.001005</td>\n",
       "      <td>-0.023586</td>\n",
       "      <td>-0.000918</td>\n",
       "      <td>-0.000994</td>\n",
       "      <td>-0.008141</td>\n",
       "      <td>-0.023586</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sourcing</td>\n",
       "      <td>referred</td>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>0.032909</td>\n",
       "      <td>1.520440</td>\n",
       "      <td>0.030069</td>\n",
       "      <td>0.031538</td>\n",
       "      <td>0.266528</td>\n",
       "      <td>1.520440</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             ClassA            ClassB          FeatureName        dp  \\\n",
       "0        Bachelor's  Master's & above            education  0.020505   \n",
       "1        Bachelor's   Below Secondary            education  0.047102   \n",
       "2  Master's & above   Below Secondary            education  0.026597   \n",
       "0          sourcing             other  recruitment_channel -0.001005   \n",
       "1          sourcing          referred  recruitment_channel  0.032909   \n",
       "\n",
       "        pmi       sdc        ji       krc       llr  t_test  ttest_pvalue  \n",
       "0  0.477400  0.018736  0.020331  0.166071  0.477400     0.0           0.5  \n",
       "1  2.055539  0.043037  0.045560  0.381475  2.055539     0.0           0.5  \n",
       "2  1.578139  0.024302  0.025229  0.215404  1.578139     0.0           0.5  \n",
       "0 -0.023586 -0.000918 -0.000994 -0.008141 -0.023586     0.0           0.5  \n",
       "1  1.520440  0.030069  0.031538  0.266528  1.520440     0.0           0.5  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_measures.measures(smote_df).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When we compare the distribution measures before and after rebalancing, we find that the data is much more evenly distributed (close to the uniform distribution) for the two columns of interest after rebalancing the data using the SMOTE algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FeatureName</th>\n",
       "      <th>kl_divergence</th>\n",
       "      <th>js_dist</th>\n",
       "      <th>wasserstein_dist</th>\n",
       "      <th>inf_norm_dist</th>\n",
       "      <th>total_variation_dist</th>\n",
       "      <th>chi_sq_p_value</th>\n",
       "      <th>chi_sq_stat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>education</td>\n",
       "      <td>0.433445</td>\n",
       "      <td>0.358342</td>\n",
       "      <td>0.235238</td>\n",
       "      <td>0.352857</td>\n",
       "      <td>0.352857</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30235.985340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>0.326923</td>\n",
       "      <td>0.315666</td>\n",
       "      <td>0.208217</td>\n",
       "      <td>0.312326</td>\n",
       "      <td>0.312326</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20356.403343</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           FeatureName  kl_divergence   js_dist  wasserstein_dist  \\\n",
       "0            education       0.433445  0.358342          0.235238   \n",
       "1  recruitment_channel       0.326923  0.315666          0.208217   \n",
       "\n",
       "   inf_norm_dist  total_variation_dist  chi_sq_p_value   chi_sq_stat  \n",
       "0       0.352857              0.352857             0.0  30235.985340  \n",
       "1       0.312326              0.312326             0.0  20356.403343  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# before\n",
    "dist_measures1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FeatureName</th>\n",
       "      <th>kl_divergence</th>\n",
       "      <th>js_dist</th>\n",
       "      <th>wasserstein_dist</th>\n",
       "      <th>inf_norm_dist</th>\n",
       "      <th>total_variation_dist</th>\n",
       "      <th>chi_sq_p_value</th>\n",
       "      <th>chi_sq_stat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>education</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>recruitment_channel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           FeatureName  kl_divergence  js_dist  wasserstein_dist  \\\n",
       "0            education            0.0      0.0               0.0   \n",
       "1  recruitment_channel            0.0      0.0               0.0   \n",
       "\n",
       "   inf_norm_dist  total_variation_dist  chi_sq_p_value  chi_sq_stat  \n",
       "0            0.0                   0.0             1.0          0.0  \n",
       "1            0.0                   0.0             1.0          0.0  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# after\n",
    "dist_measures.measures(smote_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Atkinson index which gives us the overall notion of inequality before and after rebalancing shows us that in order to get a perfectly balanced dataset, we no longer need to forgo any of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>theil_l_index</th>\n",
       "      <th>theil_t_index</th>\n",
       "      <th>atkinson_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.60865</td>\n",
       "      <td>0.760961</td>\n",
       "      <td>0.799842</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   theil_l_index  theil_t_index  atkinson_index\n",
       "0        1.60865       0.760961        0.799842"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# before\n",
    "agg_measures1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>theil_l_index</th>\n",
       "      <th>theil_t_index</th>\n",
       "      <th>atkinson_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   theil_l_index  theil_t_index  atkinson_index\n",
       "0            0.0            0.0             0.0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# after\n",
    "agg_measures.measures(smote_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "label the top as before and the bottom as after\n",
    "highlight underneath the cohort\n",
    "lower fill (meaning )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.12 ('rai')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "vscode": {
   "interpreter": {
    "hash": "5215fd1cce9b64233b490e6c4e868a314fa8a5a2b064fe0583fd0c29542af034"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
