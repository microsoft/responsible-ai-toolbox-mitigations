{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Defining a Cohort\n",
    "\n",
    "This library allows users to apply certain mitigations over a specific cohort, instead of â€‹applying it to the entire dataset. This is useful when, for example, two cohorts have a very different label distribution and we want to rebalance each cohort individually, instead of rebalancing the entire dataset. In some scenarios, applying a mitigation over each cohort separately is more advantageous than applying it over the whole dataset.\n",
    "\n",
    "In this notebook, we'll start covering this topic by showing how to define a single cohort. The class `CohortDefinition` is the one responsible for handling a single cohort, and this class is used internally by the `CohortManager` class in order to accomplish the tasks described previously.\n",
    "\n",
    "For starters, let's create a very simple dataset that we can use throughout this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>elf</td>\n",
       "      <td>1.60</td>\n",
       "      <td>85</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>orc</td>\n",
       "      <td>1.95</td>\n",
       "      <td>59</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>halfling</td>\n",
       "      <td>1.40</td>\n",
       "      <td>19</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>human</td>\n",
       "      <td>1.75</td>\n",
       "      <td>89</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>halfling</td>\n",
       "      <td>1.53</td>\n",
       "      <td>91</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>orc</td>\n",
       "      <td>2.10</td>\n",
       "      <td>79</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>elf</td>\n",
       "      <td>1.85</td>\n",
       "      <td>45</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>orc</td>\n",
       "      <td>1.79</td>\n",
       "      <td>82</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>human</td>\n",
       "      <td>1.65</td>\n",
       "      <td>47</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>orc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       race  height(m)  past_score  score\n",
       "0       elf       1.60          85     90\n",
       "1       orc       1.95          59     43\n",
       "2  halfling       1.40          19     29\n",
       "3     human       1.75          89     99\n",
       "4  halfling       1.53          91     85\n",
       "5       orc       2.10          79     73\n",
       "6       elf       1.85          45     58\n",
       "7       orc       1.79          82     94\n",
       "8     human       1.65          47     37\n",
       "9       orc        NaN          87     51"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from raimitigations.cohort import CohortDefinition\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    \"race\":     ['elf', 'orc', 'halfling', 'human', 'halfling', 'orc', 'elf', 'orc', 'human', 'orc'],\n",
    "    \"height(m)\":[1.6,   1.95,  1.40,       1.75,     1.53,      2.10,   1.85,  1.79,  1.65,   np.nan],\n",
    "    \"past_score\":[85,   59,    19,          89,      91,        79,      45,   82,    47,     87  ],\n",
    "    \"score\":    [90,    43,    29,          99,      85,        73,      58,   94,    37,     51]\n",
    "})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a CohortDefinition object\n",
    "\n",
    "The `CohortDefinition` class aims to solve the following task: given a set of conditions, provide methods for automatically filtering a dataset using the conditions provided to the constructor method and return a subset of the original dataset containing only the desired cohort. This is a very lightweight class, and it's main goal is to facilitate solving more complex tasks regarding cohort management (check out the documentation for the `CohortManager` class for more details).\n",
    "\n",
    "Given our simple fantasy dataset, let's try creating a cohort where we have only:\n",
    "\n",
    "* Elves with a height above or equal 1.8 meters\n",
    "* Orcs with a height above or equal 1.8 meters\n",
    "\n",
    "The `CohortDefinition` has it's own language for understanding a set of conditions. The conditions must be formatted into a list of lists, where:\n",
    "\n",
    "* The most inner lists must always contain 3 variables:\n",
    "    1. ``Column name:`` the column name used for setting a condition. If the dataset has no columns, use the column index instead, but remember to provide the column index as a string;\n",
    "    2. ``Inner Operator:`` the operator used to associate the ``column_name`` (given by the first variable) with the ``value`` provided (given by the third and last variable in the list). The allowed inner ops are:\n",
    "        * **Equal ('=='):** if the ``value`` provided is a single value, then this condition is set as **\"all instances where ``column_name`` is equal to ``value``\"**. However, if ``value`` is a list, then the condition is set as **\"all instances where ``column_name`` is one of the values in the ``value`` list\"**;\n",
    "        * **Different ('!='):** similar to the *equal* operator: accepts ``value`` as a single value or a list of values;\n",
    "        * **Greater ('>'):** ``value`` must be a single value;\n",
    "        * **Greater or Equal ('>='):** ``value`` must be a single value;\n",
    "        * **Lesser ('<'):** ``value`` must be a single value;\n",
    "        * **Lesser or Equal ('<='):** ``value`` must be a single value;\n",
    "        * **Range ('range'):** ``value`` must be a list with only 2 values: the minimum and maximum values defining the boundaries of the range, respectively. This operator also includes the minimum and maximum values of the range (``value[0]`` <= ``column_name`` <= ``value[1``]).\n",
    "    3. ``Value:`` the value used in the condition. It can be a numerical or categorical value. If the ``value`` provided is another column name, then a comparison between two columns is performed (we'll check an example ahead).\n",
    "* Between two inner lists, there must be a ``Outer Operator``, which can be: `and` or `or`.\n",
    "* With this basic set of rules, we can create complex conditions for a cohort by concatenating multiple simple conditions (inner lists) using the `and` and `or` operators.\n",
    "\n",
    "Now, let's create a `CohortDefinition` object using the conditions previously mentioned:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>orc</td>\n",
       "      <td>1.95</td>\n",
       "      <td>59</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>orc</td>\n",
       "      <td>2.10</td>\n",
       "      <td>79</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>elf</td>\n",
       "      <td>1.85</td>\n",
       "      <td>45</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  race  height(m)  past_score  score\n",
       "1  orc       1.95          59     43\n",
       "5  orc       2.10          79     73\n",
       "6  elf       1.85          45     58"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conditions = [\n",
    "                [ ['race', '==', 'elf'], 'or', ['race', '==', 'orc'] ],\n",
    "                'and',\n",
    "                ['height(m)', '>=', 1.8]\n",
    "            ]\n",
    "\n",
    "cht_def = CohortDefinition(conditions)\n",
    "subset = cht_def.get_cohort_subset(df)\n",
    "subset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ``get_cohort_subset()`` method simply applies the cohort's filter over any dataset provided. If the dataset provided to this method doesn't have the required columns, and error will be raised. Note that the ``CohortDefinition`` class is not associated with any specific dataset. It aims to simply convert a set of conditions into a query, which can then be used over any dataset that has the required columns (the columns used in the filters).\n",
    "\n",
    "In the example above, notice that we used two `equal` conditions to specify that the `race` should be either `elf` or `orc`. Let's recreate this condition, but this time we'll use a list assigned to the `equal` operator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>orc</td>\n",
       "      <td>1.95</td>\n",
       "      <td>59</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>orc</td>\n",
       "      <td>2.10</td>\n",
       "      <td>79</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>elf</td>\n",
       "      <td>1.85</td>\n",
       "      <td>45</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  race  height(m)  past_score  score\n",
       "1  orc       1.95          59     43\n",
       "5  orc       2.10          79     73\n",
       "6  elf       1.85          45     58"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conditions = [\n",
    "                [ ['race', '==', ['elf', 'orc'] ] ],\n",
    "                'and',\n",
    "                ['height(m)', '>=', 1.8]\n",
    "            ]\n",
    "\n",
    "cht_def = CohortDefinition(conditions)\n",
    "subset = cht_def.get_cohort_subset(df)\n",
    "subset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following cells, we'll show a few other examples where we use other operators:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>orc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  race  height(m)  past_score  score\n",
       "9  orc        NaN          87     51"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conditions = [ ['height(m)', '==', np.nan] ]\n",
    "cht_def = CohortDefinition(conditions)\n",
    "subset = cht_def.get_cohort_subset(df)\n",
    "subset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>orc</td>\n",
       "      <td>1.95</td>\n",
       "      <td>59</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>orc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  race  height(m)  past_score  score\n",
       "1  orc       1.95          59     43\n",
       "9  orc        NaN          87     51"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conditions = [ ['height(m)', '==', [1.95, np.nan]] ]\n",
    "cht_def = CohortDefinition(conditions)\n",
    "subset = cht_def.get_cohort_subset(df)\n",
    "subset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>elf</td>\n",
       "      <td>1.60</td>\n",
       "      <td>85</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>human</td>\n",
       "      <td>1.65</td>\n",
       "      <td>47</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    race  height(m)  past_score  score\n",
       "0    elf       1.60          85     90\n",
       "8  human       1.65          47     37"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conditions = [ [ ['height(m)', 'range', [1.1, 1.7]], 'and', ['race', '!=', 'halfling'] ] ]\n",
    "\n",
    "cht_def = CohortDefinition(conditions)\n",
    "subset = cht_def.get_cohort_subset(df)\n",
    "subset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>orc</td>\n",
       "      <td>1.95</td>\n",
       "      <td>59</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>elf</td>\n",
       "      <td>1.85</td>\n",
       "      <td>45</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>human</td>\n",
       "      <td>1.65</td>\n",
       "      <td>47</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    race  height(m)  past_score  score\n",
       "1    orc       1.95          59     43\n",
       "6    elf       1.85          45     58\n",
       "8  human       1.65          47     37"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conditions = [ ['height(m)', '>', 1.5],\n",
    "              'and',\n",
    "              ['height(m)', '<', 1.99],\n",
    "              'and',\n",
    "              ['score', '<=', 70]\n",
    "            ]\n",
    "\n",
    "cht_def = CohortDefinition(conditions)\n",
    "subset = cht_def.get_cohort_subset(df)\n",
    "subset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also create a condition that compares the values between two different columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>orc</td>\n",
       "      <td>1.95</td>\n",
       "      <td>59</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>halfling</td>\n",
       "      <td>1.53</td>\n",
       "      <td>91</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>orc</td>\n",
       "      <td>2.10</td>\n",
       "      <td>79</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>human</td>\n",
       "      <td>1.65</td>\n",
       "      <td>47</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>orc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       race  height(m)  past_score  score\n",
       "1       orc       1.95          59     43\n",
       "4  halfling       1.53          91     85\n",
       "5       orc       2.10          79     73\n",
       "8     human       1.65          47     37\n",
       "9       orc        NaN          87     51"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conditions = [ ['score', '<=', 'past_score'] ]\n",
    "\n",
    "cht_def = CohortDefinition(conditions)\n",
    "subset = cht_def.get_cohort_subset(df)\n",
    "subset"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving and Loading a Cohort Definition JSON\n",
    "\n",
    "Sometimes it is useful to save the definitions used for a cohort. This way, we can later create a new ``CohortDefinition`` object using the same conditions as the ones used for the saved cohort.\n",
    "\n",
    "To save a cohort definition JSON file, simply use the ``save()`` method. This method will save the cohort definition in a JSON file following the same JSON structure used by the [raiwidgets library](https://github.com/microsoft/responsible-ai-toolbox/blob/main/notebooks/responsibleaidashboard/responsibleaidashboard-census-classification-model-debugging.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "cht_def.save(\"json_files/CohortDefinition_tutorial/single_cohort.json\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To load a JSON file, simply pass the JSON file's path to the constructor of the class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>height(m)</th>\n",
       "      <th>past_score</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>orc</td>\n",
       "      <td>1.95</td>\n",
       "      <td>59</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>halfling</td>\n",
       "      <td>1.53</td>\n",
       "      <td>91</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>orc</td>\n",
       "      <td>2.10</td>\n",
       "      <td>79</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>human</td>\n",
       "      <td>1.65</td>\n",
       "      <td>47</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>orc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       race  height(m)  past_score  score\n",
       "1       orc       1.95          59     43\n",
       "4  halfling       1.53          91     85\n",
       "5       orc       2.10          79     73\n",
       "8     human       1.65          47     37\n",
       "9       orc        NaN          87     51"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_cht = CohortDefinition(\"json_files/CohortDefinition_tutorial/single_cohort.json\")\n",
    "subset = new_cht.get_cohort_subset(df)\n",
    "subset"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following cell, we'll call the ``.save()`` method for different ``CohortDefinition`` objects, and then we'll load these JSON files. The interested reader is encouraged to check the saved JSON files just to better understand the structure used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "conditions_list = []\n",
    "conditions = [\n",
    "                [ ['race', '==', 'elf'], 'or', ['race', '==', 'orc'] ],\n",
    "                'and',\n",
    "                ['height(m)', '>=', 1.8]\n",
    "            ]\n",
    "conditions_list.append(conditions)\n",
    "\n",
    "conditions = [\n",
    "                [ ['race', '==', ['elf', 'orc'] ] ],\n",
    "                'and',\n",
    "                ['height(m)', '>=', 1.8]\n",
    "            ]\n",
    "conditions_list.append(conditions)\n",
    "\n",
    "conditions = [ [ ['height(m)', 'range', [1.1, 1.7]], 'and', ['race', '!=', 'halfling'] ] ]\n",
    "conditions_list.append(conditions)\n",
    "\n",
    "conditions = [ ['height(m)', '>', 1.5],\n",
    "              'and',\n",
    "              ['height(m)', '<', 1.99],\n",
    "              'and',\n",
    "              ['score', '<=', 70]\n",
    "            ]\n",
    "conditions_list.append(conditions)\n",
    "\n",
    "conditions = [ ['height(m)', '==', np.nan] ]\n",
    "conditions_list.append(conditions)\n",
    "\n",
    "conditions = [ ['score', '<=', 'past_score'] ]\n",
    "conditions_list.append(conditions)\n",
    "\n",
    "for i, conditions in enumerate(conditions_list):\n",
    "    cht_def = CohortDefinition(conditions)\n",
    "    cht_def.save(f\"json_files/CohortDefinition_tutorial/cht_{i}.json\")\n",
    "    new_cht = CohortDefinition(f\"json_files/CohortDefinition_tutorial/cht_{i}.json\")\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "raipub",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15 (main, Nov 24 2022, 14:31:59) \n[GCC 11.2.0]"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "98cf402749abf383affb54f23cdde06b52ae2a6e4394659b91d1cafca4224ff4"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
