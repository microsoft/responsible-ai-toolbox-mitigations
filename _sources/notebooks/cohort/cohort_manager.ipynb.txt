{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Managing cohorts\n",
    "\n",
    "This library allows users to apply certain mitigations over a specific cohort, instead of ​applying it to the entire dataset. This is useful when, for example, two cohorts have a very different label distribution and we want to rebalance each cohort individually, instead of rebalancing the entire dataset. In some scenarios, applying a mitigation over each cohort separately is more advantageous than applying it over the whole dataset.\n",
    "\n",
    "In this notebook, we'll show how to apply different pipelines for each cohort separately. To accomplish this, we'll use the `CohortManager` class. This class allows us to create multiple pipelines (using transformers from `scikit-learn` or from the current library) and apply them to each cohort separately. All this is done following the ``fit()`` and ``transform()`` paradigms, ​similar  to the other mitigations from the `dataprocessing` module.\n",
    "\n",
    "First of all, let's import the ``CohortManager`` class, which is found in the `cohort` module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xgboost as xgb\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "from raimitigations.utils import create_dummy_dataset\n",
    "import raimitigations.dataprocessing as dp\n",
    "from raimitigations.cohort import CohortDefinition, CohortManager\n",
    "\n",
    "SEED = 42\n",
    "\n",
    "np.random.seed(SEED)\n",
    "random.seed(SEED)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Toy dataset\n",
    "\n",
    "Next, we'll create a toy dataset so we can showcase how the ``CohortManager`` operates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_df(with_null: bool = True):\n",
    "    np.random.seed(SEED)\n",
    "    random.seed(SEED)\n",
    "    def add_nan(vec, pct):\n",
    "        vec = list(vec)\n",
    "        nan_index = random.sample(range(len(vec)), int(pct * len(vec)))\n",
    "        for index in nan_index:\n",
    "            vec[index] = np.nan\n",
    "        return vec\n",
    "\n",
    "    df = create_dummy_dataset(\n",
    "        samples=1000,\n",
    "        n_features=2,\n",
    "        n_num_num=0,\n",
    "        n_cat_num=2,\n",
    "        n_cat_cat=0,\n",
    "        num_num_noise=[0.01, 0.05],\n",
    "        pct_change=[0.05, 0.1],\n",
    "    )\n",
    "    if with_null:\n",
    "        col_with_nan = [\"num_0\", \"num_1\"]\n",
    "        for col in col_with_nan:\n",
    "            if col != \"label\":\n",
    "                df[col] = add_nan(df[col], 0.1)\n",
    "\n",
    "    X = df.drop(columns=[\"label\"])\n",
    "    y = df[[\"label\"]]\n",
    "\n",
    "    return X, y\n",
    "\n",
    "# -----------------------------------\n",
    "def get_model():\n",
    "    model = xgb.XGBClassifier(\n",
    "            objective=\"binary:logistic\",\n",
    "            learning_rate=0.1,\n",
    "            n_estimators=30,\n",
    "            max_depth=10,\n",
    "            colsample_bytree=0.7,\n",
    "            alpha=0.0,\n",
    "            reg_lambda=10.0,\n",
    "            nthreads=4,\n",
    "            verbosity=0,\n",
    "            use_label_encoder=False,\n",
    "        )\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.601034</td>\n",
       "      <td>2.535353</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.755945</td>\n",
       "      <td>-2.172352</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.354479</td>\n",
       "      <td>NaN</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.103090</td>\n",
       "      <td>-0.766515</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.753178</td>\n",
       "      <td>1.787514</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.713939</td>\n",
       "      <td>1.451639</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>1.420812</td>\n",
       "      <td>2.535627</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.844315</td>\n",
       "      <td>1.211294</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.974124</td>\n",
       "      <td>2.619258</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.641478</td>\n",
       "      <td>-0.243075</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1 CN_0_num_0 CN_1_num_1\n",
       "0    1.601034  2.535353     val0_0     val1_3\n",
       "1    1.755945 -2.172352     val0_1     val1_0\n",
       "2    2.354479       NaN     val0_0     val1_0\n",
       "3    4.103090 -0.766515     val0_1     val1_2\n",
       "4    1.753178  1.787514     val0_0     val1_1\n",
       "..        ...       ...        ...        ...\n",
       "995  2.713939  1.451639     val0_1     val1_2\n",
       "996  1.420812  2.535627     val0_0     val1_3\n",
       "997  3.844315  1.211294     val0_1     val1_2\n",
       "998  0.974124  2.619258     val0_0     val1_3\n",
       "999  4.641478 -0.243075     val0_1     val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = create_df()\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic scenario\n",
    "\n",
    "Next, we'll explore a basic scenario where the ``CohortManager`` can prove its usefulness. In this scenario, we want to apply an imputation, followed by a min max scaler over each cohort separately. Once again: this is useful when each cohort has different behaviors or distributions for a particular column, so applying an imputation based on the mean value of the column over each cohort separately will make more sense than using the mean of the column of the entire dataset, for example.\n",
    "\n",
    "The `CohortManager` requires two main parameters: a transformation pipeline and a list of cohort definitions. The latter is already explored and explained in the notebook showcasing the `CohortDefinition` class (which is used internally by the `CohortManager`). The former is simply a list of objects that implement the `fit()`, `transform()`, `predict()` paradigm, or the `fit_resample()` method (for rebalancing classes, such as the `Rebalance` class from the `dataprocessing` module, or the rebalance classes from the `imblearn` library).\n",
    "\n",
    "There are two constraints when defining the cohorts:\n",
    "\n",
    "1. The definitions must not allow any instance to belong to more than 1 cohort. If that happens, an error is raised;\n",
    "2. The definitions must include all instances (without repetition due to the previous constraint). Since in some cases it is difficult to define a set of conditions for the last cohort such that it includes all instances not belonging to any of the previous cohorts, we created an easier way to accomplish this: the condition list for the last cohort is allowed to be `None`. When this happens, this cohort is understood as being the one with all the remaining instances that don't belong to any of the other cohorts.\n",
    "\n",
    "Once we instantiate the `CohortManager` object, we can treat it similarly to other classes from the `dataprocessing` module: call the `fit()` and `transform()` methods. Internally, what will happen is the following: \n",
    "\n",
    "1. the cohort pipeline will be duplicated, such that we'll have one pipeline for each cohort, with different objects instantiation;\n",
    "2. during the `fit()` method, we'll cycle through all cohorts, and for each cohort:\n",
    "    * we'll first filter the dataset provided (in this case, `X` and `y`) so that it includes only instances that belong to the current cohort;\n",
    "    * with the subset of the current cohort, we'll call the `fit()` method for all the transformations in the cohort's pipeline (in the order in which they appear) using the subset dataset as input;\n",
    "3. during the ``transform()`` method, we'll use a similar approach, but instead of calling the `fit()` method for the transformers in each cohort's pipeline, this time we'll call the `transform()` method;\n",
    "    * if all cohorts are compatible with each other, that is, have the same columns after applying all transforms, then all subsets are concatenated together. The full dataset is then returned. If there are any inconsistencies between the cohorts, then we'll just add each subset into a list of subsets, and the final variable returned in this case is a list of subsets (we'll explore some examples ahead)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.616278</td>\n",
       "      <td>0.790075</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.340936</td>\n",
       "      <td>0.040024</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.910331</td>\n",
       "      <td>0.660560</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.816398</td>\n",
       "      <td>0.284064</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.675657</td>\n",
       "      <td>0.688320</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.534997</td>\n",
       "      <td>0.669115</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.545942</td>\n",
       "      <td>0.790112</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.763978</td>\n",
       "      <td>0.627393</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.371610</td>\n",
       "      <td>0.801491</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.925459</td>\n",
       "      <td>0.374928</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1 CN_0_num_0 CN_1_num_1\n",
       "0    0.616278  0.790075     val0_0     val1_3\n",
       "1    0.340936  0.040024     val0_1     val1_0\n",
       "2    0.910331  0.660560     val0_0     val1_0\n",
       "3    0.816398  0.284064     val0_1     val1_2\n",
       "4    0.675657  0.688320     val0_0     val1_1\n",
       "..        ...       ...        ...        ...\n",
       "995  0.534997  0.669115     val0_1     val1_2\n",
       "996  0.545942  0.790112     val0_0     val1_3\n",
       "997  0.763978  0.627393     val0_1     val1_2\n",
       "998  0.371610  0.801491     val0_0     val1_3\n",
       "999  0.925459  0.374928     val0_1     val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "]\n",
    "\n",
    "c1 = [ ['CN_0_num_0', '==', 'val0_1'], 'and', ['num_0', '>', 0.0] ]\n",
    "c2 = [ ['CN_0_num_0', '==', 'val0_0'], 'and', ['num_0', '>', 0.0] ]\n",
    "c3 = None\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "new_X = cohort_set.transform(X)\n",
    "new_X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pipelines that result in incompatible cohorts\n",
    "\n",
    "As previously mentioned, in some cases, the pipeline associated with one or more cohorts may result in a cohort incompatible with at least one of the other cohorts. For example, consider the case where we add a one-hot encoding transformation in the pipeline. This will probably result in each cohort having different columns, which are the columns created by the one-hot encoder (for example, in case one of the cohorts doesn't have all existing values in a categorical column that is being encoded). \n",
    "\n",
    "This is also valid for any other encoder method since categorical encoders require a list of all valid categorical values in the column before creating the encoding. However, for the ordinal encoder, for example, it is not easy to automatically identify an incompatibility between the cohorts, since the ordinal encoder doesn't change the number of columns. To remedy this (at least for the mitigations from the `dataprocessing` module), we implemented a way for the `CohortManager` to query if a given class results in incompatible cohorts or not. Therefore, if we use the `EncoderOrdinal` from the ``dataprocessing`` module in the pipeline, we'll be able to automatically identify that each cohort will be incompatible between each other, and thus, the ``transform()`` method will return a dictionary of subsets instead of a single dataset. This dictionary will have a key assigned to each of the cohorts' names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: the transformations used over the cohorts resulted in each cohort having different columns. The transform() method will return a list of transformed subsets (one for each cohort).\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dict_keys(['cohort_0', 'cohort_1', 'cohort_2'])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "    dp.EncoderOrdinal(verbose=False)\n",
    "]\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "subset_dict = cohort_set.transform(X)\n",
    "subset_dict.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.340936</td>\n",
       "      <td>0.040024</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.816398</td>\n",
       "      <td>0.284064</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.402537</td>\n",
       "      <td>0.692783</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.299020</td>\n",
       "      <td>0.843083</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.626370</td>\n",
       "      <td>0.180212</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0.371002</td>\n",
       "      <td>0.696937</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>0.358171</td>\n",
       "      <td>0.089578</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.534997</td>\n",
       "      <td>0.669115</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.763978</td>\n",
       "      <td>0.627393</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.925459</td>\n",
       "      <td>0.374928</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>542 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1  CN_0_num_0  CN_1_num_1\n",
       "1    0.340936  0.040024           0           0\n",
       "3    0.816398  0.284064           0           2\n",
       "5    0.402537  0.692783           0           3\n",
       "8    0.299020  0.843083           0           1\n",
       "10   0.626370  0.180212           0           2\n",
       "..        ...       ...         ...         ...\n",
       "990  0.371002  0.696937           0           2\n",
       "991  0.358171  0.089578           0           0\n",
       "995  0.534997  0.669115           0           2\n",
       "997  0.763978  0.627393           0           2\n",
       "999  0.925459  0.374928           0           1\n",
       "\n",
       "[542 rows x 4 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subset_dict['cohort_0']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding estimators to the pipeline\n",
    "\n",
    "The pipelines are not limited to having only transformers, as we can also add estimators to them. Some considerations when adding an estimator into the pipeline:\n",
    "\n",
    "1. The estimator must be the last object in the pipeline (this implies that we can only have 1 estimator in each pipeline);\n",
    "2. The estimator must implement at least the `predict()` method. It can also implement the `predict_proba()` method, but the latter is not mandatory;\n",
    "3. If the pipeline is comprised of a set of transformers (that implement the `transform()` method) and the estimator (that is, the pipeline doesn't contain *only* the estimator), then the cohort manager object will be allowed to call the `transform()` and `predict()` methods (and the `predict_proba()` as well, but only if the estimator implements this method)\n",
    "    * in this case, the `transform()` method will call only the `transform()` methods of the transformers up until the estimator, since this latter doesn't have a `transform()` method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<raimitigations.cohort.cohort_manager.CohortManager at 0x7f78348558b0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "    dp.EncoderOrdinal(verbose=False),\n",
    "    get_model()\n",
    "]\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When calling the ``transform()`` method, it will return a list of subsets, since the ``EncoderOrdinal`` results in incompatible cohorts (as previously mentioned). The ``transform()`` method will run the ``transform()`` of all transformers up until we get to the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: the transformations used over the cohorts resulted in each cohort having different columns. The transform() method will return a list of transformed subsets (one for each cohort).\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.340936</td>\n",
       "      <td>0.040024</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.816398</td>\n",
       "      <td>0.284064</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.402537</td>\n",
       "      <td>0.692783</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.299020</td>\n",
       "      <td>0.843083</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.626370</td>\n",
       "      <td>0.180212</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0.371002</td>\n",
       "      <td>0.696937</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>0.358171</td>\n",
       "      <td>0.089578</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.534997</td>\n",
       "      <td>0.669115</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.763978</td>\n",
       "      <td>0.627393</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.925459</td>\n",
       "      <td>0.374928</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>542 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1  CN_0_num_0  CN_1_num_1\n",
       "1    0.340936  0.040024           0           0\n",
       "3    0.816398  0.284064           0           2\n",
       "5    0.402537  0.692783           0           3\n",
       "8    0.299020  0.843083           0           1\n",
       "10   0.626370  0.180212           0           2\n",
       "..        ...       ...         ...         ...\n",
       "990  0.371002  0.696937           0           2\n",
       "991  0.358171  0.089578           0           0\n",
       "995  0.534997  0.669115           0           2\n",
       "997  0.763978  0.627393           0           2\n",
       "999  0.925459  0.374928           0           1\n",
       "\n",
       "[542 rows x 4 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subset_dict = cohort_set.transform(X)\n",
    "subset_dict['cohort_0']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can then call the ``predict()`` method. Since the predictions will have the same format regardless if the cohorts are compatible or not, then the ``predict()`` and ``predict_proba()`` will always return a single prediction array by default. However, this behavior can be changed through the ``split_pred`` parameter for both of these methods: if ``split_pred = False``, then a single prediction array is returned (this is the default behavior), but if ``split_pred = True``, then a dictionary of predictions is returned instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000,)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_arr = cohort_set.predict(X)\n",
    "pred_arr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cohort_0: (542,)\n",
      "cohort_1: (341,)\n",
      "cohort_2: (117,)\n"
     ]
    }
   ],
   "source": [
    "pred_dict = cohort_set.predict(X, split_pred=True)\n",
    "for cohort_name in pred_dict.keys():\n",
    "    print(f\"{cohort_name}: {pred_dict[cohort_name].shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, we can also call the ``predict_proba()`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 2)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_arr = cohort_set.predict_proba(X)\n",
    "pred_arr.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that if none of the transformers in the pipeline result in incompatible cohorts, then the `predict()` method will return a single array of predictions, just like a regular estimator. To demonstrate this, let's remove the categorical columns of the dataset (so that the estimator works without an encoder). Let's also redefine our cohorts so that we don't reference any of the categorical columns removed.\n",
    "\n",
    "When calling the ``transform()`` method in this scenario, it will return a single dataset, as previously shown."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.028385</td>\n",
       "      <td>0.891836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.072545</td>\n",
       "      <td>0.048710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.243165</td>\n",
       "      <td>0.623450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.741629</td>\n",
       "      <td>0.300489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.071756</td>\n",
       "      <td>0.757902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.345633</td>\n",
       "      <td>0.697749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.971967</td>\n",
       "      <td>0.781923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.667862</td>\n",
       "      <td>0.654704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.806418</td>\n",
       "      <td>0.792162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.895103</td>\n",
       "      <td>0.394234</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1\n",
       "0    0.028385  0.891836\n",
       "1    0.072545  0.048710\n",
       "2    0.243165  0.623450\n",
       "3    0.741629  0.300489\n",
       "4    0.071756  0.757902\n",
       "..        ...       ...\n",
       "995  0.345633  0.697749\n",
       "996  0.971967  0.781923\n",
       "997  0.667862  0.654704\n",
       "998  0.806418  0.792162\n",
       "999  0.895103  0.394234\n",
       "\n",
       "[1000 rows x 2 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_num = X.drop(columns=['CN_0_num_0', 'CN_1_num_1'])\n",
    "\n",
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "    get_model()\n",
    "]\n",
    "\n",
    "c1 = [ ['num_0', '>', 1.5] ]\n",
    "c2 = None\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2]\n",
    ")\n",
    "cohort_set.fit(X=X_num, y=y)\n",
    "new_X = cohort_set.transform(X_num)\n",
    "new_X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The same applies to the ``predict()`` method, where it will return a single array of predictions this time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000,)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = cohort_set.predict(X_num)\n",
    "pred.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting a list of subsets\n",
    "\n",
    "Sometimes we just want to break a new dataset into subsets, where we have one subset for each of the cohorts being used. We can do this using the ``get_subsets()`` method from the ``CohortManager`` class. This method accepts three parameters:\n",
    "\n",
    "1. A dataset that has at least the columns used by the cohorts' filters (this means that the dataset may also have other columns not used by the filters);\n",
    "2. A dataset containing only the label column (`y` dataset). This parameter is optional, and it is useful when we want to filter a feature dataset (`X`) and a label dataset (`y`), and get a list of subsets from ``X`` and ``y``;\n",
    "3. A boolean value indicating if we want to apply the transformations pipeline used for each cohort or not. If set to True, this method will behave similarly to the `transform()` method, with the main difference being that this method will always return a list of subsets, even if the cohorts are compatible with each other.\n",
    "\n",
    "The returned variable is a dictionary where the primary keys are the name of the cohorts, and the secondary keys are:\n",
    "\n",
    "* `X`: the subset of the features dataset;\n",
    "* `y`: the subset of the label dataset. This key will only be returned if the `y` dataset is passed in the method's call.\n",
    "\n",
    "The following cell shows an example of how to call this method without applying the transformations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.601034</td>\n",
       "      <td>2.535353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.755945</td>\n",
       "      <td>-2.172352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.354479</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.103090</td>\n",
       "      <td>-0.766515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.753178</td>\n",
       "      <td>1.787514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>1.904364</td>\n",
       "      <td>1.611914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>1.841023</td>\n",
       "      <td>-1.886888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.713939</td>\n",
       "      <td>1.451639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.844315</td>\n",
       "      <td>1.211294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.641478</td>\n",
       "      <td>-0.243075</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>637 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1\n",
       "0    1.601034  2.535353\n",
       "1    1.755945 -2.172352\n",
       "2    2.354479       NaN\n",
       "3    4.103090 -0.766515\n",
       "4    1.753178  1.787514\n",
       "..        ...       ...\n",
       "990  1.904364  1.611914\n",
       "991  1.841023 -1.886888\n",
       "995  2.713939  1.451639\n",
       "997  3.844315  1.211294\n",
       "999  4.641478 -0.243075\n",
       "\n",
       "[637 rows x 2 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets = cohort_set.get_subsets(X_num, apply_transform=False)\n",
    "subsets['cohort_0']['X']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['cohort_0', 'cohort_1'])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now compare the resulting subsets when setting the ``apply_transform`` to True:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.028385</td>\n",
       "      <td>0.891836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.072545</td>\n",
       "      <td>0.048710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.243165</td>\n",
       "      <td>0.623450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.741629</td>\n",
       "      <td>0.300489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.071756</td>\n",
       "      <td>0.757902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0.114854</td>\n",
       "      <td>0.726453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>0.096797</td>\n",
       "      <td>0.099836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.345633</td>\n",
       "      <td>0.697749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.667862</td>\n",
       "      <td>0.654704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.895103</td>\n",
       "      <td>0.394234</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>637 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1\n",
       "0    0.028385  0.891836\n",
       "1    0.072545  0.048710\n",
       "2    0.243165  0.623450\n",
       "3    0.741629  0.300489\n",
       "4    0.071756  0.757902\n",
       "..        ...       ...\n",
       "990  0.114854  0.726453\n",
       "991  0.096797  0.099836\n",
       "995  0.345633  0.697749\n",
       "997  0.667862  0.654704\n",
       "999  0.895103  0.394234\n",
       "\n",
       "[637 rows x 2 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets = cohort_set.get_subsets(X_num, apply_transform=True)\n",
    "subsets['cohort_0']['X']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['X'])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets['cohort_0'].keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the previous cell, we can see that we only have the `X` key for each cohort, since we didn't pass the `y` dataset as a parameter to the method. Let's now look at an example where we want the subsets of both the features and labels (X and y):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['X', 'y'])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets = cohort_set.get_subsets(X_num, y, apply_transform=True)\n",
    "subsets['cohort_0'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "cohort_0\n",
      "(637, 2)\n",
      "(637, 1)\n",
      "\n",
      "cohort_1\n",
      "(363, 2)\n",
      "(363, 1)\n"
     ]
    }
   ],
   "source": [
    "for key in subsets.keys():\n",
    "    print(f\"\\n{key}\")\n",
    "    print(subsets[key][\"X\"].shape)\n",
    "    print(subsets[key][\"y\"].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naming the cohorts\n",
    "\n",
    "So far, we created a list of conditions for each cohort and passed that to the ``CohortManager`` without specifying the cohort's name. In that case, the cohorts will be named automatically. This name is later used in ​the subsets dictionary returned by the ``get_subsets()`` method, as we've shown in the previous subsection. We can provide a specific name to each cohort by passing a dictionary of condition lists to the ``CohortManager`` instead of passing a list of conditions. The following cell demonstrates this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['Large num_0', 'Remaining'])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def={\"Large num_0\":c1, \"Remaining\":c2}\n",
    ")\n",
    "cohort_set.fit(X_num, y)\n",
    "subsets = cohort_set.get_subsets(X_num, y, apply_transform=True)\n",
    "subsets.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Handling datasets without column names\n",
    "\n",
    "When handling a dataset without column names, we can use the column indices as the column identifier in the conditions list. However, the indices must be passed as a string, not a number. In the following cell, we demonstrate an example where we create a set of conditions using the column indices. Note that this approach will only work if the dataset doesn't have any column names. If the dataset has valid column names, then these names should be used instead of the indices.\n",
    "\n",
    "Note that in the following example, we are not passing a list of transformations to the ``transform_pipe`` parameter. Instead, we are passing a single transformer. This is also allowed, and what will happen in the background is that an empty list will be created for each cohort, and this transformer will be copied and added to each of these lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.616278</td>\n",
       "      <td>0.790075</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.340936</td>\n",
       "      <td>0.040024</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.910331</td>\n",
       "      <td>NaN</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.816398</td>\n",
       "      <td>0.284064</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.675657</td>\n",
       "      <td>0.688320</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.534997</td>\n",
       "      <td>0.669115</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.545942</td>\n",
       "      <td>0.790112</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.763978</td>\n",
       "      <td>0.627393</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.371610</td>\n",
       "      <td>0.801491</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.925459</td>\n",
       "      <td>0.374928</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0         1       2       3\n",
       "0    0.616278  0.790075  val0_0  val1_3\n",
       "1    0.340936  0.040024  val0_1  val1_0\n",
       "2    0.910331       NaN  val0_0  val1_0\n",
       "3    0.816398  0.284064  val0_1  val1_2\n",
       "4    0.675657  0.688320  val0_0  val1_1\n",
       "..        ...       ...     ...     ...\n",
       "995  0.534997  0.669115  val0_1  val1_2\n",
       "996  0.545942  0.790112  val0_0  val1_3\n",
       "997  0.763978  0.627393  val0_1  val1_2\n",
       "998  0.371610  0.801491  val0_0  val1_3\n",
       "999  0.925459  0.374928  val0_1  val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_X = X.copy()\n",
    "new_y = y.copy()\n",
    "new_X.columns = [i for i in range(new_X.shape[1])]\n",
    "new_y.columns = [i for i in range(new_y.shape[1])]\n",
    "\n",
    "c1 = [ ['2', '==', 'val0_1'], 'and', ['0', '>', 0.0] ]\n",
    "c2 = [ ['2', '==', 'val0_0'], 'and', ['0', '>', 0.0] ]\n",
    "c3 = None\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=new_X, y=new_y)\n",
    "new_X = cohort_set.transform(new_X)\n",
    "new_X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using CohortManager with Sci-Kit Learn's Pipeline\n",
    "\n",
    "`scikit-learn`'s `Pipeline` class is a well-established approach for creating pipelines. Therefore, the ``CohortManager`` class was designed to work with ``Pipeline``, allowing users to create even more complex data processing pipelines.\n",
    "\n",
    "The following cell shows an example of how to create a ``Pipeline`` using an instance of the ``CohortManager`` class. The pipeline created in this example will do the following:\n",
    "\n",
    "1. Run the ``BasicImputer`` and ``DataMinMaxScaler`` (in that order) over each cohort separately. Notice that each cohort will have a separate object from these classes. Since these transformations result in compatible cohorts, the ``transform()`` method will return a single dataset;\n",
    "2. Run the ``EncoderOrdinal`` over the dataset returned by the ``CohortManager`` (that is, the encoding is done over the entire dataset, not over each cohort individually);\n",
    "3. Fit the model (an XGBoost in this case) over the dataset processed by the ``CohortManager`` and ``EncoderOrdinal``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "]\n",
    "\n",
    "c1 = [ ['CN_0_num_0', '==', 'val0_1'], 'and', ['num_0', '>', 0.0] ]\n",
    "c2 = [ ['CN_0_num_0', '==', 'val0_0'], 'and', ['num_0', '>', 0.0] ]\n",
    "c3 = None\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "\n",
    "skpipe = Pipeline([\n",
    "    (\"cohort_preprocess\", cohort_set),\n",
    "    (\"encoder\", dp.EncoderOrdinal(verbose=False)),\n",
    "    (\"model\", get_model())\n",
    "])\n",
    "skpipe.fit(X, y)\n",
    "pred = skpipe.predict_proba(X)\n",
    "pred = skpipe.predict(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fetching the queries used for each cohort\n",
    "\n",
    "The ``get_queries()`` method returns a dictionary with the queries used for each cohort."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_1\") and (`num_0` > 0.0)',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_0\") and (`num_0` > 0.0)',\n",
       " 'cohort_2': None}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating cohorts based on a set of columns\n",
    "\n",
    "In some cases, users might be interested in creating one cohort for each possible value in a given column (for example, if a dataset has a **gender** column, we might be interested in creating one cohort for each gender). To avoid the cumbersome task of creating one condition list for each value in a given column, we ``CohortManager`` use the ``cohort_col`` parameter instead of the ``cohort_def`` during the instantiation of the object. Here are more details about these two parameters:\n",
    "\n",
    "* ``cohort_def``: already explored in the previous subsections. Accepts a list of condition lists (one for each cohort), or a dictionary of condition lists;\n",
    "* ``cohort_col``: accepts a list of column names or indices, from which one cohort is created for each unique combination of values for these columns.\n",
    "\n",
    "In the following example, we show how to create a set of cohorts based on the ``CN_0_num_0`` column. We then use the ``get_queries()`` method to look at the cohorts created."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_0\")',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_1\")'}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_col=[\"CN_0_num_0\"]\n",
    ")\n",
    "cohort_set.fit(X, y)\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also use the column indices instead of their names:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_0\")',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_1\")'}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_col=[2]\n",
    ")\n",
    "cohort_set.fit(X, y)\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that in both examples we had to call the ``fit()`` method before calling the ``get_queries()`` method. This is necessary because, when using the ``cohort_col`` parameter instead of the ``cohort_def``, the cohorts can only be created when a valid dataset is provided. Since we didn't provide a dataset in the constructor method, then the cohorts are only built when the fit method is called. In the following cell we provide the dataset in the constructor method just to show this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_0\")',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_1\")'}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_col=[2],\n",
    "    X=X, y=y\n",
    ")\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Just to better demonstrate this, let's now use the ``cohort_def`` parameter, while not providing the datasets in the constructor method. In this case, we can also call the ``get_queries()`` method before calling the ``fit()`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_1\") and (`num_0` > 0.0)',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_0\") and (`num_0` > 0.0)',\n",
       " 'cohort_2': None}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As previously mentioned, the ``cohort_col`` parameter accepts a list of column names, not a single column. When more than one column is provided, we create one cohort for each combination of unique values in these columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_0\") and (`CN_1_num_1` == \"val1_0\")',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_0\") and (`CN_1_num_1` == \"val1_1\")',\n",
       " 'cohort_2': '(`CN_0_num_0` == \"val0_0\") and (`CN_1_num_1` == \"val1_2\")',\n",
       " 'cohort_3': '(`CN_0_num_0` == \"val0_0\") and (`CN_1_num_1` == \"val1_3\")',\n",
       " 'cohort_4': '(`CN_0_num_0` == \"val0_1\") and (`CN_1_num_1` == \"val1_0\")',\n",
       " 'cohort_5': '(`CN_0_num_0` == \"val0_1\") and (`CN_1_num_1` == \"val1_1\")',\n",
       " 'cohort_6': '(`CN_0_num_0` == \"val0_1\") and (`CN_1_num_1` == \"val1_2\")',\n",
       " 'cohort_7': '(`CN_0_num_0` == \"val0_1\") and (`CN_1_num_1` == \"val1_3\")'}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_col=[\"CN_0_num_0\", \"CN_1_num_1\"]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving and loading the conditions used for the cohorts\n",
    "\n",
    "The ``save_conditions()`` method saves the list of conditions used by all cohorts into a JSON file. This way, users are able to then reuse these condition lists in another ``CohortManager`` object. The ``save_conditions()`` has the same conditions as the ``get_queries()`` method: if using ``cohort_col``, then we must either pass the datasets in the constructor method, or call the ``fit()`` method prior to calling the ``save_conditions()`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "cohort_set.save_conditions(\"cohort.json\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The JSON file saved has the following structure:\n",
    "\n",
    "![cohort](./cohort.png)\n",
    "\n",
    "We can then create a new ``CohortManager`` object and pass the path to the JSON file containing the cohort definitions to the ``cohort_def`` parameter. After loading the cohort file, we can verify that the same conditions are being used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_1\") and (`num_0` > 0.0)',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_0\") and (`num_0` > 0.0)',\n",
       " 'cohort_2': None}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.BasicImputer(verbose=False),\n",
    "    cohort_def=\"cohort.json\"\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using different pipelines for each cohort\n",
    "\n",
    "So far, every time we created an instance of the ``CohortMManager`` class, the same pipeline was used over all cohorts (different instances of the same pipeline, given that the ``fit()`` must be called using only the subset associated to a given cohort). However, there might be some scenarios where we might be interested in using different transformations for each cohort. We won't cover here these scenarios. Instead, here we'll show how to create different pipelines for each cohort.\n",
    "\n",
    "There are four scenarios associated with the ``transform_pipe`` parameter:\n",
    "\n",
    "1. **An empty list or ``None`` is provided:** in this case, the ``CohortManager`` won't apply any transformations over the dataset. The ``transform()`` method will simply return the dataset provided;\n",
    "2. **A single transformer is provided:** in this case, this single transformer is placed in a list (a list with a single transformer), which is then replicated such that each cohort has its own list of transformations (pipeline);\n",
    "3. **A list of transformers is provided:** in this case, this pipeline is replicated for each cohort;\n",
    "4. **A list of pipelines is provided:** a list of pipelines is basically a list of lists of transformations. In this case, the list of pipelines should have one pipeline for each cohort created, that is, the length of the ``transform_pipe`` parameter should be the same as the number of cohorts created. The pipelines will be assigned to each cohort following the same order as the ``cohort_def`` parameter (depicted in the following example).\n",
    "\n",
    "In the following example, we'll create 3 cohorts and 3 pipelines: the first pipeline will contain only a ``DataMinMaxScaler`` transformer, the second pipeline contains only a ``DataPowerTransformer`` transformer, and the third pipeline is empty, that is, it doesn't apply any transformations over the data. These pipelines will be associated with cohorts ``c1``, ``c2``, and ``c3`` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.601034</td>\n",
       "      <td>2.535353</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.755945</td>\n",
       "      <td>-2.172352</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.354479</td>\n",
       "      <td>NaN</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.103090</td>\n",
       "      <td>-0.766515</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.753178</td>\n",
       "      <td>1.787514</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.713939</td>\n",
       "      <td>1.451639</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>1.420812</td>\n",
       "      <td>2.535627</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.844315</td>\n",
       "      <td>1.211294</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.974124</td>\n",
       "      <td>2.619258</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.641478</td>\n",
       "      <td>-0.243075</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1 CN_0_num_0 CN_1_num_1\n",
       "0    1.601034  2.535353     val0_0     val1_3\n",
       "1    1.755945 -2.172352     val0_1     val1_0\n",
       "2    2.354479       NaN     val0_0     val1_0\n",
       "3    4.103090 -0.766515     val0_1     val1_2\n",
       "4    1.753178  1.787514     val0_0     val1_1\n",
       "..        ...       ...        ...        ...\n",
       "995  2.713939  1.451639     val0_1     val1_2\n",
       "996  1.420812  2.535627     val0_0     val1_3\n",
       "997  3.844315  1.211294     val0_1     val1_2\n",
       "998  0.974124  2.619258     val0_0     val1_3\n",
       "999  4.641478 -0.243075     val0_1     val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.560649</td>\n",
       "      <td>0.730360</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.369841</td>\n",
       "      <td>0.231139</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.089526</td>\n",
       "      <td>NaN</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.103090</td>\n",
       "      <td>-0.766515</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.753178</td>\n",
       "      <td>1.787514</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.713939</td>\n",
       "      <td>1.451639</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.524491</td>\n",
       "      <td>0.730402</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.844315</td>\n",
       "      <td>1.211294</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.434872</td>\n",
       "      <td>0.743060</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.641478</td>\n",
       "      <td>-0.243075</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1 CN_0_num_0 CN_1_num_1\n",
       "0    0.560649  0.730360     val0_0     val1_3\n",
       "1    0.369841  0.231139     val0_1     val1_0\n",
       "2    1.089526       NaN     val0_0     val1_0\n",
       "3    4.103090 -0.766515     val0_1     val1_2\n",
       "4    1.753178  1.787514     val0_0     val1_1\n",
       "..        ...       ...        ...        ...\n",
       "995  2.713939  1.451639     val0_1     val1_2\n",
       "996  0.524491  0.730402     val0_0     val1_3\n",
       "997  3.844315  1.211294     val0_1     val1_2\n",
       "998  0.434872  0.743060     val0_0     val1_3\n",
       "999  4.641478 -0.243075     val0_1     val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = create_df()\n",
    "\n",
    "c1 = [ ['CN_1_num_1', '==', 'val1_3'] ]\n",
    "c2 = [ ['CN_1_num_1', '==', 'val1_0'] ]\n",
    "c3 = None\n",
    "\n",
    "c1_pipe = [dp.DataMinMaxScaler(verbose=False)]\n",
    "c2_pipe = [dp.DataPowerTransformer(verbose=False)]\n",
    "c3_pipe = []\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=[c1_pipe, c2_pipe, c3_pipe],\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "new_X = cohort_set.transform(X)\n",
    "new_X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use Rebalance over each cohort separately\n",
    "\n",
    "Rebalancing a dataset is not always a trivial task. In some cases, we might have a class imbalance in the whole dataset, but different cohorts of this dataset depict different imbalance distributions. In such a scenario, rebalancing the full dataset might result in an even greater imbalance for a set of cohorts, even though the full dataset is now balanced. Therefore, we might want to rebalance each cohort separately, in order to obtain a balanced dataset and balanced cohorts.\n",
    "\n",
    "In this subsection, we'll explore how the ``CohortManager`` can easily help us achieve this goal.\n",
    "\n",
    "First of all, let's start defining a function that plots a graph with the label distribution for the full dataset, as well as for each cohort."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "def plot_value_counts_cohort(y_full, subsets, normalize = True):\n",
    "    plt.figure().clear()\n",
    "    plt.close()\n",
    "    plt.cla()\n",
    "    plt.clf()\n",
    "    fig = plt.gcf()\n",
    "    fig.set_size_inches(18, 10)\n",
    "    sns.set_theme(style=\"whitegrid\")\n",
    "    if normalize:\n",
    "        plt.ylim(0, 1)\n",
    "    #plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0, fontsize=23)\n",
    "\n",
    "    value_count = y_full.value_counts(normalize=normalize)\n",
    "\n",
    "    subsets_col = ['full df', 'full df']\n",
    "    counts_col = [value_count[0], value_count[1]]\n",
    "    label_col = [0, 1]\n",
    "\n",
    "    for key in subsets.keys():\n",
    "        value_count = subsets[key][\"y\"].value_counts(normalize=normalize)\n",
    "        subsets_col += [key, key]\n",
    "        counts_col += [value_count[0], value_count[1]]\n",
    "        label_col += [0, 1]\n",
    "\n",
    "    count_df = pd.DataFrame({\"subsets\":subsets_col, \"label\":label_col, \"counts\":counts_col})\n",
    "    \n",
    "    y_label = \"Occurrences\"\n",
    "    if normalize:\n",
    "        y_label = \"Fraction\"\n",
    "\n",
    "    ax = sns.barplot(x=\"subsets\", y=\"counts\", hue=\"label\", data=count_df)\n",
    "    ax.set_xlabel(\"Subsets\", fontsize=30)\n",
    "    ax.set_ylabel(y_label, fontsize=30)\n",
    "    #ax.tick_params(labelsize=15)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we'll create a ``CohortManager`` just to obtain the cohorts of interest and plot their distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label\n",
      "1        795\n",
      "0        205\n",
      "dtype: int64\n",
      "label\n",
      "0        119\n",
      "1         11\n",
      "dtype: int64\n",
      "label\n",
      "0        74\n",
      "1        31\n",
      "dtype: int64\n",
      "label\n",
      "1        495\n",
      "0          6\n",
      "dtype: int64\n",
      "label\n",
      "1        258\n",
      "0          6\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y = create_df(with_null=False)\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    cohort_col=[\"CN_1_num_1\"]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "subsets = cohort_set.get_subsets(X, y, apply_transform=False)\n",
    "\n",
    "print(y.value_counts())\n",
    "for key in subsets.keys():\n",
    "    print(subsets[key][\"y\"].value_counts())\n",
    "\n",
    "plot_value_counts_cohort(y, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the full dataset has a great imbalance, where we have a considerably larger number of occurrences of the ``1`` class in relation to the ``0`` class. This imbalance is even greater for cohorts ``cohort_2`` and ``cohort_3``, while for cohorts ``cohort_0`` and ``cohort_1`` this imbalance is inverted: there are a lot more instances from the ``0`` class when compared to the ``1`` class.\n",
    "\n",
    "### Balancing the full dataset\n",
    "\n",
    "Let's now rebalance the full dataset. Here, We use the ``Rebalance`` class from the ``dataprocessing`` module. Afterward, we plot the label distributions once more to see if our problem is solved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label\n",
      "0        795\n",
      "1        795\n",
      "dtype: int64\n",
      "label\n",
      "0        463\n",
      "1         11\n",
      "dtype: int64\n",
      "label\n",
      "0        313\n",
      "1         31\n",
      "dtype: int64\n",
      "label\n",
      "1        495\n",
      "0          8\n",
      "dtype: int64\n",
      "label\n",
      "1        258\n",
      "0         11\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABdkAAANcCAYAAACjfKbCAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAACDBUlEQVR4nOzde7hVdZ0/8PcGDjcRTJJLGoowSCiIJqRTGGk6TtIU4dSUNCOJYepQOl5Knbxrk5imo6WRmaV5SbPUTKvf6KijBKZighmJispFQUHhHA5w9u8PH/Z0BjRYrMOB4+v1POfxu9f6fr/rs477WZvnvdf5rkq1Wq0GAAAAAADYaO1auwAAAAAAANhaCdkBAAAAAKAgITsAAAAAABQkZAcAAAAAgIKE7AAAAAAAUJCQHQAAAAAAChKyAwAAAABAQR1au4B3kkcffTTVajV1dXWtXQoAAAAAAG9h1apVqVQq2Wuvvf5qXyH7ZlStVlOtVlu7DAAAAAAA3sbG5LhC9s1o7R3sQ4cObeVKAAAAAAB4K0888cQG97UmOwAAAAAAFCRkBwAAAACAgoTsAAAAAABQkJAdAAAAAAAKErIDAAAAAEBBHVq7AAAAAAAAWteaNWuyatWq1i5js6mrq0v79u1LmUvIDgAAAADwDlWtVrNgwYK89tprrV3KZrfddtulT58+qVQqmzSPkB0AAAAA4B1qbcDeq1evdO3adZMD561BtVrNihUrsmjRoiRJ3759N2k+ITsAAAAAwDvQmjVragF7z549W7uczapLly5JkkWLFqVXr16btHSMB58CAAAAALwDrV2DvWvXrq1cSetYe96buha9kB0AAAAA4B3snbBEzPqUdd5CdgAAAAAAKEjIDgAAAAAABQnZAQAAAADYaLvttlsuu+yyFh+zPl/96ldzwAEHbPI8ZRCyAwAAAABAQUJ2AAAAAAAoSMgOAAAAAMAme+qpp3Lcccdl3333ze67755Ro0bl3HPPTUNDQ7N+b7zxRk488cTstdde2W+//XLuueemvr6+WZ/f/OY3+dSnPpWhQ4fmgx/8YM4999ysWLFic57OBhOyAwAAAACwSRYtWpTDDz889fX1+cY3vpHvfe97OfTQQ/OjH/0o1157bbO+P/rRj7J8+fJccsklmTRpUm6++eaceOKJtf233357jj322Oy66665/PLLc9xxx+UXv/hFjjnmmFSr1c19an9Vh9YuAAAAAACArdvTTz+d973vffn2t7+dbt26JUn+9m//Ng8++GCmTZuWL37xi7W+AwYMyOWXX5527drlwx/+cCqVSs4///w8/fTT+Zu/+ZtMmTIlo0aNypQpU2pjdtlllxxxxBG57777Mnr06M19em/LnewAAAAAAGySD33oQ/nxj3+cTp06Zc6cOfntb3+b73znO1myZEkaGxub9T3kkEPSrt3/RtMHH3xwkmT69Ol55plnsmDBghxwwAFZvXp17WfEiBHp1q1bHnzwwc16XhvCnewAAAAAAGySpqamfOtb38p1112XFStWpG/fvhk2bFg6deq0Tt8ddtih2euePXsmSZYtW5bXXnstSXLWWWflrLPOWmfsokWLyi9+EwnZAQAAAADYJFdddVWuueaanHXWWTn44IOz7bbbJkkOO+ywdfquDdLXevnll5O8GbZ37949SXLyySdn5MiR64zt0aNHyZVvOsvFAAAAAACwSR555JEMHDgw48aNqwXsCxcuzNNPP52mpqZmff/7v/+72es777wzlUolI0eOzK677pqePXvmhRdeyNChQ2s/vXv3zkUXXZRZs2ZttnPaUO5kBwAAAABgkwwbNixXXHFFrrrqqgwfPjzPPfdcrrzyyjQ2Nqa+vr5Z3yeeeCKnnXZaxowZkyeeeCKXXnppDjvssOyyyy5JkuOPPz5f//rX0759+3zkIx/JsmXLcsUVV2ThwoXZfffdW+Hs3p6QHQAAAACATTJp0qS8+uqrufbaa3P55Zenb9+++cQnPpFKpZIrr7wyy5Ytqy0Fc+yxx+YPf/hDjj766Gy77baZOHFijjvuuNpc//iP/5htttkmU6dOzY033piuXbtm7733zpQpU/Le9763tU7xLVWq1Wq1tYt4p3jiiSeSJEOHDm3lSgAAAACAd7qGhobMnTs3/fv3T+fOnVu7nM3u7c5/Y7LcNr0m++rVq/Ptb387H/nIR7LXXnvl8MMPz2OPPVbbP3v27IwfPz7Dhw/PAQcckGuvvbbZ+Kamplx66aUZNWpUhg8fnqOOOirz5s3bzGcBAAAAAMCWqk2H7N/5zndy880355xzzsltt92W/v37Z+LEiVm0aFFeffXVTJgwIf369cstt9ySY489NlOmTMktt9xSG3/FFVfk+uuvzznnnJMbbrghTU1NmThxYhobG1vxrAAAAAAA2FK06ZD9N7/5TcaMGZMPfehD2XnnnfPVr341r7/+eh577LHcdNNNqaury9lnn50BAwZk3LhxOeKII3LVVVclSRobG3P11Vdn8uTJGT16dAYPHpyLL744CxYsyD333NPKZwYAAAAAwJagTT/4tGfPnvmv//qvjB8/Pn379s2NN96Yjh07ZvDgwbn55pszcuTIdOjwv7+CfffdN1deeWVeeeWVvPTSS1m+fHn222+/2v7u3btnyJAhmT59esaMGVOopmq1mhUrVmzyuQEAAAAAbIqVK1emqakpa9asyZo1a1q7nM1uzZo1aWpqSn19fZqamprtq1arqVQqGzRPmw7ZTzvttHz5y1/OgQcemPbt26ddu3a57LLL0q9fvyxYsCCDBg1q1r9Xr15Jkvnz52fBggVJkr59+67TZ+2+IlatWpXZs2cXHg8AAAAAUJYOHTpk5cqVrV1Gq1i5cmVWr16dZ555Zr37O3bsuEHztOmQfc6cOdl2221z+eWXp3fv3rn55ptz4okn5sc//nEaGhrW+SV16tQpyZu/3Pr6+iTr/iI7deqUpUuXFq6prq4uAwcOLDweAAAAAKAMK1euzEsvvZROnTqlc+fOrV1Oq+jQoUP69etXy4bXmjNnzobPUXZRW4r58+fn3/7t33LNNddkn332SZIMHTo0c+bMyWWXXZbOnTuv8wDTtd/YdO3atfamamxsbPYGW7lyZbp06VK4rkqlkq5duxYeDwAAAABQhnbt2qVdu3Zp37592rdv39rlbHZrVz/p0qXLOl8ybOhSMUkbfvDp448/nlWrVmXo0KHNtu+555557rnn0qdPnyxatKjZvrWve/fuXVsmZn19evfu3YKVAwAAAACwtWizIXufPn2SJH/84x+bbX/66aezyy67ZMSIEXnkkUeaLej/8MMPp3///unZs2cGDx6cbt26Zdq0abX9y5Yty6xZszJixIjNcxIAAAAAAGzR2mzIPmzYsLz//e/PKaeckocffjjPPvtsLrnkkjz00EP54he/mHHjxuWNN97Iaaedljlz5uTWW2/NNddck0mTJiV5cy328ePHZ8qUKfntb3+bp556Kscff3z69OmTgw8+uJXPbsM1NVVbuwQ2QfX/PNWYrYf/dwAAAMDWrDVzxaLHbmpqyqWXXppRo0Zl+PDhOeqoozJv3rySq1tXm12TvV27dvnOd76TSy65JF/72teydOnSDBo0KNdcc0323HPPJMnUqVNz3nnnZezYsdlhhx1y8sknZ+zYsbU5Jk+enNWrV+f0009PQ0NDRowYke9///upq6trrdPaaO3aVXL5Tx7Mi4uKP6yV1rHnbu/JZw4Znrl3fC/1i+e3djlshC49+6b/mKNauwwAAACAwlorV9yxV48c+9kPFhp7xRVX5Prrr883vvGN9OnTJxdeeGEmTpyY22+/PR07diy50v/VZkP2JOnRo0fOOOOMnHHGGevdP2zYsNx4441vOb59+/Y56aSTctJJJ7VUiZvFi4uW5tkXX23tMthI79mhe5KkfvH81C98vpWrAQAAAOCdZmvKFRsbG3P11VfnxBNPzOjRo5MkF198cUaNGpV77rknY8aMabFjt9nlYgAAAAAAeGd46qmnsnz58uy33361bd27d8+QIUMyffr0Fj22kB0AAAAAgK3aggULkiR9+/Zttr1Xr161fS1FyA4AAAAAwFatvr4+SdZZe71Tp05ZuXJlix5byA4AAAAAwFatc+fOSd5cm/0vrVy5Ml26dGnRYwvZAQAAAADYqq1dJmbRokXNti9atCi9e/du0WML2QEAAAAA2KoNHjw43bp1y7Rp02rbli1bllmzZmXEiBEteuwOLTo7AAAAAABbpR179dhqjtmxY8eMHz8+U6ZMyfbbb58dd9wxF154Yfr06ZODDz645CqbE7IDAAAAANBMU1M1x372g6127HbtKhs9bvLkyVm9enVOP/30NDQ0ZMSIEfn+97+furq6FqjyfwnZAQAAAABopkjI3drHbt++fU466aScdNJJJVf09qzJDgAAAAAABQnZAQAAAACgICE7AAAAAAAUJGQHAAAAAICChOwAAAAAAFCQkB0AAAAAAAoSsgMAAAAAQEFCdgAAAAAAKEjIDgAAAAAABQnZAQAAAABoptrU9I48dhEdWrsAAAAAAAC2LJV27TL3ju+lfvH8zXrcLj37pv+YozZ5niuvvDIPPPBAfvSjH5VQ1dsTsgMAAAAAsI76xfNTv/D51i5jo1133XW55JJLss8++2yW4wnZAQAAAADY6i1cuDBnnHFGpk2bll122WWzHdea7AAAAAAAbPWefPLJ1NXV5Re/+EX23HPPzXZcd7IDAAAAALDVO+CAA3LAAQds9uO6kx0AAAAAAAoSsgMAAAAAQEFCdgAAAAAAKEjIDgAAAAAABXnwKQAAAAAA6+jSs+874pibSsgOAAAAAEAz1aam9B9zVKsdu9Ju61mERcgOAAAAAEAzrRlyl3Hsb3zjGyVUsmG2nq8DAAAAAABgCyNkBwAAAACAgoTsAAAAAABQkJAdAAAAAAAKErIDAAAAALyDVavV1i6hVZR13kJ2AAAAAIB3oLq6uiTJihUrWrmS1rH2vNf+HorqUEYxAAAAAABsXdq3b5/tttsuixYtSpJ07do1lUqllatqedVqNStWrMiiRYuy3XbbpX379ps0n5AdAAAAAOAdqk+fPklSC9rfSbbbbrva+W8KITsAAAAAwDtUpVJJ375906tXr6xataq1y9ls6urqNvkO9rWE7AAAAAAA73Dt27cvLXR+p/HgUwAAAAAAKEjIDgAAAAAABQnZAQAAAACgICE7AAAAAAAUJGQHAAAAAICChOwAAAAAAFCQkB0AAAAAAAoSsgMAAAAAQEFCdgAAAAAAKEjIDgAAAAAABQnZAQAAAACgICE7AAAAAAAUJGQHAAAAAICChOwAAAAAAFCQkB0AAAAAAAoSsgMAAAAAQEFCdgAAAAAAKEjIDgAAAAAABQnZAQAAAACgICE7AAAAAAAUJGQHAAAAAICChOwAAAAAAFCQkB0AAAAAAAoSsgMAAAAAQEFCdgAAAAAAKEjIDgAAAAAABQnZAQAAAACgICE7AAAAAAAUJGQHAAAAAICChOwAAAAAAFCQkB0AAAAAAAoSsgMAAAAAQEFCdgAAAAAAKEjIDgAAAAAABQnZAQAAAACgICE7AAAAAAAUJGQHAAAAAICChOwAAAAAAFCQkB0AAAAAAApqsyH7tGnTsttuu63358ADD0ySvPDCC5k0aVL23nvvfOhDH8oll1ySNWvWNJvnuuuuy4EHHphhw4blc5/7XGbNmtUapwMAAAAAwBaoQ2sX0FL22muvPPDAA822PfbYY/nXf/3XHHPMMVm1alWOPPLI7LLLLrnhhhvy/PPP57TTTku7du0yefLkJMnPfvazfPOb38w555yTIUOG5KqrrsqECRNy1113Zfvtt2+N0wIAAAAAYAvSZu9k79ixY3bYYYfazzbbbJMLLrggY8eOzbhx43L33XfnpZdeyje/+c0MGjQoH/3oR3PCCSfkhz/8YRobG5Mk3/3udzN+/Pj8wz/8QwYOHJjzzz8/Xbp0yc0339zKZwcAAAAAwJagzd7J/n9997vfTX19fU455ZQkyYwZM7L77runR48etT777rtv3njjjcyePTs77bRTnn322ey33361/R06dMg+++yT6dOnZ9KkSYXqqFarWbFixaadzAaqVCrp0qXLZjkWsK76+vpUq9XWLgMAAACAjVStVlOpVDao7zsiZF+yZEmuueaa/Nu//Vu22267JMmCBQvSp0+fZv169eqVJJk/f346dHjzV9O3b991+jz11FOFa1m1alVmz55dePzG6NKlS4YMGbJZjgWsa+7cuamvr2/tMgAAAAAooGPHjhvU7x0Rsl9//fXZdttt85nPfKa2raGhId27d2/Wr1OnTkmSlStX1oKx//uL7NSpU1auXFm4lrq6ugwcOLDw+I2xod+0AC2jf//+7mQHAAAA2ArNmTNng/u+I0L22267LZ/85CfTuXPn2rbOnTvX1l5fa2143rVr11rf9fXZlCVYKpVKunbtWng8sPWwXBMAAADA1mljbmBusw8+Xeupp57KvHnz8vGPf7zZ9j59+mTRokXNtq193bt379oyMevr07t37xasGAAAAACArUWbD9lnzJiRnj17ZvDgwc22jxgxIrNmzcobb7xR2/bwww9nm222yeDBg9OzZ8/0798/06ZNq+1fvXp1ZsyYkREjRmy2+gEAAAAA2HK1+ZB91qxZ2W233dbZ/tGPfjQ77LBDvvKVr+Spp57Kb37zm3zrW9/KF77whdo67F/4whfygx/8ID/72c8yZ86cnHrqqWloaMhhhx22uU8DAAAAAIAtUJtfk/3ll1/Odtttt872Tp06ZerUqTnrrLPy6U9/Oj169MjnPve5HHPMMbU+n/70p/P666/nkksuyWuvvZY99tgjP/jBD7L99ttvxjMAAAAAAGBL1eZD9u9973tvuW/nnXfO1Vdf/bbjjzzyyBx55JFllwUAAAAAQBvQ5peLAQAAAACAliJkBwAAAACAgoTsAAAAAABQkJAdAAAAAAAKErIDAAAAAEBBQnYAAAAAAChIyA4AAAAAAAUJ2QEAAAAAoCAhOwAAAAAAFCRkBwAAAACAgoTsAAAAAABQkJAdAAAAAAAKErIDAAAAAEBBQnYAAAAAAChIyA4AAAAAAAUJ2QEAAAAAoCAhOwAAAAAAFCRkBwAAAACAgoTsAAAAAABQ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HnjggVq7ffv2b3kn+7PPPpvkzbvdu3fvXlZ5AAAAAABQutJC9l122aXWfvLJJ5vta2xszEMPPZRKpZJKpZJhw4Zl2223Xe88v/71r2vtXXfdtazyAAAAAACgdKWF7HvttVetfe211zbbd/PNN2f58uW1pWIOPPDA9c7x7LPP5oc//GHt4ajDhw8vqzwAAAAAAChdaSH7xz72sVr7wQcfzJe//OX893//d773ve/lm9/8Zi04b9euXQ499NB1xt9zzz35/Oc/n/r6+loYP2bMmLLKAwAAAACA0pX2ZNGhQ4dm9OjRuffee1OpVHLPPffknnvuSfLmw07XLhXzqU99Kn369KmNe+yxx3LMMcfk1VdfbdbvYx/7WAYMGFBWeQAAAAAAULrS7mRPkm984xvZZZddaneir/1vpVJJtVrNwIEDc/LJJzcb07179yxZsqRZv0GDBuWMM84oszQAAAAAAChdqSH7dtttl5/+9Kf5zGc+k86dOyd5M2ivq6vLYYcdluuvv36dB57269cvHTp0SLVaTbVazaGHHpof/ehH6d69e5mlAQAAAABA6UpbLmatbt265ayzzspXv/rVPPfcc0neDNK7du26/gI6dMiHP/zh7LTTTvnUpz6V3XbbreySAAAAAACgRZQesq/VpUuXDB48eIP6Xn755S1VBgAAAAAAtJhSl4sBAAAAAIB3ks0asjc1NWXJkiWZP3/+5jwsAAAAAAC0iBZbLiZJli1blltvvTXTpk3L448/nldffTVJUqlUMmvWrFq/z3/+89ljjz0yYcKE9OrVqyVLAgAAAACA0rRIyL569epccsklue6669LQ0JAkqVarb9l/5syZmTFjRm644Yaccsop+ad/+qeWKAsAAAAAAEpVesj+8ssv55hjjskf/vCHVKvVVCqV2r5KpbJO2L548eKsXLkylUol9fX1Oeuss7JgwYJ85StfKbs0AAAAAAAoValrstfX12fSpEl54oknatuq1Wo6d+6cPfbYY713s7/66qtp3759LZCvVqu58sorc9ddd5VZGgAAAAAAlK7UkP3CCy/MrFmzamH5nnvume9973uZPn16fvrTn653zMCBA3P33XfnoIMOaha0X3DBBWlsbCyzPAAAAAAAKFVpIfvzzz+fm266qbY8zKGHHpqf/OQnGTVqVDp0ePtVaXbaaadcdtllOeaYY2p3u7/88su55557yioPAAAAAABKV1rIfscdd2T16tVJkn79+uUb3/hG2rXbuOknT56coUOH1l7fe++9ZZUHAAAAAAClKy1kf+CBB2rtiRMnpq6urtA8X/jCF2rtJ598cpPrAgAAAACAllJayP7iiy/W2h/84AcLz7PHHnskefOBqa+88som1wUAAAAAAC2ltJB9yZIltXavXr0Kz9OnT59au76+fpNqAgAAAACAllRayN61a9dae8WKFYXnef3115MklUol22677SbVtHDhwuy2227r/Nx6661JktmzZ2f8+PEZPnx4DjjggFx77bXNxjc1NeXSSy/NqFGjMnz48Bx11FGZN2/eJtUEAAAAAEDbUVrI/u53v7vW3pS11B9//PH1zlnEU089lU6dOuX+++/PAw88UPv52Mc+lldffTUTJkxIv379csstt+TYY4/NlClTcsstt9TGX3HFFbn++utzzjnn5IYbbkhTU1MmTpyYxsbGTaoLAAAAAIC2obSQffjw4bX2XwbVG+vGG2+stffcc89NKSlPP/10dtlll/Tq1Ss77LBD7adz58656aabUldXl7PPPjsDBgzIuHHjcsQRR+Sqq65KkjQ2Nubqq6/O5MmTM3r06AwePDgXX3xxFixYkHvuuWeT6gIAAAAAoG0oLWQfPXp0kjcfWPrLX/4y999//0bP8ctf/jL33ntv7fWHPvShTarpj3/8YwYMGLDefTNmzMjIkSPToUOH2rZ99903zz77bF555ZU89dRTWb58efbbb7/a/u7du2fIkCGZPn36JtUFAAAAAEDb0OGvd9kwBx54YPr3759nn302TU1NmTx5ci644IIccsghGzT+1ltvzVlnnZVKpZJqtZodd9wxBx100CbV9PTTT+dd73pXDj/88MydOzc777xzvvSlL2X//ffPggULMmjQoGb91z6wdf78+VmwYEGSpG/fvuv0WbuviGq1uklr1m+MSqWSLl26bJZjAeuqr69PtVpt7TIAAAAA2EjVajWVSmWD+pYWsrdr1y6nnnpqJk2alOTNcOn444/P1VdfnQMPPDA77bRTs/5z587N4sWLM3PmzNxxxx2ZPXt2LYyqVCo54YQT0r59+8L1rF69Os8880wGDhyYr371q+nWrVvuvPPOfPGLX8wPfvCDNDQ0pGPHjs3GdOrUKUmycuXK1NfXJ8l6+yxdurRwXatWrcrs2bMLj98YXbp0yZAhQzbLsYB1zZ07t3YtAQAAAGDr8n+z4bdSWsieJKNGjcpJJ52U//iP/6jdkT5z5sw88cQTzfpVq9V87GMfa/Y6SW3MEUcc0Wx/ER06dMi0adPSvn37dO7cOUmyxx575E9/+lO+//3vp3Pnzus8wHTlypVJkq5du9bGNDY21tpr+2zK3eF1dXUZOHBg4fEbY0O/aQFaRv/+/d3JDgAAALAVmjNnzgb3LTVkT5IJEyZk2223zbnnnpuGhoZa0Pt/b6//y2B9bbheqVRy3HHH5dhjjy2llm222WadbX/zN3+TBx54IH369MmiRYua7Vv7unfv3lm9enVtW79+/Zr12W233QrXVKlU0rVr18Ljga2H5ZoAAAAAtk4bcwNzaQ8+/UuHHXZYfv7zn+dTn/pUOnToUAvUq9Vq7Wette3Ro0fn+uuvLy1g/9Of/pS9994706ZNa7b9D3/4QwYOHJgRI0bkkUceyZo1a2r7Hn744fTv3z89e/bM4MGD061bt2bjly1bllmzZmXEiBGl1AgAAAAAwNat9DvZ19p5551z/vnn56tf/WoeeeSRPProo1mwYEGWLVuWVatWpUePHtl+++0zbNiwjBw5Mn369Cn1+AMGDMiuu+6as88+O2eddVbe9a535aabbspjjz2WW265JT179szUqVNz2mmnZeLEiZk5c2auueaanHXWWUneXG9n/PjxmTJlSrbffvvsuOOOufDCC9OnT58cfPDBpdYKAAAAAMDWqcVC9rW6d++ej3zkI/nIRz7S0odqpl27dvnud7+biy66KF/5yleybNmyDBkyJD/4wQ8yaNCgJMnUqVNz3nnnZezYsdlhhx1y8sknZ+zYsbU5Jk+enNWrV+f0009PQ0NDRowYke9///upq6vbrOcCAAAA70TVpqZU2rXIH+HTwvy/A95JWjxk/2umTZuW9773vXnPe95T+tzvfve7c8EFF7zl/mHDhuXGG298y/3t27fPSSedlJNOOqn02gAAAIC3V2nXLnPv+F7qF89v7VLYCF169k3/MUe1dhkAm02LhOzVajW/+tWvcuONN2bNmjX50Y9+9JZ9Tz/99LzwwgsZOnRoJkyYkL//+79viZIAAACArVD94vmpX/h8a5cBAG+p9JB9wYIFOf744/PYY4+lWq2mR48eb9m3qakp8+e/+W30zJkzc8IJJ+TnP/95LrroomyzzTZllwYAAAAAAKUqdXGsRYsWZfz48bWAPUmWLVuW1157bb39Fy5cmNWrV6daraZSqaRarea+++7LF77whaxcubLM0gAAAAAAoHSlhuxf//rX88ILL/zv5O3aZf/998+aNWvW23/77bfPZZddlk9/+tPp0qVLkjeXmpk5c2a++c1vllkaAAAAAACUrrSQ/bHHHsu9996bSqWSJBkyZEjuuOOOXHnllenZs+d6x3Tq1CkHHXRQzj777PzqV7/K+9///iRvBu033HBD5s2bV1Z5AAAAAABQutJC9p///Oe19nvf+95ce+212XXXXTd4fK9evfK9730v/fr1S/Lmeu0//elPyyoPAAAAAABKV+qd7Gsdd9xx6dat20bP0bVr13zxi1+svX744YfLKA0AAAAAAFpEaSH7Sy+9VGt/6EMfKjzPqFGjau3nn39+k2oCAAAAAICWVFrIvnz58lq7e/fuhedZu357tVrN66+/vsl1AQAAAABASyktZO/SpUutvXjx4sLzLFu2LElSqVSy7bbbbnJdAAAAAADQUkoL2Xfaaadae/r06YXnefTRR2vtd7/73ZtUEwAAAAAAtKTSQvbhw4fX2ldffXXheX74wx/W2u9///s3pSQAAAAAAGhRpYXshxxySK09e/bsnH/++Rs9x3e+85387ne/q70+8MADS6kNAAAAAABaQmkh+wc+8IEMGTIkyZsPLf3Rj36Uo48+Os8888xfHfvCCy/k3/7t33LppZemUqmkUqlk9913z6hRo8oqDwAAAAAAStehzMnOPPPMfO5zn8uaNWtSrVZz33335b777sv73ve+7LHHHnnve9+bbt26JUmWL1+eF154IU8++WSefPLJVKvVVKvVJEnnzp1zxhlnlFkaAAAAAACUrtSQfdiwYTn33HNz2mmnpampKcmbd7XPmjUrs2fPXu+YtcF6pVJ5s6AOHXLBBRdk6NChZZYGAAAAAAClK225mLU++clPZurUqdlxxx3XCdCTNLtj/S/3VavV7Ljjjvnxj3+cv//7vy+7LAAAAAAAKF2pd7Kvtd9+++Wuu+7KnXfemdtvvz2PPPJIGhoamvVZG7R36tQpw4YNy7hx4zJmzJh06NAiJQEAAAAAQOlaLNGuq6vLJz/5yXzyk5/MqlWrMnfu3Lz00kt54403UqlU0r179/Ts2TN/8zd/k7q6upYqAwAAAAAAWsxmuW28rq4ugwYNyqBBgzbH4QAAAAAAYLMofU12AAAAAAB4pxCyAwAAAABAQS2+XMwbb7yR+vr6rFmzJk1NTRs9/j3veU8LVAUAAAAAAJuuRUL23/zmN7n11lvz8MMPp76+vvA8lUols2bNKrEyAAAAAAAoT6khe2NjY7785S/n3nvvTZJUq9UypwcAAAAAgC1KqWuyn3HGGfmv//qvWrheqVTKnB4AAAAAALYopd3JPnv27Nx22221YL1arWb77bfPPvvskx133DFdunRJu3aeswoAAAAAQNtRWsj+i1/8ItVqtRayH3HEETn++OPTqVOnsg4BwBaiqamadu38tdLWyv8/AAAAKE9pIfv//M//1NoHHHBAvvrVr5Y1NQBbmHbtKrn8Jw/mxUVLW7sUNtKOvXrk2M9+sLXLAAAAgDajtJB9wYIFtfaECRPKmhaALdSLi5bm2Rdfbe0yAAAAAFpVaYukNzQ01NqDBw8ua1oAAAAAANhilRayv/vd7661O3Qo7QZ5AAAAAADYYpUWsvfv37/WfvbZZ8uaFgAAAAAAtlilhex/93d/V2vfddddZU0LAAAAAABbrNJC9r//+79P7969kyQ//vGPM2/evLKmBgAAAACALVJpIXu3bt1y9tlnp1KpZMWKFZkwYUJmzZpV1vQAAAAAALDFKfUJpR/+8Idz8cUX5+STT84LL7yQcePGZZ999skHPvCB7Lrrrtl2223TuXPnjZpzxIgRZZYIAAAAAAClKS1kHz16dK1dqVSSJNVqNTNmzMiMGTMKzVmpVNwNDwAAAADAFqu0kH3BggW1cD1Js3byZuAOAAAAAABtSanLxQjSAQAAAAB4JyktZL/gggvKmgoAAAAAALYKpYXsY8eOLWsqAAAAAADYKrRr7QIAAAAAAGBrJWQHAAAAAICCNmvI3tTUlCVLlmT+/Pmb87AAAAAAANAiSluTfX2WLVuWW2+9NdOmTcvjjz+eV199NUlSqVQya9asWr/Pf/7z2WOPPTJhwoT06tWrJUsCAAAAAIDStEjIvnr16lxyySW57rrr0tDQkCSpVqtv2X/mzJmZMWNGbrjhhpxyyin5p3/6p5YoCwAAAAAASlV6yP7yyy/nmGOOyR/+8IdUq9VUKpXavkqlsk7Yvnjx4qxcuTKVSiX19fU566yzsmDBgnzlK18puzQAAAAAAChVqWuy19fXZ9KkSXniiSdq26rVajp37pw99thjvXezv/rqq2nfvn0tkK9Wq7nyyitz1113lVkaAAAAAACUrtSQ/cILL8ysWbNqYfmee+6Z733ve5k+fXp++tOfrnfMwIEDc/fdd+eggw5qFrRfcMEFaWxsLLM8AAAAAAAoVWkh+/PPP5+bbrqptjzMoYcemp/85CcZNWpUOnR4+1Vpdtppp1x22WU55phjane7v/zyy7nnnnvKKg8AAAAAAEpXWsh+xx13ZPXq1UmSfv365Rvf+Ebatdu46SdPnpyhQ4fWXt97771llQcAAAAAAKUrLWR/4IEHau2JEyemrq6u0Dxf+MIXau0nn3xyk+sCAAAAAICWUlrI/uKLL9baH/zgBwvPs8ceeyR584Gpr7zyyibXBQAAAAAALaW0kH3JkiW1dq9evQrP06dPn1q7vr5+k2oCAAAAAICWVFrI3rVr11p7xYoVhed5/fXXkySVSiXbbrvtJtcFAAAAAAAtpbSQ/d3vfnetvSlrqT/++OPrnRMAAAAAALY0pYXsw4cPr7VvueWWwvPceOONtfaee+65KSUBAAAAAECLKi1kHz16dJI3H1j6y1/+Mvfff/9Gz/HLX/4y9957b+31hz70oZKqAwAAAACA8pUWsh944IHp379/KpVKmpqaMnny5PzqV7/a4PG33nprvva1r6VSqSRJdtxxxxx00EFllQcAAAAAAKXrUNZE7dq1y6mnnppJkyYlSerr63P88cfn6quvzoEHHpiddtqpWf+5c+dm8eLFmTlzZu64447Mnj071Wo1yZsPPT3hhBPSvn37ssoDAAAAAIDSlRayJ8moUaNy0kkn5T/+4z9SqVRSrVYzc+bMPPHEE836VavVfOxjH2v2OkltzBFHHNFsPwAAAAAAbIlKWy5mrQkTJuTcc89Np06dkqS2/Eu1Wk2lUqn9VKvVZuH62v/+67/+a0455ZSyywIAAAAAgNKVHrInyWGHHZaf//zn+dSnPpUOHTrUwvS1wfra12u3JW8+OPX666/Pscce2xIlAQAAAABA6UpdLuYv7bzzzjn//PPz1a9+NY888kgeffTRLFiwIMuWLcuqVavSo0ePbL/99hk2bFhGjhyZPn36tFQpAAAAAADQIkoL2d94442sWLEivXr1ara9e/fu+chHPpKPfOQjZR0KAAAAAAC2CKUtF3Pbbbdl9OjR+cxnPpOpU6dm3rx5ZU0NAAAAAABbpNLuZP/1r3+dpqamPP7445k5c2Zee+21nHjiiWVNDwAAAAAAW5zS7mR/9tlnU6lUaq8/8YlPlDU1AAAAAABskUoL2ZcuXdrsdb9+/cqaGgAAAAAAtkilhey77LJLs9cLFiwoa2oAAAAAANgilRayH3HEEalWq7UlY370ox+VNTUAAAAAAGyRSgvZP/nJT2bSpEmpVqupVqu57rrr8p//+Z9pbGws6xAAAAAAALBF6VDmZMcff3z222+/nHvuuZkzZ04uv/zyXHfddRk5cmT22muv9OrVK9ttt13q6uo2eM4RI0aUWSIAAAAAAJSmtJB99OjRtfaaNWuSJNVqNa+++mruueee3HPPPRs9Z6VSyaxZs8oqEQAAAAAASlVayL5gwYLaeuxJmrWTNwN3AAAAAABoS0pdLkaQDgAAAADAO0lpIfsFF1xQ1lQAAAAAALBVKC1kHzt2bFlTAQAAAADAVqFdWRMtXrw4jz32WFnTAQAAAADAFq+0kP2WW27JZz/72YwaNSpnnXVWfv/735c1NQAAAAAAbJFKC9n/67/+K9VqNS+//HJuuOGG/O53vytr6lLMnTs3e+21V2699dbattmzZ2f8+PEZPnx4DjjggFx77bXNxjQ1NeXSSy/NqFGjMnz48Bx11FGZN2/e5i4dAAAAAIAtVGkh+7x581KpVGqv//7v/76sqTfZqlWrcuKJJ2bFihW1ba+++momTJiQfv365ZZbbsmxxx6bKVOm5JZbbqn1ueKKK3L99dfnnHPOyQ033JCmpqZMnDgxjY2NrXEaAAAAAABsYUoL2ZcvX97sdZ8+fcqaepNddtll6datW7NtN910U+rq6nL22WdnwIABGTduXI444ohcddVVSZLGxsZcffXVmTx5ckaPHp3Bgwfn4osvzoIFC3LPPfe0xmkAAAAAALCF6VDWRLvttlsef/zx2uvnnnsugwYNKmv6wqZPn54bb7wxt912W0aPHl3bPmPGjIwcOTIdOvzvr2DffffNlVdemVdeeSUvvfRSli9fnv3226+2v3v37hkyZEimT5+eMWPGFKqnWq02u6O+JVUqlXTp0mWzHAtYV319farVamuXUTrXlrahrb4/AYC2w787t37+zQlszarVarOVW95OaSH70UcfnaOPPrp24CuvvDIXXXRRWdMXsmzZspx88sk5/fTT07dv32b7FixYsM6XAL169UqSzJ8/PwsWLEiSdcb16tWrtq+IVatWZfbs2YXHb4wuXbpkyJAhm+VYwLrmzp2b+vr61i6jdK4tbUNbfX8CAG2Hf3du/fybE9jadezYcYP6lRayjx49OmeffXbOPffcNDY25pe//GU6duyYE044ITvssENZh9koZ555Zvbaa698/OMfX2dfQ0PDOr+kTp06JUlWrlxZ+xBYX5+lS5cWrqmuri4DBw4sPH5jbOg3LUDL6N+/f5u8a8O1pW1oq+9PAKDt8O/OrZ9/cwJbszlz5mxw39JC9qamphx22GEZPnx4zj///Dz88MO57bbbcvvtt2fw4MEZPnx4evfune222y51dXUbPO8nP/nJQvXcdtttmTFjRm6//fb17u/cufM6DzBduXJlkqRr167p3LlzkjfXZl/bXttnU/5crVKppGvXroXHA1sPf9rKlsz7EwCAlubfnMDWbGO+7C0tZN99993XKaJarWb16tX5wx/+kCeffLLQvEVD9ltuuSWLFy9utg57kpxxxhn55S9/mT59+mTRokXN9q193bt376xevbq2rV+/fs367LbbboVqAgAAAACgbSktZF+7EPxfLgj/Vmn/X/tTof87TxFTpkxJQ0NDs20HH3xwJk+enH/4h3/Iz3/+89xwww1Zs2ZN2rdvnyR5+OGH079///Ts2TPbbrttunXrlmnTptVC9mXLlmXWrFkZP3584boAAAAAAGg7SgvZk/8Nzzd1va0y1uvq3bv3erf37NkzvXv3zrhx4zJ16tScdtppmThxYmbOnJlrrrkmZ511VpI312IfP358pkyZku233z477rhjLrzwwvTp0ycHH3zwJtcHAAAAAMDWr7SQ/dprry1rqs2iZ8+emTp1as4777yMHTs2O+ywQ04++eSMHTu21mfy5MlZvXp1Tj/99DQ0NGTEiBH5/ve/v1FrygMAAAAA0HaVFrKPHDmyrKlazB//+Mdmr4cNG5Ybb7zxLfu3b98+J510Uk466aSWLg0AAAAAgK1Qu9YuAAAAAAAAtlZCdgAAAAAAKEjIDgAAAAAABQnZAQAAAACgoNIefPq+972vrKlqKpVKZs2aVfq8AAAAAABQhtJC9mq1WtZUAAAAAACwVSgtZE/evPN8Y8P2SqXS7LWwHgAAAACArUVpIfvYsWM3qn9jY2Nee+21PP/885k3b16SNwP397znPTnrrLPStWvXskoDAAAAAIAWUVrIfsEFFxQe++KLL+biiy/OHXfckfnz5+fb3/52rrnmmnTr1q2s8gAAAAAAoHTtWruAJNlxxx0zZcqUfOUrX0m1Ws2TTz6Z8847r7XLAgAAAACAt7VFhOxrHX300Xn/+9+farWa2267LTNnzmztkgAAAAAA4C1tUSF7kowfP77Wvu2221qvEAAAAAAA+Cu2uJB9r732qrWnT5/eipUAAAAAAMDb2+JC9u233z5JUq1Ws3DhwlauBgAAAAAA3toWF7K/9NJLtfaqVatasRIAAAAAAHh7W1zIfuedd9baO+ywQytWAgAAAAAAb69Daxfwlx599NFcffXVqVQqSZKhQ4e2ckUAAAAAAPDWSgvZ/3KZlw21evXqrFixIgsXLsxvf/vb/OIXv8jKlStTrVZTqVRyyCGHlFUeAAAAAACUrrSQ/YADDqjdgV7U2nC9Uqnkfe97Xw466KCSqgMAAAAAgPKVvlxMtVotNG5tuF6tVrP99tvnwgsvLLkyAAAAAAAoV6kPPi0asK8d2759+/zd3/1dbrzxxgwYMKDEygAAAAAAoHyl3cl+3HHHFSugQ4dss8026du3b0aOHJnu3buXVRIAAAAAALSoVg/ZAQAAAABga1XqcjEAAAAAAPBO0uIh+9KlS992/+23357p06dnzZo1LV0KAAAAAACUqrTlYv5SfX19rrvuutx4443p3r17brnllrfse/HFF2f+/PnZYYcd8s///M+ZMGFC2rdv3xJlAQAAAABAqUoP2Z966ql8+ctfzvPPP59qtZpu3bq9Zd/Vq1dn4cKFSZJFixbloosuyp133pkrr7wyvXr1Krs0AAAAAAAoVanLxTzzzDM54ogj8txzz6VarSZJli9fnsWLF6+3//z587NmzZpUq9VUKpVUq9XMnj07n//85//qMjMAAAAAANDaSg3ZTz311Lz22mupVCpJkm7duuWzn/1sOnRY/w3zO+64Y2699dZ85StfSe/evWvbn3/++Zx55plllgYAAAAAAKUrLWR/8MEH89hjj9UC9v333z+/+c1v8vWvfz09evRY/8HbtcuQIUNy9NFH51e/+lUOOeSQJEm1Ws2vfvWrPPXUU2WVBwAAAAAApSstZL/zzjtr7fe973254oorst12223w+M6dO2fKlCkZMmRIbdutt95aVnkAAAAAAFC60kL2mTNn1trHHHPMWy4R83Y6dOiQiRMn1l7PmDGjlNoAAAAAAKAllBayL1y4sNYeOXJk4Xk+8IEPJHlzyZgXX3xxk+sCAAAAAICWUlrIXl9fX2t36dKl8Dx/uX77ihUrNqkmAAAAAABoSaWF7Ntss02t/Zd3tW+sV199NUlSqVTe8oGpAAAAAACwJSgtZN95551r7YceeqjwPL/73e9q7V69em1STQAAAAAA0JJKC9nf//73J3lzLfXvfe97aWxs3Og5qtVqpk6dWnu9KWu7AwAAAABASystZD/00EOTvLnMy7x583LyySdn9erVGzXHmWeemdmzZ9deH3zwwWWVBwAAAAAApSstZN9jjz2y7777plqtJknuvvvufPrTn879999f2/ZWpk2blsMPPzw33XRTkjeD+n333Td77713WeUBAAAAAEDpOpQ52de//vWMGzcuDQ0NSZJZs2bli1/8Ynr06JHdd989733ve9OtW7ckyfLly/PCCy9k1qxZWbJkSZLUwvju3bvnzDPPLLM0AAAAAAAoXakh+6677prLLrss//qv/5qGhoZUKpVUq9W89tpr+Z//+Z/1jlkbrFcqlSRJt27dctlllzV7kCoAAAAAAGyJSlsuZq0PfehDufnmm7PXXnutE6Cvz9p91Wo1e+21V372s5954CkAAAAAAFuFUu9kX2vgwIG5/vrrM2PGjPziF7/IQw89lHnz5q2370477ZR99tknhx12WPbZZ5+WKAcAAAAAAFpEi4Tsa+2zzz614Hz58uV56aWX8sYbb6RSqaR79+7p2bNnevTo0ZIlAAAAAABAi2nRkP0vbbPNNvmbv/mbzXU4AAAAAABocaWvyf6XFixYkIcffvht+5x//vn5z//8z8yZM6clSwEAAAAAgNK1SMj+1FNP5Ytf/GI+8pGP5Nxzz33bvnfeeWcuv/zyfPzjH88Xv/jFt1y7HQAAAAAAtjSlh+y33XZbPv3pT+f+++9PtVrN888//5Z9Gxoasnjx4iRJtVrNf//3f+cTn/hEfve735VdFgAAAAAAlK7UkP2+++7LqaeemsbGxtq2VatW5cUXX1xv/8WLF6dbt26pVqtJkkqlkhUrVmTSpEmWjwEAAAAAYItXWsi+cuXKfP3rX09TU1MqlUqq1Wr23nvvXHzxxenVq9d6x+y4446ZMWNGfvKTn+Sggw5KtVpNpVJJfX19Tj755LJKAwAAAACAFlFayH7XXXdl4cKFqVQqSZIvf/nLuf7663PIIYekrq7ubcfutddeueyyy3LqqafW7mqfPXt27rvvvrLKAwAAAACA0pUWsv+///f/au2DDjooX/rSlzZ6jn/+53/OQQcdVHt91113lVIbAAAAAAC0hNJC9ieffLLWnjBhQuF5xo8fX2s/+uijm1QTAAAAAAC0pNJC9iVLltTaQ4YMKTzP7rvvniSpVqt55ZVXNrkuAAAAAABoKaWF7KtWraq1166rXkTHjh1r7dWrV29STQAAAAAA0JJKC9m32267Wvu5554rPM+CBQuSJJVKJe9617s2tSwAAAAAAGgxpYXsAwcOrLV//etfF57nLx+g+t73vneTagIAAAAAgJZUWsj+t3/7t0neXCrmmmuuycKFCzd6jtdeey1Tp05dZ04AAAAAANgSlRayf/zjH0+HDh1SqVTyxhtvZOLEiXnxxRc3ePzixYszadKk2sNO27dvnzFjxpRVHgAAAAAAlK60kL1v37751Kc+lWq1mkqlkj/96U/5h3/4h1x00UX54x//+JYPQ/3zn/+cyy67LB/72Mcyc+bMJG+uxz5u3DjLxQAAAAAAsEXrUOZkJ598ch5++OHMmzcvlUoly5cvz9SpUzN16tR07tw5ffv2Tbdu3ZIky5cvz0svvZSGhoYkqYXzSTJo0KCccsopZZYGAAAAAAClKzVk79atW66++uocffTRmTNnTi00r1arqa+vzzPPPLPecZVKJZVKJdVqNUOGDMkVV1yRrl27llkaAAAAAACUrrTlYtbaaaedcvPNN+foo49O165da8vErA3S/+9P8mYI361bt0yaNCk33HBD+vTpU3ZZAAAAAABQulLvZF+rS5cu+cpXvpJJkyblt7/9bR566KHMnj07L730Ut54441UKpX06NEj22+/ffbYY4/ss88++bu/+7tss802LVEOAAAAAAC0iBYJ2dfq0qVLxowZkzFjxrTkYQAAAAAAoFWUvlwMAAAAAAC8UwjZAQAAAACgoNKXi1m9enWeffbZPPPMM3nllVeyfPnyVKvVbLPNNtl+++2z6667Ztddd01dXV3ZhwYAAAAAgM2qlJC9sbExv/zlL3P33Xdn2rRpqa+vf9v+nTp1ysiRI3PwwQdnzJgx6dy5cxllAAAAAADAZrVJIfvq1atzzTXXZOrUqVm6dGmSpFqt/tVxDQ0Nuf/++3P//ffnwgsvzL/8y79k4sSJ6dix46aUAwAAAAAAm1XhNdn/9Kc/5eMf/3guuuiivPbaa7VwvVKppFKpvOW4v9xfrVazdOnSXHbZZRkzZkyefPLJouUAAAAAAMBmV+hO9vvvvz+TJ09OQ0NDqtVqs9A8Sbbddtv069cvvXv3TpcuXZIkS5cuzbJlyzJ37ty8/vrrSdJs3PPPP5/DDz88U6ZMyUc/+tFNPjEAAAAAAGhpGx2y//73v8+//uu/pqGhoXZXerVazYABA/LJT34yH/7whzNo0KC3nePPf/5zHnroodxwww2ZM2dOLWxvaGjICSeckKlTp2bkyJHFzggAgK1SU1M17dq99V9EsmXz/w8AgHeqjQrZly1bluOPP74WsFer1fTu3Ttf+9rXcsghh2zwPAMGDMiAAQMyfvz43HvvvTnjjDOycOHCVCqVNDY25vjjj8+dd96Z7bbbbmPPBwCArVS7dpVc/pMH8+Kipa1dChtpx149cuxnP9jaZQAAQKvYqJD9wgsvrIXh1Wo1f/u3f5tLLrkk3bt3L1zA6NGjc/vtt+f444/Pgw8+mEqlkiVLluSb3/xmzj///MLzAgCw9Xlx0dI8++KrrV0GAADABtvgB58+//zz+dnPflZb2mXEiBG58sorNylgX6t79+65/PLLs/feeyd5c432X/ziF3nhhRc2eW4AAAAAAGgpGxyy/+QnP8nq1atTrVbTvXv3XHLJJamrqyutkM6dO+fb3/52unbtmkqlkjVr1uT6668vbX4AAAAAACjbBofsd911V5KkUqnkqKOOSs+ePUsvZocddsiXvvSlVKvVJMndd99d+jEAAAAAAKAsGxSyz5s3LwsWLEiS1NXV5R//8R9brKBx48alffv2qVareemllzJv3rwWOxYAAAAAAGyKDQrZZ8+eneTNu9iHDh2aHj16tFhB73rXuzJ8+PDa6z/+8Y8tdiwAAAAAANgUGxSyv/zyy7X2brvt1mLFrLXzzjvX2gsXLiw8z+LFi3PSSSdl3333zV577ZUvfvGL+fOf/1zbP3v27IwfPz7Dhw/PAQcckGuvvbbZ+Kamplx66aUZNWpUhg8fnqOOOsqd9QAAAAAA1GxQyP7666/X2t27d2+xYtZ697vfXWu/8cYbhec59thj89xzz+Wqq67KT3/603Tu3DlHHHFE6uvr8+qrr2bChAnp169fbrnllhx77LGZMmVKbrnlltr4K664Itdff33OOeec3HDDDWlqasrEiRPT2Ni4SecHAAAAAEDb0GFDOrVv377W3pTQe0PV19fX2nV1dYXmWLp0aXbcccdMmjQpgwYNSpIcc8wx+cQnPpE//elPeeihh1JXV5ezzz47HTp0yIABA2qB/Lhx49LY2Jirr746J554YkaPHp0kufjiizNq1Kjcc889GTNmzCafJwAAAAAAW7cNCtm32267Wvsvl45pKYsWLaq1i94536NHj1x00UW110uWLMk111yTPn36ZODAgbnssssycuTIdOjwv7+CfffdN1deeWVeeeWVvPTSS1m+fHn222+/ZrUMGTIk06dPLxyyV6vVrFixotDYjVWpVNKlS5fNcixgXfX19alWq61dRulcW9qGtvr+ZOvl2tI2uLYAZfLZsPXzuQBszarVaiqVygb13aCQfaeddqpNPGPGjOKVbaDf//73tXb//v03eb5///d/z0033ZSOHTvmO9/5Trp27ZoFCxbU7nBfq1evXkmS+fPnZ8GCBUmSvn37rtNn7b4iVq1aVXuQbEvr0qVLhgwZslmOBaxr7ty5zf4yp61wbWkb2ur7k62Xa0vb4NoClMlnw9bP5wKwtevYseMG9dugkH3o0KFp165dmpqasmTJksyYMSP77LPPJhX4Vn7/+9/X7pZv3759KR+o//Iv/5LPfOYzue6663Lsscfm+uuvT0NDwzq/pE6dOiVJVq5cWfsQWF+fpUuXFq6lrq4uAwcOLDx+Y2zoNy1Ay+jfv3+bvGvDtaVtaKvvT7Zeri1tg2sLUCafDVs/nwvA1mzOnDkb3HeDQvZu3bplzz33zKOPPpokueyyy/LDH/6wWHV/xaWXXprkzQ/TD3zgA6X8adjaUPu8887L448/nh//+Mfp3LnzOg8wXblyZZKka9eu6dy5c5KksbGx1l7bZ1NqqlQq6dq1a+HxwNbDn7ayJfP+BFqCawsAf8nnArA125gve9ttaMdPfOITSd5cMuZ3v/tdbr/99o2v7K/42c9+locffrj2+pOf/GThuZYsWZI777wzq1evrm1r165dBg4cmEWLFqVPnz7N1n5P/nct+N69e9eWiVlfn969exeuCwAAAACAtmODQ/ZPfepT2WGHHVKpVFKtVvPv//7vmTlzZmmFPPDAA/n3f//3VCqVVCqV7Lzzzjn00EMLz/fKK6/khBNOyEMPPVTbtmrVqsyaNSsDBgzIiBEj8sgjj2TNmjW1/Q8//HD69++fnj17ZvDgwenWrVumTZtW279s2bLMmjUrI0aMKFwXAAAAAABtxwaH7B07dswpp5xSe6pqQ0ND/uVf/iW/+MUvNrmIa6+9Nscee2xWr15dW6vra1/7Wtq12+Dy1jFo0KDsv//+OffcczN9+vQ8/fTT+epXv5ply5bliCOOyLhx4/LGG2/ktNNOy5w5c3LrrbfmmmuuyaRJk2rnO378+EyZMiW//e1v89RTT+X4449Pnz59cvDBB2/yOQMAAAAAsPXboDXZ1xozZkzuv//+/PznP0+lUkl9fX1OOeWU/PKXv8znP//5fPCDH9yog993332ZOnVqZsyYUQvvk+Rzn/tcPvzhD2/UXOvzrW99KxdddFGOP/74vP7669lnn31y3XXX5T3veU+SZOrUqTnvvPMyduzY7LDDDjn55JMzduzY2vjJkydn9erVOf3009PQ0JARI0bk+9//furq6ja5NgAAAAAAtn4bFbInyTnnnJOXX345//M//1NbOua+++7Lfffdlz59+mT48OEZOnRoBgwYkG233TbbbrttOnfunOXLl2fp0qWZN29eHn300UybNi0vvvhiktQC9mq1mo9+9KM57bTTSjm5bbfdNmeeeWbOPPPM9e4fNmxYbrzxxrcc3759+5x00kk56aSTSqkHAAAAAIC2ZaND9o4dO+a73/1uzj333Nx00021u8+r1Wrmz5+fBQsW5Fe/+tVfnWftsjBr12CvVqsZN25czjzzzE1aJgYAAAAAADaXQml2x44dc/bZZ2fKlCnp3r177U70vwzc3+4naR6uv/vd786FF16Y8847z1IsAAAAAABsNTb6Tva/NGbMmBx44IH56U9/mh/+8Id54YUXavvWBu7/118G7e9973vzT//0T/nsZz+brl27bkopAAAAAACw2W1SyJ4kXbp0yec///mMHz8+f/zjH/PII49kxowZef7557N06dIsXbo0K1asSJcuXbL99ttn1113zR577JH9998/w4YNK+McAAAAAACgVWxyyL5WpVLJ4MGD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y7Vw4UKj3bp1a40aNUre3t5yc3NTRkaGzp8/r2+//VZr167VtWvXjLF/+9vfNH78+Dzf16ZNmzR9+nSjbTKZ1KdPHz3xxBNq2bKlnJ2dlZCQoB9++EErVqzQ77//boxt1aqVNmzYkG/Zltdee01btmwx2idPnsxzXGpqqnr06KErV65I+rMm/wsvvKBevXqpUaNGqlKlihITE3Xy5EmtXLnS+PlJkouLi7Zv36677747z7kBAABQvrGTHQAAALBRnTp19I9//CPPY9euXVNERISmTZumhx9+WN27d9drr72m8PDwIt1NXRxcXV0VFhamyZMnq2nTpqpSpYrc3NzUu3dvff7553rssceMsenp6fneg7CwMOO1t7e3QkND1atXL9WpU0eOjo6qVq2avLy8NG7cOK1Zs8aqlMsnn3wii8WSa87Y2FgFBwcb7apVq+rDDz/UokWL5O/vr7vvvluOjo5q0KCBhgwZooiICPXp08cYf/ToUb333nt3cnsk/fmthb8S7JL03nvvaeLEiWrZsqWqVasms9msunXrqmvXrlq7dq369u1rjE1OTlZ4ePgdxwAAAICyiSQ7AAAAUAiDBg3SrFmzbluH/dy5c9qyZYumTp2qhx56SIMHD9aqVausErVlgclk0uLFi9WqVas8j1euXFnvvvuumjdvbvQdOHBAhw8fthqXnJxs7KKXpAEDBhT40M9WrVrpySefNNpJSUk6fvx4rnHLly/XjRs3jPbs2bMVEBCQ77yOjo5asGCBvL29jb7Q0FD98ccf+Z5ji5tjc3NzU/fu3fMdazKZNGPGDFWu/P+PwNq3b98dXR8AAABlF0l2AAAAoJCefPJJhYeHF5jsvdWRI0c0d+5cde/eXUuXLlVmZmYxRmi7Xr16qUOHDgWOMZvNevXVV636Nm3aVOA5+ZVduVlgYKCWLFmizZs366efflLLli2tjiclJenLL7802q1bt7bapZ4fBwcHjR071mhfv37dqiTMnUpKStLFixcLHOPq6qrFixdrzZo1+u677/T+++8X2fUBAABQtpBkBwAAAOxw//33a/ny5fr66681ZswYNWnSxKbz0tLSFBISomeeeaZM7GofPHiwTeM6d+5sVVM8MjLS6riLi4tq165ttD/77DOFhIQU+EDThg0bqlevXmrZsqWqV6+e6/jBgwetPowoaPf4rfz8/KzK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",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance = dp.Rebalance(verbose=False)\n",
    "new_X, new_y = rebalance.fit_resample(X, y)\n",
    "\n",
    "cohort_set.fit(X=new_X, y=new_y)\n",
    "subsets = cohort_set.get_subsets(new_X, new_y, apply_transform=False)\n",
    "\n",
    "print(new_y.value_counts())\n",
    "for key in subsets.keys():\n",
    "    print(subsets[key][\"y\"].value_counts())\n",
    "\n",
    "plot_value_counts_cohort(new_y, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the full dataset is now balanced. However, looking at each cohort separately, we noticed that we only made matters worse: we now have an even greater label imbalance inside each cohort. If we think of these cohorts as sensitive groups, that is, groups separated by sensitive features, *e.g.* gender, race, and nationality, and that we don't want our models to perform differently in one group compared to another, then this imbalance between cohorts is a scenario that needs to be fixed.\n",
    "\n",
    "### Balancing each cohort separately\n",
    "\n",
    "We'll now use the ``Rebalance`` class over each cohort separately, in order to obtain a set of balanced cohorts. This might aid us in obtaining fair models, that is, models that perform equally through cohorts. To do this, we'll use the ``CohortManager``, and we'll pass the ``Rebalance`` object to the ``transform_pipe`` parameter. We'll then call the ``fit_resample()`` method, implemented by the ``Rebalance`` class. Note that when using a pipeline with an object that implements the ``fit_resample()`` class, there can't be any transformers that implement the ``transform()`` and ``predict()`` methods, since these transformations serve different purposes: the former is used for rebalancing, that is, creating new instances in the ``X`` and ``y`` datasets, while the latter require that the number of instances of the dataset is kept fixed between each transformation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cohort_0 --- (`CN_1_num_1` == \"val1_0\")\n",
      "label\n",
      "0        119\n",
      "1         11\n",
      "dtype: int64\n",
      "\n",
      "cohort_1 --- (`CN_1_num_1` == \"val1_1\")\n",
      "label\n",
      "0        74\n",
      "1        31\n",
      "dtype: int64\n",
      "\n",
      "cohort_2 --- (`CN_1_num_1` == \"val1_2\")\n",
      "label\n",
      "1        495\n",
      "0          6\n",
      "dtype: int64\n",
      "\n",
      "cohort_3 --- (`CN_1_num_1` == \"val1_3\")\n",
      "label\n",
      "1        258\n",
      "0          6\n",
      "dtype: int64\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance_cohort = CohortManager(\n",
    "    transform_pipe=dp.Rebalance(verbose=False),\n",
    "    cohort_col=[\"CN_1_num_1\"]\n",
    ")\n",
    "new_X, new_y = rebalance_cohort.fit_resample(X, y)\n",
    "\n",
    "subsets = rebalance_cohort.get_subsets(new_X, new_y, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    946\n",
       "1    946\n",
       "Name: label, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_y.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, we now have a balanced full dataset, while also having balanced cohorts.\n",
    "\n",
    "## Balancing only a set of cohorts\n",
    "\n",
    "Suppose that we trained a model that is under-performing only for cohorts ``cohort_2`` and ``cohort_3``. In this case, we can keep the remaining cohorts unchanged, and balance only cohorts ``cohort_2`` and ``cohort_3``. To do this, we can use a separate pipeline for each cohort, where cohorts ``cohort_2`` and ``cohort_3`` use a pipeline comprised with only a ``Rebalance`` object, while the other two cohorts use an empty pipeline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cohort_0 --- (`CN_1_num_1` == \"val1_0\")\n",
      "label\n",
      "0        119\n",
      "1         11\n",
      "dtype: int64\n",
      "\n",
      "cohort_1 --- (`CN_1_num_1` == \"val1_1\")\n",
      "label\n",
      "0        74\n",
      "1        31\n",
      "dtype: int64\n",
      "\n",
      "cohort_2 --- (`CN_1_num_1` == \"val1_2\")\n",
      "label\n",
      "1        495\n",
      "0          6\n",
      "dtype: int64\n",
      "\n",
      "cohort_3 --- (`CN_1_num_1` == \"val1_3\")\n",
      "label\n",
      "1        258\n",
      "0          6\n",
      "dtype: int64\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance_cohort = CohortManager(\n",
    "    transform_pipe=[\n",
    "        [],\n",
    "        [],\n",
    "        [dp.Rebalance(verbose=False)],\n",
    "        [dp.Rebalance(verbose=False)],\n",
    "    ],\n",
    "    cohort_col=[\"CN_1_num_1\"]\n",
    ")\n",
    "new_X, new_y = rebalance_cohort.fit_resample(X, y)\n",
    "\n",
    "subsets = rebalance_cohort.get_subsets(new_X, new_y, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y, subsets, normalize=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.13 ('rai')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "5c68a259911a7290c7470d40c51cc61736c595673df171bc58d19d3fff2f3bed"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
