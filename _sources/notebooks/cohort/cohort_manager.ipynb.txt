{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Managing cohorts\n",
    "\n",
    "This library allows users to apply certain mitigations over a specific cohort, instead of ​applying it to the entire dataset. This is useful when, for example, two cohorts have a very different label distribution and we want to rebalance each cohort individually, instead of rebalancing the entire dataset. In some scenarios, applying a mitigation over each cohort separately is more advantageous than applying it over the whole dataset.\n",
    "\n",
    "In this notebook, we'll show how to apply different pipelines for each cohort separately. To accomplish this, we'll use the `CohortManager` class. This class allows us to create multiple pipelines (using transformers from `scikit-learn` or from the current library) and apply them to each cohort separately. All this is done following the ``fit()`` and ``transform()`` paradigms, ​similar  to the other mitigations from the `dataprocessing` module.\n",
    "\n",
    "First of all, let's import the ``CohortManager`` class, which is found in the `cohort` module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xgboost as xgb\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "from raimitigations.utils import create_dummy_dataset\n",
    "import raimitigations.dataprocessing as dp\n",
    "from raimitigations.cohort import CohortDefinition, CohortManager\n",
    "\n",
    "SEED = 42\n",
    "\n",
    "np.random.seed(SEED)\n",
    "random.seed(SEED)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Toy dataset\n",
    "\n",
    "Next, we'll create a toy dataset so we can showcase how the ``CohortManager`` operates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_df(with_null: bool = True):\n",
    "    np.random.seed(SEED)\n",
    "    random.seed(SEED)\n",
    "    def add_nan(vec, pct):\n",
    "        vec = list(vec)\n",
    "        nan_index = random.sample(range(len(vec)), int(pct * len(vec)))\n",
    "        for index in nan_index:\n",
    "            vec[index] = np.nan\n",
    "        return vec\n",
    "\n",
    "    df = create_dummy_dataset(\n",
    "        samples=1000,\n",
    "        n_features=2,\n",
    "        n_num_num=0,\n",
    "        n_cat_num=2,\n",
    "        n_cat_cat=0,\n",
    "        num_num_noise=[0.01, 0.05],\n",
    "        pct_change=[0.05, 0.1],\n",
    "    )\n",
    "    if with_null:\n",
    "        col_with_nan = [\"num_0\", \"num_1\", ]\n",
    "        for col in col_with_nan:\n",
    "            if col != \"label\":\n",
    "                df[col] = add_nan(df[col], 0.1)\n",
    "\n",
    "    X = df.drop(columns=[\"label\"])\n",
    "    y = df[[\"label\"]]\n",
    "\n",
    "    return X, y\n",
    "\n",
    "# -----------------------------------\n",
    "def get_model():\n",
    "    model = xgb.XGBClassifier(\n",
    "            objective=\"binary:logistic\",\n",
    "            learning_rate=0.1,\n",
    "            n_estimators=30,\n",
    "            max_depth=10,\n",
    "            colsample_bytree=0.7,\n",
    "            alpha=0.0,\n",
    "            reg_lambda=10.0,\n",
    "            nthreads=4,\n",
    "            verbosity=0,\n",
    "            use_label_encoder=False,\n",
    "        )\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.601034</td>\n",
       "      <td>2.535353</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.755945</td>\n",
       "      <td>-2.172352</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.354479</td>\n",
       "      <td>NaN</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.103090</td>\n",
       "      <td>-0.766515</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.753178</td>\n",
       "      <td>1.787514</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.713939</td>\n",
       "      <td>1.451639</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>1.420812</td>\n",
       "      <td>2.535627</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.844315</td>\n",
       "      <td>1.211294</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.974124</td>\n",
       "      <td>2.619258</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.641478</td>\n",
       "      <td>-0.243075</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1 CN_0_num_0 CN_1_num_1\n",
       "0    1.601034  2.535353     val0_0     val1_3\n",
       "1    1.755945 -2.172352     val0_1     val1_0\n",
       "2    2.354479       NaN     val0_0     val1_0\n",
       "3    4.103090 -0.766515     val0_1     val1_2\n",
       "4    1.753178  1.787514     val0_0     val1_1\n",
       "..        ...       ...        ...        ...\n",
       "995  2.713939  1.451639     val0_1     val1_2\n",
       "996  1.420812  2.535627     val0_0     val1_3\n",
       "997  3.844315  1.211294     val0_1     val1_2\n",
       "998  0.974124  2.619258     val0_0     val1_3\n",
       "999  4.641478 -0.243075     val0_1     val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = create_df()\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic scenario\n",
    "\n",
    "Next, we'll explore a basic scenario where the ``CohortManager`` can prove its usefulness. In this scenario, we want to apply an imputation, followed by a min max scaler over each cohort separately. Once again: this is useful when each cohort has different behaviors or distributions for a particular column, so applying an imputation based on the mean value of the column over each cohort separately will make more sense than using the mean of the column of the entire dataset, for example.\n",
    "\n",
    "The `CohortManager` requires two main parameters: a transformation pipeline and a list of cohort definitions. The latter is already explored and explained in the notebook showcasing the `CohortDefinition` class (which is used internally by the `CohortManager`). The former is simply a list of objects that implement the `fit()`, `transform()`, `predict()` paradigm, or the `fit_resample()` method (for rebalancing classes, such as the `Rebalance` class from the `dataprocessing` module, or the rebalance classes from the `imblearn` library).\n",
    "\n",
    "There are two constraints when defining the cohorts:\n",
    "\n",
    "1. The definitions must not allow any instance to belong to more than 1 cohort. If that happens, an error is raised;\n",
    "2. The definitions must include all instances (without repetition due to the previous constraint). Since in some cases it is difficult to define a set of conditions for the last cohort such that it includes all instances not belonging to any of the previous cohorts, we created an easier way to accomplish this: the condition list for the last cohort is allowed to be `None`. When this happens, this cohort is understood as being the one with all the remaining instances that don't belong to any of the other cohorts.\n",
    "\n",
    "Once we instantiate the `CohortManager` object, we can treat it similarly to other classes from the `dataprocessing` module: call the `fit()` and `transform()` methods. Internally, what will happen is the following: \n",
    "\n",
    "1. the cohort pipeline will be duplicated, such that we'll have one pipeline for each cohort, with different objects instantiation;\n",
    "2. during the `fit()` method, we'll cycle through all cohorts, and for each cohort:\n",
    "    * we'll first filter the dataset provided (in this case, `X` and `y`) so that it includes only instances that belong to the current cohort;\n",
    "    * with the subset of the current cohort, we'll call the `fit()` method for all the transformations in the cohort's pipeline (in the order in which they appear) using the subset dataset as input;\n",
    "3. during the ``transform()`` method, we'll use a similar approach, but instead of calling the `fit()` method for the transformers in each cohort's pipeline, this time we'll call the `transform()` method;\n",
    "    * if all cohorts are compatible with each other, that is, have the same columns after applying all transforms, then all subsets are concatenated together. The full dataset is then returned. If there are any inconsistencies between the cohorts, then we'll just add each subset into a list of subsets, and the final variable returned in this case is a list of subsets (we'll explore some examples ahead)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.616278</td>\n",
       "      <td>0.790075</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.340936</td>\n",
       "      <td>0.040024</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.910331</td>\n",
       "      <td>0.660560</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.816398</td>\n",
       "      <td>0.284064</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.675657</td>\n",
       "      <td>0.688320</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.534997</td>\n",
       "      <td>0.669115</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.545942</td>\n",
       "      <td>0.790112</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.763978</td>\n",
       "      <td>0.627393</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.371610</td>\n",
       "      <td>0.801491</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.925459</td>\n",
       "      <td>0.374928</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1 CN_0_num_0 CN_1_num_1\n",
       "0    0.616278  0.790075     val0_0     val1_3\n",
       "1    0.340936  0.040024     val0_1     val1_0\n",
       "2    0.910331  0.660560     val0_0     val1_0\n",
       "3    0.816398  0.284064     val0_1     val1_2\n",
       "4    0.675657  0.688320     val0_0     val1_1\n",
       "..        ...       ...        ...        ...\n",
       "995  0.534997  0.669115     val0_1     val1_2\n",
       "996  0.545942  0.790112     val0_0     val1_3\n",
       "997  0.763978  0.627393     val0_1     val1_2\n",
       "998  0.371610  0.801491     val0_0     val1_3\n",
       "999  0.925459  0.374928     val0_1     val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "]\n",
    "\n",
    "c1 = [ ['CN_0_num_0', '==', 'val0_1'], 'and', ['num_0', '>', 0.0] ]\n",
    "c2 = [ ['CN_0_num_0', '==', 'val0_0'], 'and', ['num_0', '>', 0.0] ]\n",
    "c3 = None\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "new_X = cohort_set.transform(X)\n",
    "new_X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pipelines that result in incompatible cohorts\n",
    "\n",
    "As previously mentioned, in some cases, the pipeline associated with one or more cohorts may result in a cohort incompatible with at least one of the other cohorts. For example, consider the case where we add a one-hot encoding transformation in the pipeline. This will probably result in each cohort having different columns, which are the columns created by the one-hot encoder (for example, in case one of the cohorts doesn't have all existing values in a categorical column that is being encoded). \n",
    "\n",
    "This is also valid for any other encoder method since categorical encoders require a list of all valid categorical values in the column before creating the encoding. However, for the ordinal encoder, for example, it is not easy to automatically identify an incompatibility between the cohorts, since the ordinal encoder doesn't change the number of columns. To remedy this (at least for the mitigations from the `dataprocessing` module), we implemented a way for the `CohortManager` to query if a given class results in incompatible cohorts or not. Therefore, if we use the `EncoderOrdinal` from the ``dataprocessing`` module in the pipeline, we'll be able to automatically identify that each cohort will be incompatible between each other, and thus, the ``transform()`` method will return a dictionary of subsets instead of a single dataset. This dictionary will have a key assigned to each of the cohorts' names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: the transformations used over the cohorts resulted in each cohort having different columns. The transform() method will return a list of transformed subsets (one for each cohort).\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dict_keys(['cohort_0', 'cohort_1', 'cohort_2'])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "    dp.EncoderOrdinal(verbose=False)\n",
    "]\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "subset_dict = cohort_set.transform(X)\n",
    "subset_dict.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.340936</td>\n",
       "      <td>0.040024</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.816398</td>\n",
       "      <td>0.284064</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.402537</td>\n",
       "      <td>0.692783</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.299020</td>\n",
       "      <td>0.843083</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.626370</td>\n",
       "      <td>0.180212</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0.371002</td>\n",
       "      <td>0.696937</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>0.358171</td>\n",
       "      <td>0.089578</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.534997</td>\n",
       "      <td>0.669115</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.763978</td>\n",
       "      <td>0.627393</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.925459</td>\n",
       "      <td>0.374928</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>542 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1  CN_0_num_0  CN_1_num_1\n",
       "1    0.340936  0.040024           0           0\n",
       "3    0.816398  0.284064           0           2\n",
       "5    0.402537  0.692783           0           3\n",
       "8    0.299020  0.843083           0           1\n",
       "10   0.626370  0.180212           0           2\n",
       "..        ...       ...         ...         ...\n",
       "990  0.371002  0.696937           0           2\n",
       "991  0.358171  0.089578           0           0\n",
       "995  0.534997  0.669115           0           2\n",
       "997  0.763978  0.627393           0           2\n",
       "999  0.925459  0.374928           0           1\n",
       "\n",
       "[542 rows x 4 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subset_dict['cohort_0']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding estimators to the pipeline\n",
    "\n",
    "The pipelines are not limited to having only transformers, as we can also add estimators to them. Some considerations when adding an estimator into the pipeline:\n",
    "\n",
    "1. The estimator must be the last object in the pipeline (this implies that we can only have 1 estimator in each pipeline);\n",
    "2. The estimator must implement at least the `predict()` method. It can also implement the `predict_proba()` method, but the latter is not mandatory;\n",
    "3. If the pipeline is comprised of a set of transformers (that implement the `transform()` method) and the estimator (that is, the pipeline doesn't contain *only* the estimator), then the cohort manager object will be allowed to call the `transform()` and `predict()` methods (and the `predict_proba()` as well, but only if the estimator implements this method)\n",
    "    * in this case, the `transform()` method will call only the `transform()` methods of the transformers up until the estimator, since this latter doesn't have a `transform()` method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/xgboost/sklearn.py:1421: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<raimitigations.cohort.cohort_manager.CohortManager at 0x7fc074d77d00>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "    dp.EncoderOrdinal(verbose=False),\n",
    "    get_model()\n",
    "]\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When calling the ``transform()`` method, it will return a list of subsets, since the ``EncoderOrdinal`` results in incompatible cohorts (as previously mentioned). The ``transform()`` method will run the ``transform()`` of all transformers up until we get to the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: the transformations used over the cohorts resulted in each cohort having different columns. The transform() method will return a list of transformed subsets (one for each cohort).\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.340936</td>\n",
       "      <td>0.040024</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.816398</td>\n",
       "      <td>0.284064</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.402537</td>\n",
       "      <td>0.692783</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.299020</td>\n",
       "      <td>0.843083</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.626370</td>\n",
       "      <td>0.180212</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0.371002</td>\n",
       "      <td>0.696937</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>0.358171</td>\n",
       "      <td>0.089578</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.534997</td>\n",
       "      <td>0.669115</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.763978</td>\n",
       "      <td>0.627393</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.925459</td>\n",
       "      <td>0.374928</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>542 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1  CN_0_num_0  CN_1_num_1\n",
       "1    0.340936  0.040024           0           0\n",
       "3    0.816398  0.284064           0           2\n",
       "5    0.402537  0.692783           0           3\n",
       "8    0.299020  0.843083           0           1\n",
       "10   0.626370  0.180212           0           2\n",
       "..        ...       ...         ...         ...\n",
       "990  0.371002  0.696937           0           2\n",
       "991  0.358171  0.089578           0           0\n",
       "995  0.534997  0.669115           0           2\n",
       "997  0.763978  0.627393           0           2\n",
       "999  0.925459  0.374928           0           1\n",
       "\n",
       "[542 rows x 4 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subset_dict = cohort_set.transform(X)\n",
    "subset_dict['cohort_0']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can then call the ``predict()`` method. Since the predictions will have the same format regardless if the cohorts are compatible or not, then the ``predict()`` and ``predict_proba()`` will always return a single prediction array by default. However, this behavior can be changed through the ``split_pred`` parameter for both of these methods: if ``split_pred = False``, then a single prediction array is returned (this is the default behavior), but if ``split_pred = True``, then a dictionary of predictions is returned instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000,)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_arr = cohort_set.predict(X)\n",
    "pred_arr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cohort_0: (542,)\n",
      "cohort_1: (341,)\n",
      "cohort_2: (117,)\n"
     ]
    }
   ],
   "source": [
    "pred_dict = cohort_set.predict(X, split_pred=True)\n",
    "for cohort_name in pred_dict.keys():\n",
    "    print(f\"{cohort_name}: {pred_dict[cohort_name].shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, we can also call the ``predict_proba()`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 2)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_arr = cohort_set.predict_proba(X)\n",
    "pred_arr.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that if none of the transformers in the pipeline result in incompatible cohorts, then the `predict()` method will return a single array of predictions, just like a regular estimator. To demonstrate this, let's remove the categorical columns of the dataset (so that the estimator works without an encoder). Let's also redefine our cohorts so that we don't reference any of the categorical columns removed.\n",
    "\n",
    "When calling the ``transform()`` method in this scenario, it will return a single dataset, as previously shown."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/xgboost/sklearn.py:1421: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.028385</td>\n",
       "      <td>0.891836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.072545</td>\n",
       "      <td>0.048710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.243165</td>\n",
       "      <td>0.623450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.741629</td>\n",
       "      <td>0.300489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.071756</td>\n",
       "      <td>0.757902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.345633</td>\n",
       "      <td>0.697749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.971967</td>\n",
       "      <td>0.781923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.667862</td>\n",
       "      <td>0.654704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.806418</td>\n",
       "      <td>0.792162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.895103</td>\n",
       "      <td>0.394234</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1\n",
       "0    0.028385  0.891836\n",
       "1    0.072545  0.048710\n",
       "2    0.243165  0.623450\n",
       "3    0.741629  0.300489\n",
       "4    0.071756  0.757902\n",
       "..        ...       ...\n",
       "995  0.345633  0.697749\n",
       "996  0.971967  0.781923\n",
       "997  0.667862  0.654704\n",
       "998  0.806418  0.792162\n",
       "999  0.895103  0.394234\n",
       "\n",
       "[1000 rows x 2 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_num = X.drop(columns=['CN_0_num_0', 'CN_1_num_1'])\n",
    "\n",
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "    get_model()\n",
    "]\n",
    "\n",
    "c1 = [ ['num_0', '>', 1.5] ]\n",
    "c2 = None\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2]\n",
    ")\n",
    "cohort_set.fit(X=X_num, y=y)\n",
    "new_X = cohort_set.transform(X_num)\n",
    "new_X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The same applies to the ``predict()`` method, where it will return a single array of predictions this time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000,)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = cohort_set.predict(X_num)\n",
    "pred.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting a list of subsets\n",
    "\n",
    "Sometimes we just want to break a new dataset into subsets, where we have one subset for each of the cohorts being used. We can do this using the ``get_subsets()`` method from the ``CohortManager`` class. This method accepts three parameters:\n",
    "\n",
    "1. A dataset that has at least the columns used by the cohorts' filters (this means that the dataset may also have other columns not used by the filters);\n",
    "2. A dataset containing only the label column (`y` dataset). This parameter is optional, and it is useful when we want to filter a feature dataset (`X`) and a label dataset (`y`), and get a list of subsets from ``X`` and ``y``;\n",
    "3. A boolean value indicating if we want to apply the transformations pipeline used for each cohort or not. If set to True, this method will behave similarly to the `transform()` method, with the main difference being that this method will always return a list of subsets, even if the cohorts are compatible with each other.\n",
    "\n",
    "The returned variable is a dictionary where the primary keys are the name of the cohorts, and the secondary keys are:\n",
    "\n",
    "* `X`: the subset of the features dataset;\n",
    "* `y`: the subset of the label dataset. This key will only be returned if the `y` dataset is passed in the method's call.\n",
    "\n",
    "The following cell shows an example of how to call this method without applying the transformations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.601034</td>\n",
       "      <td>2.535353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.755945</td>\n",
       "      <td>-2.172352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.354479</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.103090</td>\n",
       "      <td>-0.766515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.753178</td>\n",
       "      <td>1.787514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>1.904364</td>\n",
       "      <td>1.611914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>1.841023</td>\n",
       "      <td>-1.886888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.713939</td>\n",
       "      <td>1.451639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.844315</td>\n",
       "      <td>1.211294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.641478</td>\n",
       "      <td>-0.243075</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>637 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1\n",
       "0    1.601034  2.535353\n",
       "1    1.755945 -2.172352\n",
       "2    2.354479       NaN\n",
       "3    4.103090 -0.766515\n",
       "4    1.753178  1.787514\n",
       "..        ...       ...\n",
       "990  1.904364  1.611914\n",
       "991  1.841023 -1.886888\n",
       "995  2.713939  1.451639\n",
       "997  3.844315  1.211294\n",
       "999  4.641478 -0.243075\n",
       "\n",
       "[637 rows x 2 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets = cohort_set.get_subsets(X_num, apply_transform=False)\n",
    "subsets['cohort_0']['X']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['cohort_0', 'cohort_1'])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now compare the resulting subsets when setting the ``apply_transform`` to True:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.028385</td>\n",
       "      <td>0.891836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.072545</td>\n",
       "      <td>0.048710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.243165</td>\n",
       "      <td>0.623450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.741629</td>\n",
       "      <td>0.300489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.071756</td>\n",
       "      <td>0.757902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0.114854</td>\n",
       "      <td>0.726453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>0.096797</td>\n",
       "      <td>0.099836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.345633</td>\n",
       "      <td>0.697749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.667862</td>\n",
       "      <td>0.654704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.895103</td>\n",
       "      <td>0.394234</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>637 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1\n",
       "0    0.028385  0.891836\n",
       "1    0.072545  0.048710\n",
       "2    0.243165  0.623450\n",
       "3    0.741629  0.300489\n",
       "4    0.071756  0.757902\n",
       "..        ...       ...\n",
       "990  0.114854  0.726453\n",
       "991  0.096797  0.099836\n",
       "995  0.345633  0.697749\n",
       "997  0.667862  0.654704\n",
       "999  0.895103  0.394234\n",
       "\n",
       "[637 rows x 2 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets = cohort_set.get_subsets(X_num, apply_transform=True)\n",
    "subsets['cohort_0']['X']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['X'])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets['cohort_0'].keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the previous cell, we can see that we only have the `X` key for each cohort, since we didn't pass the `y` dataset as a parameter to the method. Let's now look at an example where we want the subsets of both the features and labels (X and y):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['X', 'y'])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets = cohort_set.get_subsets(X_num, y, apply_transform=True)\n",
    "subsets['cohort_0'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "cohort_0\n",
      "(637, 2)\n",
      "(637, 1)\n",
      "\n",
      "cohort_1\n",
      "(363, 2)\n",
      "(363, 1)\n"
     ]
    }
   ],
   "source": [
    "for key in subsets.keys():\n",
    "    print(f\"\\n{key}\")\n",
    "    print(subsets[key][\"X\"].shape)\n",
    "    print(subsets[key][\"y\"].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naming the cohorts\n",
    "\n",
    "So far, we created a list of conditions for each cohort and passed that to the ``CohortManager`` without specifying the cohort's name. In that case, the cohorts will be named automatically. This name is later used in ​the subsets dictionary returned by the ``get_subsets()`` method, as we've shown in the previous subsection. We can provide a specific name to each cohort by passing a dictionary of condition lists to the ``CohortManager`` instead of passing a list of conditions. The following cell demonstrates this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['Large num_0', 'Remaining'])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def={\"Large num_0\":c1, \"Remaining\":c2}\n",
    ")\n",
    "cohort_set.fit(X_num, y)\n",
    "subsets = cohort_set.get_subsets(X_num, y, apply_transform=True)\n",
    "subsets.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Handling datasets without column names\n",
    "\n",
    "When handling a dataset without column names, we can use the column indices as the column identifier in the conditions list. However, the indices must be passed as a string, not a number. In the following cell, we demonstrate an example where we create a set of conditions using the column indices. Note that this approach will only work if the dataset doesn't have any column names. If the dataset has valid column names, then these names should be used instead of the indices.\n",
    "\n",
    "Note that in the following example, we are not passing a list of transformations to the ``transform_pipe`` parameter. Instead, we are passing a single transformer. This is also allowed, and what will happen in the background is that an empty list will be created for each cohort, and this transformer will be copied and added to each of these lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.616278</td>\n",
       "      <td>0.790075</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.340936</td>\n",
       "      <td>0.040024</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.910331</td>\n",
       "      <td>NaN</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.816398</td>\n",
       "      <td>0.284064</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.675657</td>\n",
       "      <td>0.688320</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.534997</td>\n",
       "      <td>0.669115</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.545942</td>\n",
       "      <td>0.790112</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.763978</td>\n",
       "      <td>0.627393</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.371610</td>\n",
       "      <td>0.801491</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.925459</td>\n",
       "      <td>0.374928</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0         1       2       3\n",
       "0    0.616278  0.790075  val0_0  val1_3\n",
       "1    0.340936  0.040024  val0_1  val1_0\n",
       "2    0.910331       NaN  val0_0  val1_0\n",
       "3    0.816398  0.284064  val0_1  val1_2\n",
       "4    0.675657  0.688320  val0_0  val1_1\n",
       "..        ...       ...     ...     ...\n",
       "995  0.534997  0.669115  val0_1  val1_2\n",
       "996  0.545942  0.790112  val0_0  val1_3\n",
       "997  0.763978  0.627393  val0_1  val1_2\n",
       "998  0.371610  0.801491  val0_0  val1_3\n",
       "999  0.925459  0.374928  val0_1  val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_X = X.copy()\n",
    "new_y = y.copy()\n",
    "new_X.columns = [i for i in range(new_X.shape[1])]\n",
    "new_y.columns = [i for i in range(new_y.shape[1])]\n",
    "\n",
    "c1 = [ ['2', '==', 'val0_1'], 'and', ['0', '>', 0.0] ]\n",
    "c2 = [ ['2', '==', 'val0_0'], 'and', ['0', '>', 0.0] ]\n",
    "c3 = None\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=new_X, y=new_y)\n",
    "new_X = cohort_set.transform(new_X)\n",
    "new_X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using CohortManager with Sci-Kit Learn's Pipeline\n",
    "\n",
    "`scikit-learn`'s `Pipeline` class is a well-established approach for creating pipelines. Therefore, the ``CohortManager`` class was designed to work with ``Pipeline``, allowing users to create even more complex data processing pipelines.\n",
    "\n",
    "The following cell shows an example of how to create a ``Pipeline`` using an instance of the ``CohortManager`` class. The pipeline created in this example will do the following:\n",
    "\n",
    "1. Run the ``BasicImputer`` and ``DataMinMaxScaler`` (in that order) over each cohort separately. Notice that each cohort will have a separate object from these classes. Since these transformations result in compatible cohorts, the ``transform()`` method will return a single dataset;\n",
    "2. Run the ``EncoderOrdinal`` over the dataset returned by the ``CohortManager`` (that is, the encoding is done over the entire dataset, not over each cohort individually);\n",
    "3. Fit the model (an XGBoost in this case) over the dataset processed by the ``CohortManager`` and ``EncoderOrdinal``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/xgboost/sklearn.py:1421: UserWarning: `use_label_encoder` is deprecated in 1.7.0.\n",
      "  warnings.warn(\"`use_label_encoder` is deprecated in 1.7.0.\")\n"
     ]
    }
   ],
   "source": [
    "cohort_pipeline = [\n",
    "    dp.BasicImputer(verbose=False),\n",
    "    dp.DataMinMaxScaler(verbose=False),\n",
    "]\n",
    "\n",
    "c1 = [ ['CN_0_num_0', '==', 'val0_1'], 'and', ['num_0', '>', 0.0] ]\n",
    "c2 = [ ['CN_0_num_0', '==', 'val0_0'], 'and', ['num_0', '>', 0.0] ]\n",
    "c3 = None\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=cohort_pipeline,\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "\n",
    "skpipe = Pipeline([\n",
    "    (\"cohort_preprocess\", cohort_set),\n",
    "    (\"encoder\", dp.EncoderOrdinal(verbose=False)),\n",
    "    (\"model\", get_model())\n",
    "])\n",
    "skpipe.fit(X, y)\n",
    "pred = skpipe.predict_proba(X)\n",
    "pred = skpipe.predict(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fetching the queries used for each cohort\n",
    "\n",
    "The ``get_queries()`` method returns a dictionary with the queries used for each cohort."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_1\") and (`num_0` > 0.0)',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_0\") and (`num_0` > 0.0)',\n",
       " 'cohort_2': '((`CN_0_num_0` != \"val0_1\") or ((`num_0` <= 0.0) or (`num_0`.isnull()))) and ((`CN_0_num_0` != \"val0_0\") or ((`num_0` <= 0.0) or (`num_0`.isnull())))'}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating cohorts based on a set of columns\n",
    "\n",
    "In some cases, users might be interested in creating one cohort for each possible value in a given column (for example, if a dataset has a **gender** column, we might be interested in creating one cohort for each gender). To avoid the cumbersome task of creating one condition list for each value in a given column, we ``CohortManager`` use the ``cohort_col`` parameter instead of the ``cohort_def`` during the instantiation of the object. Here are more details about these two parameters:\n",
    "\n",
    "* ``cohort_def``: already explored in the previous subsections. Accepts a list of condition lists (one for each cohort), or a dictionary of condition lists;\n",
    "* ``cohort_col``: accepts a list of column names or indices, from which one cohort is created for each unique combination of values for these columns.\n",
    "\n",
    "In the following example, we show how to create a set of cohorts based on the ``CN_0_num_0`` column. We then use the ``get_queries()`` method to look at the cohorts created."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_0\")',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_1\")'}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_col=[\"CN_0_num_0\"]\n",
    ")\n",
    "cohort_set.fit(X, y)\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also use the column indices instead of their names:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_0\")',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_1\")'}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_col=[2]\n",
    ")\n",
    "cohort_set.fit(X, y)\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that in both examples we had to call the ``fit()`` method before calling the ``get_queries()`` method. This is necessary because, when using the ``cohort_col`` parameter instead of the ``cohort_def``, the cohorts can only be created when a valid dataset is provided. Since we didn't provide a dataset in the constructor method, then the cohorts are only built when the fit method is called. In the following cell we provide the dataset in the constructor method just to show this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_0\")',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_1\")'}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_col=[2],\n",
    "    X=X, y=y\n",
    ")\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Just to better demonstrate this, let's now use the ``cohort_def`` parameter, while not providing the datasets in the constructor method. In this case, we can also call the ``get_queries()`` method before calling the ``fit()`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_1\") and (`num_0` > 0.0)',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_0\") and (`num_0` > 0.0)',\n",
       " 'cohort_2': '((`CN_0_num_0` != \"val0_1\") or ((`num_0` <= 0.0) or (`num_0`.isnull()))) and ((`CN_0_num_0` != \"val0_0\") or ((`num_0` <= 0.0) or (`num_0`.isnull())))'}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As previously mentioned, the ``cohort_col`` parameter accepts a list of column names, not a single column. When more than one column is provided, we create one cohort for each combination of unique values in these columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': '(`CN_0_num_0` == \"val0_0\") and (`CN_1_num_1` == \"val1_0\")',\n",
       " 'cohort_1': '(`CN_0_num_0` == \"val0_0\") and (`CN_1_num_1` == \"val1_1\")',\n",
       " 'cohort_2': '(`CN_0_num_0` == \"val0_0\") and (`CN_1_num_1` == \"val1_2\")',\n",
       " 'cohort_3': '(`CN_0_num_0` == \"val0_0\") and (`CN_1_num_1` == \"val1_3\")',\n",
       " 'cohort_4': '(`CN_0_num_0` == \"val0_1\") and (`CN_1_num_1` == \"val1_0\")',\n",
       " 'cohort_5': '(`CN_0_num_0` == \"val0_1\") and (`CN_1_num_1` == \"val1_1\")',\n",
       " 'cohort_6': '(`CN_0_num_0` == \"val0_1\") and (`CN_1_num_1` == \"val1_2\")',\n",
       " 'cohort_7': '(`CN_0_num_0` == \"val0_1\") and (`CN_1_num_1` == \"val1_3\")'}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_col=[\"CN_0_num_0\", \"CN_1_num_1\"]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving and loading the conditions used for the cohorts\n",
    "\n",
    "The ``save_cohorts()`` method saves the list of conditions used by all cohorts into a JSON file. This way, users are able to then reuse these condition lists in another ``CohortManager`` object. The ``save_cohorts()`` has the same conditions as the ``get_queries()`` method: if using ``cohort_col``, then we must either pass the datasets in the constructor method, or call the ``fit()`` method prior to calling the ``save_cohorts()`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.DataMinMaxScaler(verbose=False),\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "\n",
    "json_files = [\n",
    "    \"json_files/CohortManager_tutorial/cht_0.json\",\n",
    "    \"json_files/CohortManager_tutorial/cht_1.json\",\n",
    "    \"json_files/CohortManager_tutorial/cht_2.json\",\n",
    "]\n",
    "cohort_set.save_cohorts(json_files)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The JSON file saved has the following structure (note that it follows the same JSON structure used by the [raiwidgets library](https://github.com/microsoft/responsible-ai-toolbox/blob/main/notebooks/responsibleaidashboard/responsibleaidashboard-census-classification-model-debugging.ipynb)):\n",
    "\n",
    "![cohort](./imgs/cohort.png)\n",
    "\n",
    "We can then create a new ``CohortManager`` object and pass the list of paths to the JSON files containing the cohort definitions to the ``cohort_json_files`` parameter. After loading the cohort files, we can verify that the same conditions are being used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': \"((`CN_0_num_0` in ['val0_1']) and (`num_0` > 0.0))\",\n",
       " 'cohort_1': \"((`CN_0_num_0` in ['val0_0']) and (`num_0` > 0.0))\",\n",
       " 'cohort_2': \"(((`CN_0_num_0` not in ['val0_1']) or ((`num_0` <= 0.0) or (`num_0`.isnull()))) and ((`CN_0_num_0` not in ['val0_0']) or ((`num_0` <= 0.0) or (`num_0`.isnull()))))\"}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.BasicImputer(verbose=False),\n",
    "    cohort_json_files=json_files\n",
    ")\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have the file for only a few of the cohorts that needs to be created, but don't want to create a file for the cohort with the remaining instances, you can proceed similarly to what we do with the ``cohort_def`` parameter: the last json file passed through the ``cohort_json_files`` can be a ``None`` value, which indicates that that cohort should include all instances that doesn't belong to any of the other cohorts.\n",
    "\n",
    "To demonstrate this, suppose that we only have the json files for ``cohort_0`` and ``cohort_1``. To load these files using the ``CohortManager``, we should do the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cohort_0': \"((`CN_0_num_0` in ['val0_1']) and (`num_0` > 0.0))\",\n",
       " 'cohort_1': \"((`CN_0_num_0` in ['val0_0']) and (`num_0` > 0.0))\",\n",
       " 'Remaining Instances': \"(((`CN_0_num_0` not in ['val0_1']) or ((`num_0` <= 0.0) or (`num_0`.isnull())))) and (((`CN_0_num_0` not in ['val0_0']) or ((`num_0` <= 0.0) or (`num_0`.isnull()))))\"}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "json_files = [\n",
    "    \"json_files/CohortManager_tutorial/cht_0.json\",\n",
    "    \"json_files/CohortManager_tutorial/cht_1.json\",\n",
    "    None\n",
    "]\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=dp.BasicImputer(verbose=False),\n",
    "    cohort_json_files=json_files\n",
    ")\n",
    "queries = cohort_set.get_queries()\n",
    "queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using different pipelines for each cohort\n",
    "\n",
    "So far, every time we created an instance of the ``CohortMManager`` class, the same pipeline was used over all cohorts (different instances of the same pipeline, given that the ``fit()`` must be called using only the subset associated to a given cohort). However, there might be some scenarios where we might be interested in using different transformations for each cohort. We won't cover here these scenarios. Instead, here we'll show how to create different pipelines for each cohort.\n",
    "\n",
    "There are four scenarios associated with the ``transform_pipe`` parameter:\n",
    "\n",
    "1. **An empty list or ``None`` is provided:** in this case, the ``CohortManager`` won't apply any transformations over the dataset. The ``transform()`` method will simply return the dataset provided;\n",
    "2. **A single transformer is provided:** in this case, this single transformer is placed in a list (a list with a single transformer), which is then replicated such that each cohort has its own list of transformations (pipeline);\n",
    "3. **A list of transformers is provided:** in this case, this pipeline is replicated for each cohort;\n",
    "4. **A list of pipelines is provided:** a list of pipelines is basically a list of lists of transformations. In this case, the list of pipelines should have one pipeline for each cohort created, that is, the length of the ``transform_pipe`` parameter should be the same as the number of cohorts created. The pipelines will be assigned to each cohort following the same order as the ``cohort_def`` parameter (depicted in the following example).\n",
    "\n",
    "In the following example, we'll create 3 cohorts and 3 pipelines: the first pipeline will contain only a ``DataMinMaxScaler`` transformer, the second pipeline contains only a ``DataPowerTransformer`` transformer, and the third pipeline is empty, that is, it doesn't apply any transformations over the data. These pipelines will be associated with cohorts ``c1``, ``c2``, and ``c3`` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.601034</td>\n",
       "      <td>2.535353</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.755945</td>\n",
       "      <td>-2.172352</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.354479</td>\n",
       "      <td>NaN</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.103090</td>\n",
       "      <td>-0.766515</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.753178</td>\n",
       "      <td>1.787514</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.713939</td>\n",
       "      <td>1.451639</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>1.420812</td>\n",
       "      <td>2.535627</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.844315</td>\n",
       "      <td>1.211294</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.974124</td>\n",
       "      <td>2.619258</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.641478</td>\n",
       "      <td>-0.243075</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1 CN_0_num_0 CN_1_num_1\n",
       "0    1.601034  2.535353     val0_0     val1_3\n",
       "1    1.755945 -2.172352     val0_1     val1_0\n",
       "2    2.354479       NaN     val0_0     val1_0\n",
       "3    4.103090 -0.766515     val0_1     val1_2\n",
       "4    1.753178  1.787514     val0_0     val1_1\n",
       "..        ...       ...        ...        ...\n",
       "995  2.713939  1.451639     val0_1     val1_2\n",
       "996  1.420812  2.535627     val0_0     val1_3\n",
       "997  3.844315  1.211294     val0_1     val1_2\n",
       "998  0.974124  2.619258     val0_0     val1_3\n",
       "999  4.641478 -0.243075     val0_1     val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_0</th>\n",
       "      <th>num_1</th>\n",
       "      <th>CN_0_num_0</th>\n",
       "      <th>CN_1_num_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.560649</td>\n",
       "      <td>0.730360</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.369841</td>\n",
       "      <td>0.231139</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.089526</td>\n",
       "      <td>NaN</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.103090</td>\n",
       "      <td>-0.766515</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.753178</td>\n",
       "      <td>1.787514</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.713939</td>\n",
       "      <td>1.451639</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.524491</td>\n",
       "      <td>0.730402</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.844315</td>\n",
       "      <td>1.211294</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.434872</td>\n",
       "      <td>0.743060</td>\n",
       "      <td>val0_0</td>\n",
       "      <td>val1_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.641478</td>\n",
       "      <td>-0.243075</td>\n",
       "      <td>val0_1</td>\n",
       "      <td>val1_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        num_0     num_1 CN_0_num_0 CN_1_num_1\n",
       "0    0.560649  0.730360     val0_0     val1_3\n",
       "1    0.369841  0.231139     val0_1     val1_0\n",
       "2    1.089526       NaN     val0_0     val1_0\n",
       "3    4.103090 -0.766515     val0_1     val1_2\n",
       "4    1.753178  1.787514     val0_0     val1_1\n",
       "..        ...       ...        ...        ...\n",
       "995  2.713939  1.451639     val0_1     val1_2\n",
       "996  0.524491  0.730402     val0_0     val1_3\n",
       "997  3.844315  1.211294     val0_1     val1_2\n",
       "998  0.434872  0.743060     val0_0     val1_3\n",
       "999  4.641478 -0.243075     val0_1     val1_1\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = create_df()\n",
    "\n",
    "c1 = [ ['CN_1_num_1', '==', 'val1_3'] ]\n",
    "c2 = [ ['CN_1_num_1', '==', 'val1_0'] ]\n",
    "c3 = None\n",
    "\n",
    "c1_pipe = [dp.DataMinMaxScaler(verbose=False)]\n",
    "c2_pipe = [dp.DataPowerTransformer(verbose=False)]\n",
    "c3_pipe = []\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    transform_pipe=[c1_pipe, c2_pipe, c3_pipe],\n",
    "    cohort_def=[c1, c2, c3]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "new_X = cohort_set.transform(X)\n",
    "new_X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use Rebalance over each cohort separately\n",
    "\n",
    "Rebalancing a dataset is not always a trivial task. In some cases, we might have a class imbalance in the whole dataset, but different cohorts of this dataset depict different imbalance distributions. In such a scenario, rebalancing the full dataset might result in an even greater imbalance for a set of cohorts, even though the full dataset is now balanced. Therefore, we might want to rebalance each cohort separately, in order to obtain a balanced dataset and balanced cohorts.\n",
    "\n",
    "In this subsection, we'll explore how the ``CohortManager`` can easily help us achieve this goal.\n",
    "\n",
    "First of all, let's start defining a function that plots a graph with the label distribution for the full dataset, as well as for each cohort."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "def plot_value_counts_cohort(y_full, subsets, normalize = True):\n",
    "    plt.figure().clear()\n",
    "    plt.close()\n",
    "    plt.cla()\n",
    "    plt.clf()\n",
    "    fig = plt.gcf()\n",
    "    fig.set_size_inches(18, 10)\n",
    "    sns.set_theme(style=\"whitegrid\")\n",
    "    if normalize:\n",
    "        plt.ylim(0, 1)\n",
    "    #plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0, fontsize=23)\n",
    "\n",
    "    value_count = y_full.value_counts(normalize=normalize)\n",
    "\n",
    "    subsets_col = ['full df', 'full df']\n",
    "    counts_col = [value_count[0], value_count[1]]\n",
    "    label_col = [0, 1]\n",
    "\n",
    "    for key in subsets.keys():\n",
    "        value_count = subsets[key][\"y\"].value_counts(normalize=normalize)\n",
    "        subsets_col += [key, key]\n",
    "        counts_col += [value_count[0], value_count[1]]\n",
    "        label_col += [0, 1]\n",
    "\n",
    "    count_df = pd.DataFrame({\"subsets\":subsets_col, \"label\":label_col, \"counts\":counts_col})\n",
    "    \n",
    "    y_label = \"Occurrences\"\n",
    "    if normalize:\n",
    "        y_label = \"Fraction\"\n",
    "\n",
    "    ax = sns.barplot(x=\"subsets\", y=\"counts\", hue=\"label\", data=count_df)\n",
    "    ax.set_xlabel(\"Subsets\", fontsize=30)\n",
    "    ax.set_ylabel(y_label, fontsize=30)\n",
    "    #ax.tick_params(labelsize=15)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we'll create a ``CohortManager`` just to obtain the cohorts of interest and plot their distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label\n",
      "1        795\n",
      "0        205\n",
      "dtype: int64\n",
      "label\n",
      "0        119\n",
      "1         11\n",
      "dtype: int64\n",
      "label\n",
      "0        74\n",
      "1        31\n",
      "dtype: int64\n",
      "label\n",
      "1        495\n",
      "0          6\n",
      "dtype: int64\n",
      "label\n",
      "1        258\n",
      "0          6\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y = create_df(with_null=False)\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    cohort_col=[\"CN_1_num_1\"]\n",
    ")\n",
    "cohort_set.fit(X=X, y=y)\n",
    "subsets = cohort_set.get_subsets(X, y, apply_transform=False)\n",
    "\n",
    "print(y.value_counts())\n",
    "for key in subsets.keys():\n",
    "    print(subsets[key][\"y\"].value_counts())\n",
    "\n",
    "plot_value_counts_cohort(y, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the full dataset has a great imbalance, where we have a considerably larger number of occurrences of the ``1`` class in relation to the ``0`` class. This imbalance is even greater for cohorts ``cohort_2`` and ``cohort_3``, while for cohorts ``cohort_0`` and ``cohort_1`` this imbalance is inverted: there are a lot more instances from the ``0`` class when compared to the ``1`` class.\n",
    "\n",
    "### Balancing the full dataset\n",
    "\n",
    "Let's now rebalance the full dataset. Here, We use the ``Rebalance`` class from the ``dataprocessing`` module. Afterward, we plot the label distributions once more to see if our problem is solved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/preprocessing/_encoders.py:808: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    795\n",
      "0    795\n",
      "Name: label, dtype: int64\n",
      "0    463\n",
      "1     11\n",
      "Name: label, dtype: int64\n",
      "0    313\n",
      "1     31\n",
      "Name: label, dtype: int64\n",
      "1    495\n",
      "0      8\n",
      "Name: label, dtype: int64\n",
      "1    258\n",
      "0     11\n",
      "Name: label, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance = dp.Rebalance(verbose=False)\n",
    "new_X, new_y = rebalance.fit_resample(X, y)\n",
    "\n",
    "cohort_set.fit(X=new_X, y=new_y)\n",
    "subsets = cohort_set.get_subsets(new_X, new_y, apply_transform=False)\n",
    "\n",
    "print(new_y.value_counts())\n",
    "for key in subsets.keys():\n",
    "    print(subsets[key][\"y\"].value_counts())\n",
    "\n",
    "plot_value_counts_cohort(new_y, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the full dataset is now balanced. However, looking at each cohort separately, we noticed that we only made matters worse: we now have an even greater label imbalance inside each cohort. If we think of these cohorts as sensitive groups, that is, groups separated by sensitive features, *e.g.* gender, race, and nationality, and that we don't want our models to perform differently in one group compared to another, then this imbalance between cohorts is a scenario that needs to be fixed.\n",
    "\n",
    "### Balancing each cohort separately\n",
    "\n",
    "We'll now use the ``Rebalance`` class over each cohort separately, in order to obtain a set of balanced cohorts. This might aid us in obtaining fair models, that is, models that perform equally through cohorts. To do this, we'll use the ``CohortManager``, and we'll pass the ``Rebalance`` object to the ``transform_pipe`` parameter. We'll then call the ``fit_resample()`` method, implemented by the ``Rebalance`` class. Note that when using a pipeline with an object that implements the ``fit_resample()`` class, there can't be any transformers that implement the ``transform()`` and ``predict()`` methods, since these transformations serve different purposes: the former is used for rebalancing, that is, creating new instances in the ``X`` and ``y`` datasets, while the latter require that the number of instances of the dataset is kept fixed between each transformation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/preprocessing/_encoders.py:808: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/preprocessing/_encoders.py:808: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/preprocessing/_encoders.py:808: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/preprocessing/_encoders.py:808: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance_cohort = CohortManager(\n",
    "    transform_pipe=dp.Rebalance(verbose=False),\n",
    "    cohort_col=[\"CN_1_num_1\"]\n",
    ")\n",
    "new_X, new_y = rebalance_cohort.fit_resample(X, y)\n",
    "\n",
    "subsets = rebalance_cohort.get_subsets(new_X, new_y, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    946\n",
       "1    946\n",
       "Name: label, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_y.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, we now have a balanced full dataset, while also having balanced cohorts.\n",
    "\n",
    "## Balancing only a set of cohorts\n",
    "\n",
    "Suppose that we trained a model that is under-performing only for cohorts ``cohort_2`` and ``cohort_3``. In this case, we can keep the remaining cohorts unchanged, and balance only cohorts ``cohort_2`` and ``cohort_3``. To do this, we can use a separate pipeline for each cohort, where cohorts ``cohort_2`` and ``cohort_3`` use a pipeline comprised with only a ``Rebalance`` object, while the other two cohorts use an empty pipeline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/preprocessing/_encoders.py:808: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/preprocessing/_encoders.py:808: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABeAAAANiCAYAAAAJ6mntAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8o6BhiAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB2LklEQVR4nOzde5iVdb3//9cahuE8CHhIPCRgoSgKZiKBWumOQNP2TlH3Ts3KzDK3tjXJbaTl11MnU1CT2pllZVb+zDLU0iRNLbUsw1IBFVFEQYbTIKf79wcXKwg1YNY9M8jjcV1c3mvNvT73e+RqXc1zbj+rUhRFEQAAAAAAoKbq2noAAAAAAAB4IxLgAQAAAACgBAI8AAAAAACUQIAHAAAAAIASCPAAAAAAAFACAR4AAAAAAEogwAMAAAAAQAnq23oA/uGPf/xjiqJIx44d23oUAAAAAABew/Lly1OpVDJ06NDXPU+Ab0eKokhRFG09BgAAAAAAr2NDO64A346sufN98ODBbTwJAAAAAACv5S9/+csGnWcPeAAAAAAAKIEADwAAAAAAJRDgAQAAAACgBAI8AAAAAACUQIAHAAAAAIAS1Lf1AAAAAAAAtE9FUWTlypVZsWJFW4/Sajp27JgOHTrUZC0BHgAAAACAdRRFkfnz5+fFF1/MypUr23qcVrfVVlvlTW96UyqVSovWEeABAAAAAFjH7NmzM3/+/DQ2NqaxsTH19fUtjtGbg6IosmTJksyZMydJsv3227doPQEeAAAAAICqlStXpqmpKdtss0223nrrth6n1XXp0iVJMmfOnGy77bYt2o7Gh7ACAAAAAFC1fPnyFEWRbt26tfUobaZr165JVv+7aAkBHgAAAACA9WwJW868llp97wI8AAAAAACUQIAHAAAAAIASCPAAAAAAANTET3/60wwcODDPPvvsRr3uuOOOy2GHHVbTWd797ndn3LhxNV1zYwnwAAAAAABQAgEeAAAAAABKIMADAAAAAEAJBHgAAAAAAErxq1/9Kh/72McycuTI7LnnnjnkkEMyceLErFy58lXPf/TRR3PMMcdkr732yrvf/e784Ac/WO+cZcuW5fLLL8+//du/Zc8998xBBx2USy+9NMuWLSv729lo9W09AAAAAAAAb0w33XRTunbtmhNPPDFdu3bN/fffn8svvzyLFi3K2Wefvc65TU1N+djHPpbRo0fn0EMPzS9/+cucd9556dixY4488sgkyapVq3LKKafkoYceytixYzNgwIA8/vjj+c53vpOnnnoqV155ZVt8m69JgAcAAAAAoBRf+cpX0rlz5+rjY489NuPHj88PfvCDnHHGGWloaKh+bc6cORk3blxOPPHEJMnRRx+dsWPH5qtf/WqOOOKIdOzYMbfcckt+97vf5bvf/W723Xff6mvf8pa35POf/3wefvjh7LPPPq33Df4LtqABAAAAAKAUa8f3RYsWZd68edl3333T3Nyc6dOnr3NufX19jj766OrjhoaGHH300Zk7d27++te/JkkmT56cAQMGpH///pk3b171z/77758keeCBB1rhu9pw7oAHAAAAAKAUTzzxRC677LLcf//9WbRo0TpfW7hw4TqPt91223Tt2nWd53bZZZckyaxZszJkyJA8/fTTmTZtWoYPH/6q15s7d27thq8BAR4AAAAAgJpbsGBBPvjBD6Z79+457bTTsvPOO6dTp07561//mi9/+ctZtWrVRq+5atWqvPWtb81nP/vZV/36m970ppaOXVMCPAAAAAAANff73/8+8+fPz4QJE/L2t7+9+vyzzz77qufPmTMnS5YsWecu+KeeeipJssMOOyRJdt555/ztb3/L8OHDU6lUyhu+RuwBDwAAAABAzdXVrc7PRVFUn1u2bFm+//3vv+r5K1asyA033LDOuTfccEN69+6dPfbYI0kyevTovPDCC/nRj3603uuXLl2aJUuW1PJbaDF3wAMAAAAAUHNDhw5Nz549M27cuBx33HGpVCq5+eab1wnya9t2220zadKkzJo1K7vssktuvfXWPPbYY/niF7+Yjh07JkmOOOKI/PKXv8znP//5PPDAA9lnn32ycuXKTJ8+PZMnT843v/nNDB48uDW/zdclwAMAAAAAUHO9evXK1VdfnUsuuSSXXXZZGhsbc/jhh2f48OH5yEc+st75PXv2zMUXX5wLLrggP/rRj7L11ltn/PjxGTt2bPWcurq6TJw4Mddee21uvvnm3HHHHenSpUt23HHHHHfccenXr19rfov/UqV4rV830Or+8pe/JEm7+g0NAAAAALBlWbp0aWbMmJF+/fqlc+fObT1Om/hX/w42tOXaAx4AAAAAAEogwAMAAAAAQAkEeAAAAAAAKIEADwAAAAAAJRDgAQAAAACgBAI8AAAA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1KlT9XjtwA8AAAAAAO1VzQP8mu1iiqLIs88+W73D/Z/de++9SVbv/77vvvu+7pprh/zXu6seAAAAAADai5oH+LU/SHXp0qV56KGH1jvn8ccfz7Rp06r7vw8bNux115w7d271+PX2lQcAAAAAgPai5gF+t912S5cuXapxfeLEieudc+WVVyb5x/7vI0aMeM31XnzxxcybN6/6+PW2qgEAAAAAgPaivtYLdurUKf/2b/+Wn/3sZ6lUKrn//vtz4oknZuzYsenYsWN+9rOf5fbbb68G+re97W3rfMjqP3vkkUfWedy/f/9ajwwAAAAAADVX8wCfJKeeemomT56c5cuXpyiK3H///bn//vvXOacoilQqlZxyyimvu9avfvWr6vH222+fbbfdtoyRAQAAAACgpmq+BU2S7LzzzvnCF76QJNU73YuiqG45s+a5sWPHvu72M0uXLs2vf/3rVCqVVCqVvP3tby9jXAAAAAAAqLlSAnySvP/97883v/nN9O/fvxrek9Uhvlu3bjnjjDNy/vnnv+4aP/nJT7Jw4cLq69/5zneWNS4AAAAAANRUKVvQrDFixIj84he/yLRp0zJjxoy88sor2XbbbbP33nunoaHhX75+5cqVOf7446uPDzzwwDLHBQAAAACAmik1wK8xYMCADBgwYKNft3Z8BwAAAACAzUlpW9AAAAAAAMCWTIAHAAAAAIASCPAAAAAAAFCCVtkDPkkWLVqU3/72t3nooYcybdq0NDU1ZeHChSmKIl/60pcydOjQ1hoFAAAAAABKV3qAb2pqysSJE/OTn/wkS5YsWedrRVGkUqlk6dKlr/raM844I5MnT06SbL/99rnzzjvLHhcAAAAAAGqi1C1oHn744bz//e/Pd7/73SxevDhFUWzU6z/ykY+kKIoURZHnn38+9913X0mTAgAAAABAbZUW4P/yl7/kIx/5SGbPnr3O85VKJb169dqgGL/nnntm0KBB1cdr7oYHAAAAAID2rpQAv3jx4pxyyilpbm5OsnqrmSFDhuTKK6/MQw89lN/97ndJVsf4f2XUqFHVNe69994yxgUAAAAAgJorJcB/61vfyksvvVQN7B/84Afz/e9/P+9+97vTpUuXjVpr+PDh1eNZs2blxRdfrOmsAAAAAABQhlIC/A033FCN7/vvv3/OPffc1NVt2qV22223dOjQofr4ySefrMmM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I5VKJTfccEPGjRu3yXPV1dXlmmuuyUUXXZTx48dn+fLl2XfffXP99ddnm222SZLsu+++ueKKK3LZZZflxz/+cfr27ZsLLrggo0ePXmetc889N926dctXvvKVLF68OPvss0++/e1vp0ePHps8HwAAAAAAbxylBPhf//rXSVbftX744Ye3aK33v//9+drXvpaiKHLHHXe0KMAnSe/evfOlL33pdc85+OCDc/DBB7/uOQ0NDTn77LNz9tlnt2geAAAAAADemGq+B/y0adPy0ksvVR//q5D9r6z9+ueeey4zZ85s0XoAAAAAANAaah7gn3zyyepx165dM2DAgBatN2DAgHTt2rX6+IknnmjRegAAAAAA0BpqHuBfeOGFJKu3n9l+++1bvF6lUknfvn2rj59//vkWrwkAAAAAAGWreYBfsmRJ9bh79+41WbNbt27V48WLF9dkTQAAAAAAKFPNA/zasbypqakmay5YsKB63LFjx5qsCQAAAAAAZap5gO/Vq1eSpCiKzJ49O8uXL2/ResuWLcvs2bPXWx8AAAAAANqzmgf4nXfeuXq8dOnS/OEPf2jRen/4wx/S3NxcfbzDDju0aD0AAAAAAGgNNQ/we+65Z3r06JFKpZIk+cY3vtGi9a655prqcZcuXTJkyJAWrQcAAAAAAK2h5gG+rq4uBx54YIqiSFEU+f3vf59rr712k9b69re/nQceeCCVSiWVSiUjR460BzwAAAAAAJuFmgf4JDnllFNSV1eXSqWSoihy6aWX5utf/3pWrly5Qa9fuXJlLrvssnzpS1+qrlGpVPKJT3yijHEBAAAAAKDmSgnwu+66a8aOHVsN56tWrcrVV1+d0aNH59prr820adNe9XXTpk3Lt7/97YwePTrf+MY3smrVqiRJpVLJkUcemd12262McQEAAAAAoObqy1r43HPPzZNPPpkHH3ywehf7M888k0suuSSXXHJJunTpkl69eqVr165ZsmRJXn755eqHrRZFkSTV1+23334ZP358WaMCAAAAAEDNlXIHfJLU19fn6quvziGHHFK9E35NUC+KIkuWLMmsWbPyxBNPZNasWVmyZEn1a2ufO2rUqFx55ZWpry/tdwUAAAAAAFBzpQX4JOnevXsmTJiQ8847L9tvv/06d7a/1p9k9R3wffv2zQUXXJCvf/3r6d69e5ljAgAAAABAzbXKbeXHHHNMjjrqqNx+++2599578+CDD+bZZ5/NihUr/jFIfX123nnn7LvvvjnggANy8MEHp66u1N8PAAAAAABAaVptX5cOHTpk9OjRGT16dPW5RYsWZfHixenWrZu73AEAAAAAeENp043Vu3fvLrwDAAAAAPCGZI8XAAAAAAAogQAPAAAAAAAlEOABAAAAAKAErb4H/PLly7Nw4cK88sorKYpio1/ft2/fEqYCAAAAAIDaKj3ANzU15Wc/+1mmTJmSqVOnZt68eZu8VqVSydSpU2s4HQAAAAAAlKPUAH/ttdfm61//epYuXZokm3THOwAAAAAAbI5KC/Djx4/PjTfeWI3ulUollUpFhAcAAAAAYItQSoC/6aab8qMf/ShJqtG9KIr07Nkzb33rW9O7d+907dq1jEsDAAAAAEC7UEqAv/zyy5P8I77vtttu+Z//+Z+MGDEidXV1ZVwSAAAAAADalZoH+KlTp+b5559PpVJJkgwdOjTf/va307lz51pfCgAAAAAA2q2a347+2GOPJfnHB66OHz9efAcAAAAAYItT8wA/b9686vG2226b3XffvdaXAAAAAACAdq/mAX7N1jOVSiXbbbddrZcHAAAAAIDNQs0DfN++favHS5YsqfXyAAAAAACwWah5gB86dGiS1XvAz5o1K8uWLav1JQAAAAAAoN2reYDffvvtM2zYsCTJ0qVLM2XKlFpfAgAAAAAA2r2aB/gk+Z//+Z906NAhSXLZZZfllVdeKeMyAAAAAADQbpUS4Pfaa6+cffbZKYoi06ZNy6c+9aksWrSojEsBAAAAAEC7VEqAT5Ljjz8+5513Xurr6/Pb3/42hx9+eG644YY0NTWVdUkAAAAAAGg36stY9Pjjj68e9+7dOy+88EKee+65nHfeeTn//POzww47pE+fPmloaNiodSuVSr7zne/UelwAAAAAAKi5UgL873//+1QqlerjNcdFUaQoisycOTPPPvvsRq1ZFMU6awIAAAAAQHtWSoB/LQI6AAAAAABbitICfFEUZS0NAAAAAADtXikB/m9/+1sZywIAAAAAwGajrq0HAAAAAACANyIBHgAAAAAASiDAAwAAAABACQR4AAAAAAAogQAPAAAAAAAlqG+tCz399NO544478uCDD2b69OlpamrKwoULkyTf+ta3Mnz48PVeM2fOnKxYsSJJ0rlz5/Tu3bu1xgUA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AAAAACUqdQuatfdu31Brov2af+61114599xzs9dee9V0NgAAAAAAKFMpAb5v374b/ZpKpZJOnTqle/fu6du3bwYNGpSDDjooAwcOLGFCAAAAAAAoVykB/s477yxjWQAAAAAA2GzUtfUAAAAAAADwRiTAAwAAAABACQR4AAAAAAAogQAPAAAAAAAlEOABAAAAAKAEpQT4Bx98MLvvvnv1z/33379J69x3333VNQYNGpRHH320xpMCAAAAAEA5SgnwN9xwQ4qiSFEUGTx4cPbff/9NWmf48OHZfffdUxRFVq1alR/96Ec1nhQAAAAAAMpR8wC/atWqTJkyJZVKJZVKJe973/tatN773//+JEmlUsmdd95ZgwkBAAAAAKB8NQ/wjz/+eJqamlIURZLkne98Z4vWW/P6oigyd+7cTJ8+vYUTAgAAAABA+Woe4KdNm1Y9bmxszE477dSi9Xbeeec0NjZWHz/55JMtWg8AAAAAAFpDzQP8iy++mGT1ljHbbrttTdbcbrvtqscvvPBCTdYEAAAAAIAy1TzAL126tHrctWvXmqy59jpLliypyZoAAAAAAFCmmgf4Hj16VI/nz59fkzXXXqdz5841WRMAAAAAAMpU8wDfq1evJKs/NPX5559f5474TdHc3JznnnsulUolSdK7d+8WzwgAAAAAAGWreYDv379/9Xj58uW55557WrTePffck+XLl6coiiSrP5QVAAAAAADau5oH+N122y19+vRJpVJJURS58sorW7TeVVddVb37vbGxMXvttVctxgQAAAAAgFLVPMAnycEHH1y9Y/2xxx7LRRddtEnrXHTRRZk6dWqSpFKp5OCDD67G+JZavHhxDjzwwAwcODB/+ctf1vnajTfemFGjRmXw4ME5/PDDc9ddd633+oULF+acc87Jfvvtl6FDh+a0007LnDlzajIbAAAAAACbv1IC/CmnnJKOHTtW74K/7rrr8pnPfCaLFi3aoNcvWrQoZ511Vq677rrqGvX19TnllFNqNuOVV16ZlStXrvf8L37xi3zuc5/L6NGjM2nSpAwZMiSnnnpq/vSnP61z3umnn55777035513Xr785S9nxowZOemkk7JixYqazQgAAAAAwOarlAC//fbb5+STT05RFNWAfsstt+Sd73xnLrjggkyZMiXz5s1b5zXz5s3LlClTcsEFF+Rd73pXfv7zn6coiuoaJ510UnbaaaeazDdt2rR8//vfz6c+9an1vnb55Zfn0EMPzemnn579998/X/jCFzJ48OBMnDixes4f//jH3HPPPfl//+//ZcyYMTn44IPz9a9/PX//+99z++2312RGAAAAAAA2b/VlLXzqqafm8ccfz+23316N8IsWLcr111+f66+/PsnqbWU6d+6cpUuXVresSVI9XvO60aNH57TTTqvZbBdccEGOOeaY9OvXb53nZ86cmaeeeipnnXXWOs+PGTMml156aZYtW5aGhoZMmTIljY2NGTFiRPWc/v37Z/fdd8+UKVMyZsyYms0KAAAAAMDmqbQAnyRf/epXc+mll1a3klljTWAviiJLlixZ5zWVSqUa3pPkxBNPzJlnnlmzmSZPnpzHH388V1xxRf7617+u87Xp06cnyXphfsCAAVm+fHlmzpyZAQMGZPr06enXr996+9H379+/usamerV/J2WpVCrp0qVLq1wLWF9zc/M6v3wEAKB1+ZkI2pafiYDN2ZqdW/6VUgN8fX19zjnnnBxwwAGZOHHiOvuov9pwa7acSZK3ve1tOfXUUzN8+PCazdPc3JyLL744Z5xxRrp3777e15uampIkjY2N6zy/5vGary9YsCA9evRY7/U9e/bMo48+2qIZly9fnscee6xFa2yoLl26ZNCgQa1yLWB9M2bMSHNzc1uPAQCwxfIzEbQtPxMBm7uGhoZ/eU6pAX6NAw44IAcccED+/Oc/5957782DDz6YmTNnpqmpKYsXL063bt3Ss2fPvPnNb86+++6bAw44oJT/E3TVVVelT58++cAHPlDztWulY8eO2XXXXVvlWhvyGxqgPP369XO3BwBAG/IzEbQtPxMBm7Mnn3xyg85rlQC/xl577ZW99tqrNS9ZNWvWrPzf//1fJk6cmIULFyZJdauXJUuWZPHixenZs2eSZOHChdlmm22qr12wYEGSVL/e2NiY2bNnr3eNpqam6jmbqlKppGvXri1aA9g8+M+dAQCALZmfiYDN2Yb+Ir9VA3xbevbZZ7N8+fJ87GMfW+9rxx9/fPbee+985StfSbJ6L/j+/ftXvz59+vR07NgxO+20U5LVe73fd9996+3zM2PGjLz1rW8t+TsBAAAAAGBzsMUE+N133z3XXXfdOs899thjueiii3L++edn8ODB2WmnnbLLLrtk8uTJOeSQQ6rn3XrrrRk+fHh1T58DDzwwV155Ze6777684x3vSLI6vk+dOjUf/ehHW++bAgAAAACg3dpiAnxjY2OGDRv2ql/bY489ssceeyRJPvWpT+XMM8/MzjvvnGHDhuXWW2/Nn//853zve9+rnj906NCMHDky55xzTs4+++x06tQpX/va1zJw4MC85z3vaZXvBwAAAACA9q20AP/cc89VjxsbG9O9e/eNXmPRokXV/deTpG/fvjWZ7fUcdthhaW5uzqRJk3LNNdekX79+mTBhQoYOHbrOeZdddlkuuuiijB8/PitWrMjIkSNz7rnnpr5+i/mdBgAAAAAAr6OUWnz33Xfn4x//ePXxT37ykwwaNGij13nqqady5JFHVvdZv/baa1/zLvZNMWzYsPz9739f7/mjjjoqRx111Ou+tkePHrnwwgtz4YUX1mweAAAAAADeOOrKWPTGG29MURQpiiL777//JsX3JNlzzz3z9re/vbrWjTfeWONJAQAAAACgHDUP8MuXL8+9996bSqWSSqWSQw89tEXrHX744dXj3/72tymKoqUjAgAAAABA6Woe4P/2t7+lubm5GsoPOOCAFq134IEHVo8XLFiQxx9/vEXrAQAAAABAa6h5gJ82bVr1uHfv3tluu+1atN52222X3r17v+r6AAAAAADQXtU8wL/88stJkkqlkq233roma26zzTbV4xdffLEmawIAAAAAQJlqHuBfeeWV6nGnTp1qsmZDQ0P1uLm5uSZrAgAAAABAmWoe4Hv27Fk9XnM3fEvNnz+/etytW7earAkAAAAAAGWqeYDv1atXkqQoijz//PNZuHBhi9ZbsGBBnnvuuVQqlSRZZz94AAAAAABor2oe4AcOHJhk9R7wK1euzJ133tmi9e68886sXLkyRVEkSQYMGNDiGQEAAAAAoGw1D/D9+vXL9ttvn2T1XfATJ07M8uXLN2mtZcuW5corr6ze/d6nT5/stttuNZsVAAAAAADKUvMAnyRjxoxJURSpVCqZOXNmPvOZz2zSOp/5zGfyzDPPVNcaM2ZMjScFAAAAAIBylBLgP/rRj6Zr165JVt8FP3ny5Bx33HGZOXPmBr3+mWeeyXHHHZfbbrutevd7586dc/LJJ5cxLgAAAAAA1Fx9GYv26tUrn/nMZ3LeeeelUqmkKIr84Q9/yHvf+94ccMABOeigg7LnnnumT58+6dq1a5YsWZK5c+fm0Ucfzd13353f/va3WbVqVXXf90qlks985jPp06dPGeMCAAAAAEDNlRLgk+SYY47JtGnT8t3vfrd6F/vKlStz99135+67737d167ZcmZNvP/Qhz6UY489tqxRAQAAAACg5koL8Enyv//7v9lxxx3zpS99KStWrKiG+DV3tr+atcN7Q0NDzj777PzXf/1XmWMCAAAAAEDNlbIH/NpOOOGE3HTTTTn00ENTV1e3TnxfE9vXhPlkdZzv0KFDDj/88Nx0003iOwAAAAAAm6VS74Bf4y1veUu+8pWvZNy4cbnvvvvy4IMPZubMmWlqasrixYvTrVu39OzZM29+85uz7777Zvjw4fZ7BwAAAABgs9YqAX6NbbbZJocffngOP/zw1rwsAAAAAAC0utK3oAEAAAAAgC2RAA8AAAAAACUofQuaWbNmZdq0aWlqalpvz/eePXtmwIAB2WGHHcoeAwAAAAAAWlXNA/yqVasyefLk3H777Xn44Yfz4osv/svXbLPNNtlnn33ynve8J+9973tTV+fGfAAAAAAANm81C/ArVqzId77znXzve9/L7NmzkyRFUWzQa+fMmZPbbrstt912Wy699NIcd9xxOeGEE1Jf36qfEQsAAAAAADVTk1vNZ8yYkbFjx+bLX/5ynn/++RRFkaIoUqlUNvjPmtfMnj07X/7ylzN27NhMmzatFuMBAAAAAECra3GAv/322/Mf//Efeeyxx9aJ7kmqUX3N8z169Mi2226bHj16rBPd19wpv3aMnzp1aj7wgQ/kl7/8ZUtHBAAAAACAVteiPV7uvPPOnHHGGVm5cuU68TxJBg0alFGjRmWPPfbIoEGD0rt37/VeP2/evEydOjV//etfc9ttt2Xq1KlJUg34S5cuzVlnnZWGhoYcfPDBLRkVAAAAAABa1SYH+GeeeSZnnnlmNb4nq+94P+SQQ3LaaaflrW99679co3fv3hk5cmRGjhyZk08+OY8//nguv/zy/OpXv6oG/RUrVuSss87KTTfdlDe/+c2bOi4AAAAAALSqTd6CZvz48VmyZEn1rvfu3bvn6quvzoQJEzYovr+at771rZkwYUKuuuqqdO/ePcnqu+GXLFmS8ePHb+qoAAAAAADQ6jYpwN9///25//77q/G9d+/e+c53vpN3vvOdNRnqXe96V77zne9kq622qj73+9//Pvff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V1yR5ubmjX7tww8/nKOPPjp77bVX3vWud+Waa65JURQlTAnUUnt+b/nLX/6Sz372sxk9enR222230ucEaqc9v7f88Ic/zIc//OGMGDEi++yzT8aOHZtf/epXJU0J1FJ7fm+56aabMnbs2Oy3334ZPHhwRo0alYkTJ2bZsmUlTUpbEuChlTz11FO5+OKL8773vS/XX399zjrrrLYeKUmyePHinHPOOXnb296W6667LpdeemlbjwRsJh577LFMmDBho//P5tNPP52PfOQj2WabbfKNb3wjJ5xwQi6//PL83//9X0mTApuTTX1vefjhh/Pggw9m0KBB6du3b0nTAZurTX1vufrqq9O3b9+cd955ueKKKzJw4MB88pOfzE033VTSpMDmZFPfW5qamnLAAQfkwgsvzKRJk/KBD3wg3/jGN/LFL36xpElpS/VtPQBsKWbMmJGiKDJ27NjstNNObT1O1axZs7Js2bIcfvjhedvb3tbW4wCbgZUrV2bVqlWb/Ppvfetb6dWrV7761a+moaEhw4cPz7x583L11VfnuOOOS0NDQw2nBTYXLX1vOe6443LCCSdUjwGSlr+3/PSnP03v3r2rj0eMGJFZs2bl//7v//Lv//7vtRgR2Ay19L3lQx/60DqP999//yxevDjXXnttzjvvvHTo0KGFE9KeuAMeWsG4cePy8Y9/PElyyCGHZODAgfnpT3/6mlvJHHHEERk3blyLrztt2rR88IMfzODBg3PIIYesd5fGFVdckfe9731JVr/5Dxw4MFdccUWLrwu03B//+Md8+MMfzj777JOhQ4fmqKOOyr333pskmT9/fj772c9m2LBh2WuvvXLMMcfkD3/4w6uuM3ny5IwaNSpDhw7N8ccfn2eeeWadr2/IWmv+082bbropo0aNyuDBg3Pdddfls5/9bJJk+PDhGThwYN797ndv0Pc2ZcqUHHzwweuE9jFjxmTBggX54x//uMH/joCN90Z+b6mr86MNtJU38nvL2vF9jd133z1z5szZoNcDm+6N/N7yarbaaqusWLGiRWGf9skd8NAKPvGJT2TAgAH58pe/nAkTJmSbbbbJzjvvnN/85jelXfOVV17Jhz/84XTp0qW6rczll1+eRYsWZZdddkmSHHXUUdlpp51y9tlnZ/z48dljjz3ypje9qbSZgA3z0EMP5YQTTsiQIUNywQUXpLGx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",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance_cohort = CohortManager(\n",
    "    transform_pipe=[\n",
    "        [],\n",
    "        [],\n",
    "        [dp.Rebalance(verbose=False)],\n",
    "        [dp.Rebalance(verbose=False)],\n",
    "    ],\n",
    "    cohort_col=[\"CN_1_num_1\"]\n",
    ")\n",
    "new_X, new_y = rebalance_cohort.fit_resample(X, y)\n",
    "\n",
    "subsets = rebalance_cohort.get_subsets(new_X, new_y, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y, subsets, normalize=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "raipub",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15 (main, Nov 24 2022, 14:31:59) \n[GCC 11.2.0]"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "98cf402749abf383affb54f23cdde06b52ae2a6e4394659b91d1cafca4224ff4"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
