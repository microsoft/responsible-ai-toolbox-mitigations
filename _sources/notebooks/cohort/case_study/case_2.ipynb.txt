{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cohort Case Study 2\n",
    "\n",
    "This notebook will follow a similar approach to what was done in the notebook [Cohort Case Study 1](./case_1.ipynb), but this time we'll use a real dataset. Since this time we're handling a real dataset, it might not be obvious which cohorts follow different behaviors, as we've seen in the aforementioned notebook.\n",
    "\n",
    "We'll start by downloading the dataset and reading the train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append('../../../notebooks')\n",
    "\n",
    "import random\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xgboost as xgb\n",
    "from sklearn.pipeline import Pipeline\n",
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from raimitigations.utils import split_data\n",
    "import raimitigations.dataprocessing as dp\n",
    "from raimitigations.cohort import (\n",
    "    CohortDefinition,\n",
    "    CohortManager,\n",
    "    fetch_cohort_results,\n",
    "    plot_value_counts_cohort\n",
    ")\n",
    "from download import download_datasets\n",
    "\n",
    "SEED = 46\n",
    "#SEED = None\n",
    "\n",
    "np.random.seed(SEED)\n",
    "random.seed(SEED)\n",
    "\n",
    "data_dir = \"../../../datasets/census/\"\n",
    "download_datasets(data_dir)\n",
    "\n",
    "label_col = \"income\"\n",
    "df_train = pd.read_csv(data_dir + \"train.csv\")\n",
    "df_test = pd.read_csv(data_dir + \"test.csv\")\n",
    "# convert to 0 and 1 encoding\n",
    "df_train[label_col] = df_train[label_col].apply(lambda x: 0 if x == \"<=50K\" else 1)\n",
    "df_test[label_col] = df_test[label_col].apply(lambda x: 0 if x == \"<=50K\" else 1)\n",
    "\n",
    "X_train = df_train.drop(columns=[label_col])\n",
    "y_train = df_train[label_col]\n",
    "X_test = df_test.drop(columns=[label_col])\n",
    "y_test = df_test[label_col]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32561, 15)\n",
      "(16281, 15)\n"
     ]
    }
   ],
   "source": [
    "print(df_train.shape)\n",
    "print(df_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>income</th>\n",
       "      <th>age</th>\n",
       "      <th>workclass</th>\n",
       "      <th>fnlwgt</th>\n",
       "      <th>education</th>\n",
       "      <th>education-num</th>\n",
       "      <th>marital-status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>capital-gain</th>\n",
       "      <th>capital-loss</th>\n",
       "      <th>hours-per-week</th>\n",
       "      <th>native-country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>77516</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>2174</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>Self-emp-not-inc</td>\n",
       "      <td>83311</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>Private</td>\n",
       "      <td>215646</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>53</td>\n",
       "      <td>Private</td>\n",
       "      <td>234721</td>\n",
       "      <td>11th</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>Private</td>\n",
       "      <td>338409</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Wife</td>\n",
       "      <td>Black</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>Cuba</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32556</th>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>Private</td>\n",
       "      <td>257302</td>\n",
       "      <td>Assoc-acdm</td>\n",
       "      <td>12</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Tech-support</td>\n",
       "      <td>Wife</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32557</th>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>Private</td>\n",
       "      <td>154374</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Machine-op-inspct</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32558</th>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>Private</td>\n",
       "      <td>151910</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Widowed</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Unmarried</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32559</th>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>Private</td>\n",
       "      <td>201490</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Own-child</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32560</th>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>Self-emp-inc</td>\n",
       "      <td>287927</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Wife</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>15024</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32561 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       income  age          workclass  fnlwgt    education  education-num  \\\n",
       "0           0   39          State-gov   77516    Bachelors             13   \n",
       "1           0   50   Self-emp-not-inc   83311    Bachelors             13   \n",
       "2           0   38            Private  215646      HS-grad              9   \n",
       "3           0   53            Private  234721         11th              7   \n",
       "4           0   28            Private  338409    Bachelors             13   \n",
       "...       ...  ...                ...     ...          ...            ...   \n",
       "32556       0   27            Private  257302   Assoc-acdm             12   \n",
       "32557       1   40            Private  154374      HS-grad              9   \n",
       "32558       0   58            Private  151910      HS-grad              9   \n",
       "32559       0   22            Private  201490      HS-grad              9   \n",
       "32560       1   52       Self-emp-inc  287927      HS-grad              9   \n",
       "\n",
       "            marital-status          occupation    relationship    race  \\\n",
       "0            Never-married        Adm-clerical   Not-in-family   White   \n",
       "1       Married-civ-spouse     Exec-managerial         Husband   White   \n",
       "2                 Divorced   Handlers-cleaners   Not-in-family   White   \n",
       "3       Married-civ-spouse   Handlers-cleaners         Husband   Black   \n",
       "4       Married-civ-spouse      Prof-specialty            Wife   Black   \n",
       "...                    ...                 ...             ...     ...   \n",
       "32556   Married-civ-spouse        Tech-support            Wife   White   \n",
       "32557   Married-civ-spouse   Machine-op-inspct         Husband   White   \n",
       "32558              Widowed        Adm-clerical       Unmarried   White   \n",
       "32559        Never-married        Adm-clerical       Own-child   White   \n",
       "32560   Married-civ-spouse     Exec-managerial            Wife   White   \n",
       "\n",
       "        gender  capital-gain  capital-loss  hours-per-week  native-country  \n",
       "0         Male          2174             0              40   United-States  \n",
       "1         Male             0             0              13   United-States  \n",
       "2         Male             0             0              40   United-States  \n",
       "3         Male             0             0              40   United-States  \n",
       "4       Female             0             0              40            Cuba  \n",
       "...        ...           ...           ...             ...             ...  \n",
       "32556   Female             0             0              38   United-States  \n",
       "32557     Male             0             0              40   United-States  \n",
       "32558   Female             0             0              40   United-States  \n",
       "32559     Male             0             0              20   United-States  \n",
       "32560   Female         15024             0              40   United-States  \n",
       "\n",
       "[32561 rows x 15 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we define which model will be used throughout the experiments performed here. Remember that our goal is not to compare different models, but instead to compare different approaches to cohort processing. Therefore, we'll use the same model for all experiments, but we'll alternate between training a pipeline using the entire dataset and training multiple pipelines, where each pipeline is associated with a specific cohort. We'll also see how the cohort definition changes the results obtained."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_model():\n",
    "    model = LGBMClassifier(random_state=SEED)\n",
    "    #model = LogisticRegression()\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initial analysis of multiple cohort definitions\n",
    "\n",
    "Now that we have our dataset, we can create a simple pipeline and fit it using the training data. We'll then use the ``fetch_cohort_results`` function to show the results obtained for the entire dataset, as well as for different cohorts. Notice that this function computes all metrics for each cohort separately, and therefore, different thresholds might be encountered for each cohort (the optimal threshold of a given set of predictions is found using the ROC curve). We call this function twice: first using the training dataset, which gives us the best thresholds for each cohort, and for the second time we call this function, we pass the test dataset, along with these thresholds. Check [Cohort Case Study 1](./case_1.ipynb) for more details.\n",
    "\n",
    "### Superficial analysis of the \"race\" cohorts\n",
    "\n",
    "Our first analysis will focus on the cohorts defined by the ``race`` feature.\n",
    "\n",
    "<a id='baseline1'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>num_pos</th>\n",
       "      <th>%_pos</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.928045</td>\n",
       "      <td>0.777171</td>\n",
       "      <td>0.845464</td>\n",
       "      <td>0.796679</td>\n",
       "      <td>0.832934</td>\n",
       "      <td>0.231817</td>\n",
       "      <td>5560</td>\n",
       "      <td>0.341502</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`race` == \" Amer-Indian-Eskimo\")</td>\n",
       "      <td>0.964286</td>\n",
       "      <td>0.732710</td>\n",
       "      <td>0.902256</td>\n",
       "      <td>0.775560</td>\n",
       "      <td>0.867925</td>\n",
       "      <td>0.197201</td>\n",
       "      <td>38</td>\n",
       "      <td>0.238994</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`race` == \" Asian-Pac-Islander\")</td>\n",
       "      <td>0.904596</td>\n",
       "      <td>0.767611</td>\n",
       "      <td>0.822257</td>\n",
       "      <td>0.777709</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.203299</td>\n",
       "      <td>195</td>\n",
       "      <td>0.406250</td>\n",
       "      <td>480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`race` == \" Black\")</td>\n",
       "      <td>0.950497</td>\n",
       "      <td>0.760379</td>\n",
       "      <td>0.882773</td>\n",
       "      <td>0.802551</td>\n",
       "      <td>0.900064</td>\n",
       "      <td>0.191870</td>\n",
       "      <td>285</td>\n",
       "      <td>0.182575</td>\n",
       "      <td>1561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`race` == \" Other\")</td>\n",
       "      <td>0.980000</td>\n",
       "      <td>0.901368</td>\n",
       "      <td>0.937273</td>\n",
       "      <td>0.917833</td>\n",
       "      <td>0.948148</td>\n",
       "      <td>0.189001</td>\n",
       "      <td>28</td>\n",
       "      <td>0.207407</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`race` == \" White\")</td>\n",
       "      <td>0.924495</td>\n",
       "      <td>0.778072</td>\n",
       "      <td>0.838988</td>\n",
       "      <td>0.795214</td>\n",
       "      <td>0.827262</td>\n",
       "      <td>0.245844</td>\n",
       "      <td>4939</td>\n",
       "      <td>0.354152</td>\n",
       "      <td>13946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                          cht_query       roc  precision    recall  \\\n",
       "0       all                                all  0.928045   0.777171  0.845464   \n",
       "1  cohort_0  (`race` == \" Amer-Indian-Eskimo\")  0.964286   0.732710  0.902256   \n",
       "2  cohort_1  (`race` == \" Asian-Pac-Islander\")  0.904596   0.767611  0.822257   \n",
       "3  cohort_2               (`race` == \" Black\")  0.950497   0.760379  0.882773   \n",
       "4  cohort_3               (`race` == \" Other\")  0.980000   0.901368  0.937273   \n",
       "5  cohort_4               (`race` == \" White\")  0.924495   0.778072  0.838988   \n",
       "\n",
       "         f1  accuracy  threshold  num_pos     %_pos  cht_size  \n",
       "0  0.796679  0.832934   0.231817     5560  0.341502     16281  \n",
       "1  0.775560  0.867925   0.197201       38  0.238994       159  \n",
       "2  0.777709  0.800000   0.203299      195  0.406250       480  \n",
       "3  0.802551  0.900064   0.191870      285  0.182575      1561  \n",
       "4  0.917833  0.948148   0.189001       28  0.207407       135  \n",
       "5  0.795214  0.827262   0.245844     4939  0.354152     13946  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Baseline 1\n",
    "\n",
    "pipe = Pipeline([\n",
    "            (\"scaler\", dp.DataStandardScaler(verbose=False)),\n",
    "            (\"encoder\", dp.EncoderOHE(verbose=False)),\n",
    "            (\"estimator\", get_model()),\n",
    "        ])\n",
    "pipe.fit(X_train, y_train)\n",
    "pred_org = pipe.predict_proba(X_test)\n",
    "\n",
    "pred_train_org = pipe.predict_proba(X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(X_train, y_train, pred_train_org, cohort_col=[\"race\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_org, cohort_col=[\"race\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now create a separate pipeline for the different cohorts, instead of training a single pipeline for the entire dataset. We'll accomplish this by using the ``CohortManager`` class. We'll then compare the results obtained for the same cohorts tested in the previous cell. In this notebook, just like in ``Cohort Case Study 1``, we'll call this approach the cohort-based pipeline, and we'll try different cohort-based pipelines, each time using different cohort definitions.\n",
    "\n",
    "<a id='cohort1'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.919545</td>\n",
       "      <td>0.769716</td>\n",
       "      <td>0.839667</td>\n",
       "      <td>0.788366</td>\n",
       "      <td>0.824765</td>\n",
       "      <td>0.212255</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`race` == \" Amer-Indian-Eskimo\")</td>\n",
       "      <td>0.722932</td>\n",
       "      <td>0.578701</td>\n",
       "      <td>0.683083</td>\n",
       "      <td>0.471853</td>\n",
       "      <td>0.522013</td>\n",
       "      <td>0.003494</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`race` == \" Asian-Pac-Islander\")</td>\n",
       "      <td>0.881606</td>\n",
       "      <td>0.763607</td>\n",
       "      <td>0.809787</td>\n",
       "      <td>0.775563</td>\n",
       "      <td>0.802083</td>\n",
       "      <td>0.133196</td>\n",
       "      <td>480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`race` == \" Black\")</td>\n",
       "      <td>0.920955</td>\n",
       "      <td>0.675330</td>\n",
       "      <td>0.858043</td>\n",
       "      <td>0.699228</td>\n",
       "      <td>0.804612</td>\n",
       "      <td>0.022147</td>\n",
       "      <td>1561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`race` == \" Other\")</td>\n",
       "      <td>0.826545</td>\n",
       "      <td>0.670588</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>0.676923</td>\n",
       "      <td>0.740741</td>\n",
       "      <td>0.006283</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`race` == \" White\")</td>\n",
       "      <td>0.924379</td>\n",
       "      <td>0.772555</td>\n",
       "      <td>0.841171</td>\n",
       "      <td>0.788055</td>\n",
       "      <td>0.817510</td>\n",
       "      <td>0.212255</td>\n",
       "      <td>13946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                          cht_query       roc  precision    recall  \\\n",
       "0       all                                all  0.919545   0.769716  0.839667   \n",
       "1  cohort_0  (`race` == \" Amer-Indian-Eskimo\")  0.722932   0.578701  0.683083   \n",
       "2  cohort_1  (`race` == \" Asian-Pac-Islander\")  0.881606   0.763607  0.809787   \n",
       "3  cohort_2               (`race` == \" Black\")  0.920955   0.675330  0.858043   \n",
       "4  cohort_3               (`race` == \" Other\")  0.826545   0.670588  0.763636   \n",
       "5  cohort_4               (`race` == \" White\")  0.924379   0.772555  0.841171   \n",
       "\n",
       "         f1  accuracy  threshold  cht_size  \n",
       "0  0.788366  0.824765   0.212255     16281  \n",
       "1  0.471853  0.522013   0.003494       159  \n",
       "2  0.775563  0.802083   0.133196       480  \n",
       "3  0.699228  0.804612   0.022147      1561  \n",
       "4  0.676923  0.740741   0.006283       135  \n",
       "5  0.788055  0.817510   0.212255     13946  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Cohort 1\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_col=[\"race\"]\n",
    ")\n",
    "cht_manager.fit(X_train, y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "pred_train = cht_manager.predict_proba(X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(X_train, y_train, pred_train, cohort_col=[\"race\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"race\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that using a separate pipeline for each cohort defined by the ``race`` column is not a good idea: we got considerably worse results for some cohorts compared to the baseline pipeline. This might mean that, for some cohorts (like cohort ``cohort_0``), **we have insufficient data for training a separate model for that cohort, and that the data from other cohorts indeed helps the end result**. This could also mean that these cohorts share similarities to other cohorts, and that is why using data from different cohorts to train a single model is better than training a separate model for each cohort.\n",
    "\n",
    "### Superficial analysis of the \"gender\" cohorts\n",
    "\n",
    "Let's now try other cohort definitions and see if we can find some scenario where the model underperforms for a given cohort. Our next test is to check the cohorts defined by the ``gender`` column. We'll follow the same procedure: first, we train a single pipeline over the entire dataset, followed by an evaluation of the predictions over the test data separated by each cohort. Once again, the metrics are computed separately for the predictions of each cohort, and therefore, we might see different optimal threshold values encountered for different cohorts.\n",
    "\n",
    "<a id='baseline2'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.928045</td>\n",
       "      <td>0.777171</td>\n",
       "      <td>0.845464</td>\n",
       "      <td>0.796679</td>\n",
       "      <td>0.832934</td>\n",
       "      <td>0.231817</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`gender` == \" Female\")</td>\n",
       "      <td>0.945489</td>\n",
       "      <td>0.740570</td>\n",
       "      <td>0.861752</td>\n",
       "      <td>0.781435</td>\n",
       "      <td>0.892824</td>\n",
       "      <td>0.138193</td>\n",
       "      <td>5421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`gender` == \" Male\")</td>\n",
       "      <td>0.910614</td>\n",
       "      <td>0.782839</td>\n",
       "      <td>0.820572</td>\n",
       "      <td>0.793299</td>\n",
       "      <td>0.813168</td>\n",
       "      <td>0.295236</td>\n",
       "      <td>10860</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                cht_query       roc  precision    recall        f1  \\\n",
       "0       all                      all  0.928045   0.777171  0.845464  0.796679   \n",
       "1  cohort_0  (`gender` == \" Female\")  0.945489   0.740570  0.861752  0.781435   \n",
       "2  cohort_1    (`gender` == \" Male\")  0.910614   0.782839  0.820572  0.793299   \n",
       "\n",
       "   accuracy  threshold  cht_size  \n",
       "0  0.832934   0.231817     16281  \n",
       "1  0.892824   0.138193      5421  \n",
       "2  0.813168   0.295236     10860  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Baseline 2\n",
    "\n",
    "pred_train_org = pipe.predict_proba(X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(X_train, y_train, pred_train_org, cohort_col=[\"gender\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_org, cohort_col=[\"gender\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we create different pipelines for each cohort and evaluate the predictions made by the ensemble of models over each cohort separately.\n",
    "\n",
    "<a id='cohort2'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.924731</td>\n",
       "      <td>0.771722</td>\n",
       "      <td>0.841294</td>\n",
       "      <td>0.790623</td>\n",
       "      <td>0.826976</td>\n",
       "      <td>0.224417</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`gender` == \" Female\")</td>\n",
       "      <td>0.939232</td>\n",
       "      <td>0.726703</td>\n",
       "      <td>0.867672</td>\n",
       "      <td>0.769103</td>\n",
       "      <td>0.880834</td>\n",
       "      <td>0.100605</td>\n",
       "      <td>5421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`gender` == \" Male\")</td>\n",
       "      <td>0.908182</td>\n",
       "      <td>0.784077</td>\n",
       "      <td>0.818615</td>\n",
       "      <td>0.794710</td>\n",
       "      <td>0.815838</td>\n",
       "      <td>0.306261</td>\n",
       "      <td>10860</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                cht_query       roc  precision    recall        f1  \\\n",
       "0       all                      all  0.924731   0.771722  0.841294  0.790623   \n",
       "1  cohort_0  (`gender` == \" Female\")  0.939232   0.726703  0.867672  0.769103   \n",
       "2  cohort_1    (`gender` == \" Male\")  0.908182   0.784077  0.818615  0.794710   \n",
       "\n",
       "   accuracy  threshold  cht_size  \n",
       "0  0.826976   0.224417     16281  \n",
       "1  0.880834   0.100605      5421  \n",
       "2  0.815838   0.306261     10860  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Cohort 2\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_col=[\"gender\"]\n",
    ")\n",
    "cht_manager.fit(X_train, y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "pred_train = cht_manager.predict_proba(X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(X_train, y_train, pred_train, cohort_col=[\"gender\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"gender\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyzing the two previous results, we can notice that there isn't a considerable difference in the metrics for each of the cohorts. Also, training different pipelines for each cohort didn't manage to improve the performance, just like our previous results. Therefore, it seems that the cohorts defined by the ``gender`` column follow similar behaviors, so we won't be able to gain a lot using different pipelines for each cohort in this case.\n",
    "\n",
    "### Superficial analysis of the \"relationship\" cohorts\n",
    "\n",
    "We now analyze the cohorts defined by the ``relationship`` column. Let's see the results of the baseline pipeline over each of these cohorts:\n",
    "\n",
    "<a id='baseline3'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.928045</td>\n",
       "      <td>0.777171</td>\n",
       "      <td>0.845464</td>\n",
       "      <td>0.796679</td>\n",
       "      <td>0.832934</td>\n",
       "      <td>0.231817</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`relationship` == \" Husband\")</td>\n",
       "      <td>0.851455</td>\n",
       "      <td>0.755007</td>\n",
       "      <td>0.756020</td>\n",
       "      <td>0.755425</td>\n",
       "      <td>0.757474</td>\n",
       "      <td>0.430200</td>\n",
       "      <td>6523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`relationship` == \" Not-in-family\")</td>\n",
       "      <td>0.903658</td>\n",
       "      <td>0.686648</td>\n",
       "      <td>0.815537</td>\n",
       "      <td>0.723557</td>\n",
       "      <td>0.866293</td>\n",
       "      <td>0.122252</td>\n",
       "      <td>4278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`relationship` == \" Other-relative\")</td>\n",
       "      <td>0.936405</td>\n",
       "      <td>0.593950</td>\n",
       "      <td>0.822549</td>\n",
       "      <td>0.629904</td>\n",
       "      <td>0.906667</td>\n",
       "      <td>0.055801</td>\n",
       "      <td>525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`relationship` == \" Own-child\")</td>\n",
       "      <td>0.933263</td>\n",
       "      <td>0.552981</td>\n",
       "      <td>0.840417</td>\n",
       "      <td>0.565381</td>\n",
       "      <td>0.883804</td>\n",
       "      <td>0.016585</td>\n",
       "      <td>2513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`relationship` == \" Unmarried\")</td>\n",
       "      <td>0.908060</td>\n",
       "      <td>0.617622</td>\n",
       "      <td>0.801239</td>\n",
       "      <td>0.650907</td>\n",
       "      <td>0.868970</td>\n",
       "      <td>0.082190</td>\n",
       "      <td>1679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`relationship` == \" Wife\")</td>\n",
       "      <td>0.873899</td>\n",
       "      <td>0.778485</td>\n",
       "      <td>0.780058</td>\n",
       "      <td>0.775786</td>\n",
       "      <td>0.775885</td>\n",
       "      <td>0.443051</td>\n",
       "      <td>763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.928045   0.777171   \n",
       "1  cohort_0         (`relationship` == \" Husband\")  0.851455   0.755007   \n",
       "2  cohort_1   (`relationship` == \" Not-in-family\")  0.903658   0.686648   \n",
       "3  cohort_2  (`relationship` == \" Other-relative\")  0.936405   0.593950   \n",
       "4  cohort_3       (`relationship` == \" Own-child\")  0.933263   0.552981   \n",
       "5  cohort_4       (`relationship` == \" Unmarried\")  0.908060   0.617622   \n",
       "6  cohort_5            (`relationship` == \" Wife\")  0.873899   0.778485   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.845464  0.796679  0.832934   0.231817     16281  \n",
       "1  0.756020  0.755425  0.757474   0.430200      6523  \n",
       "2  0.815537  0.723557  0.866293   0.122252      4278  \n",
       "3  0.822549  0.629904  0.906667   0.055801       525  \n",
       "4  0.840417  0.565381  0.883804   0.016585      2513  \n",
       "5  0.801239  0.650907  0.868970   0.082190      1679  \n",
       "6  0.780058  0.775786  0.775885   0.443051       763  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Baseline 3\n",
    "\n",
    "pred_train_org = pipe.predict_proba(X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(X_train, y_train, pred_train_org, cohort_col=[\"relationship\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_org, cohort_col=[\"relationship\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, in this case, **we do have some cohorts that have considerably worse results than others**. For example, cohorts ``cohort_2``, ``cohort_3``, and ``cohort_4`` have considerably lower F1 scores than the other cohorts. This could be a problem if the ``relationship`` column is considered a sensitive feature, where a similar performance is expected for all cohorts. In that case, we'll see if we can improve the metrics for these cohorts using different pipelines for each cohort, similar to what we've done in the previous experiments:\n",
    "\n",
    "<a id='cohort3'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.921740</td>\n",
       "      <td>0.776789</td>\n",
       "      <td>0.836764</td>\n",
       "      <td>0.795931</td>\n",
       "      <td>0.835145</td>\n",
       "      <td>0.247375</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`relationship` == \" Husband\")</td>\n",
       "      <td>0.847310</td>\n",
       "      <td>0.763712</td>\n",
       "      <td>0.760496</td>\n",
       "      <td>0.761651</td>\n",
       "      <td>0.765445</td>\n",
       "      <td>0.467993</td>\n",
       "      <td>6523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`relationship` == \" Not-in-family\")</td>\n",
       "      <td>0.894365</td>\n",
       "      <td>0.705684</td>\n",
       "      <td>0.785957</td>\n",
       "      <td>0.735656</td>\n",
       "      <td>0.887564</td>\n",
       "      <td>0.162837</td>\n",
       "      <td>4278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`relationship` == \" Other-relative\")</td>\n",
       "      <td>0.904314</td>\n",
       "      <td>0.986641</td>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.555730</td>\n",
       "      <td>0.973333</td>\n",
       "      <td>0.977238</td>\n",
       "      <td>525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`relationship` == \" Own-child\")</td>\n",
       "      <td>0.908999</td>\n",
       "      <td>0.993800</td>\n",
       "      <td>0.647727</td>\n",
       "      <td>0.724951</td>\n",
       "      <td>0.987664</td>\n",
       "      <td>0.928134</td>\n",
       "      <td>2513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`relationship` == \" Unmarried\")</td>\n",
       "      <td>0.872706</td>\n",
       "      <td>0.707712</td>\n",
       "      <td>0.739665</td>\n",
       "      <td>0.722286</td>\n",
       "      <td>0.938654</td>\n",
       "      <td>0.209798</td>\n",
       "      <td>1679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`relationship` == \" Wife\")</td>\n",
       "      <td>0.830681</td>\n",
       "      <td>0.734595</td>\n",
       "      <td>0.735099</td>\n",
       "      <td>0.734815</td>\n",
       "      <td>0.736566</td>\n",
       "      <td>0.510850</td>\n",
       "      <td>763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.921740   0.776789   \n",
       "1  cohort_0         (`relationship` == \" Husband\")  0.847310   0.763712   \n",
       "2  cohort_1   (`relationship` == \" Not-in-family\")  0.894365   0.705684   \n",
       "3  cohort_2  (`relationship` == \" Other-relative\")  0.904314   0.986641   \n",
       "4  cohort_3       (`relationship` == \" Own-child\")  0.908999   0.993800   \n",
       "5  cohort_4       (`relationship` == \" Unmarried\")  0.872706   0.707712   \n",
       "6  cohort_5            (`relationship` == \" Wife\")  0.830681   0.734595   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.836764  0.795931  0.835145   0.247375     16281  \n",
       "1  0.760496  0.761651  0.765445   0.467993      6523  \n",
       "2  0.785957  0.735656  0.887564   0.162837      4278  \n",
       "3  0.533333  0.555730  0.973333   0.977238       525  \n",
       "4  0.647727  0.724951  0.987664   0.928134      2513  \n",
       "5  0.739665  0.722286  0.938654   0.209798      1679  \n",
       "6  0.735099  0.734815  0.736566   0.510850       763  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Cohort 3\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_col=[\"relationship\"]\n",
    ")\n",
    "cht_manager.fit(X_train, y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "pred_train = cht_manager.predict_proba(X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(X_train, y_train, pred_train, cohort_col=[\"relationship\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"relationship\"], fixed_th=th_dict)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that this time, training different pipelines for the cohorts defined by the ``relationship`` column resulted in considerable improvements in some cohorts, while also attaining slightly worse results in other cohorts. We can see that the F1 score for ``cohort_3`` got improved, but at the same time, for this same cohort, the AUC ROC went down a bit. For ``cohort_5``, the AUC ROC and F1 scores were lower when training different pipelines. This might indicate that training a separate model for ``cohort_3`` and another model for the remaining cohorts might result in a better result. We'll explore this in the following cells.\n",
    "\n",
    "## A Closer Look at the \"relationship\" cohorts\n",
    "\n",
    "In this section, we'll take a closer look at how we can try to improve the results for the cohorts defined by the ``relationship`` column. As we've shown, this set of cohorts does present some considerably different metrics between different cohorts. Here we'll try using different cohort definitions, and data rebalancing to improve the performance over a set of cohorts."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now look at the label distribution over each of the ``relationship`` cohorts using the `plot_value_counts_cohort` function, this will be useful to look for data imbalance (with the help of the ``CohortManager`` class):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    24720\n",
      "1     7841\n",
      "Name: income, dtype: int64\n",
      "\n",
      "cohort_0:\n",
      "0    7275\n",
      "1    5918\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_1:\n",
      "0    7449\n",
      "1     856\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_2:\n",
      "0    944\n",
      "1     37\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_3:\n",
      "0    5001\n",
      "1      67\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_4:\n",
      "0    3228\n",
      "1     218\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_5:\n",
      "0    823\n",
      "1    745\n",
      "Name: income, dtype: int64\n",
      "***********\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    cohort_col=[\"relationship\"]\n",
    ")\n",
    "cohort_set.fit(X=X_train, y=y_train)\n",
    "subsets = cohort_set.get_subsets(X_train, y_train, apply_transform=False)\n",
    "\n",
    "print(y_train.value_counts())\n",
    "for key in subsets.keys():\n",
    "    print(f\"\\n{key}:\\n{subsets[key]['y'].value_counts()}\\n***********\")\n",
    "\n",
    "plot_value_counts_cohort(y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rebalancing the entire dataset\n",
    "\n",
    "Let's start by using a simple rebalance strategy using the ``Rebalance`` class over the entire dataset. We then plot the new label distributions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    24720\n",
      "1    24720\n",
      "Name: income, dtype: int64\n",
      "\n",
      "cohort_0:\n",
      "1    21603\n",
      "0     7275\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_1:\n",
      "0    7449\n",
      "1    1423\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_2:\n",
      "0    944\n",
      "1     40\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_3:\n",
      "0    5001\n",
      "1      77\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_4:\n",
      "0    3228\n",
      "1     238\n",
      "Name: income, dtype: int64\n",
      "***********\n",
      "\n",
      "cohort_5:\n",
      "1    1339\n",
      "0     823\n",
      "Name: income, dtype: int64\n",
      "***********\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance = dp.Rebalance(verbose=False)\n",
    "new_X_train, new_y_train = rebalance.fit_resample(X_train, y_train)\n",
    "\n",
    "cohort_set.fit(X=new_X_train, y=new_y_train)\n",
    "subsets = cohort_set.get_subsets(new_X_train, new_y_train, apply_transform=False)\n",
    "\n",
    "print(new_y_train.value_counts())\n",
    "for key in subsets.keys():\n",
    "    print(f\"\\n{key}:\\n{subsets[key]['y'].value_counts()}\\n***********\")\n",
    "\n",
    "plot_value_counts_cohort(new_y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the label distribution became imbalanced towards the opposite class in ``cohort_0`` after rebalancing. Let's now use the baseline pipeline with the rebalanced dataset, check the results for the ``relationship`` cohorts, and compare it to [Baseline 3](#baseline3):\n",
    "\n",
    "<a id='baseline4'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.921874</td>\n",
       "      <td>0.804539</td>\n",
       "      <td>0.819558</td>\n",
       "      <td>0.811534</td>\n",
       "      <td>0.860574</td>\n",
       "      <td>0.516163</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`relationship` == \" Husband\")</td>\n",
       "      <td>0.835034</td>\n",
       "      <td>0.758721</td>\n",
       "      <td>0.727895</td>\n",
       "      <td>0.729487</td>\n",
       "      <td>0.743830</td>\n",
       "      <td>0.744579</td>\n",
       "      <td>6523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`relationship` == \" Not-in-family\")</td>\n",
       "      <td>0.899895</td>\n",
       "      <td>0.696652</td>\n",
       "      <td>0.812623</td>\n",
       "      <td>0.733305</td>\n",
       "      <td>0.876344</td>\n",
       "      <td>0.162488</td>\n",
       "      <td>4278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`relationship` == \" Other-relative\")</td>\n",
       "      <td>0.953791</td>\n",
       "      <td>0.636910</td>\n",
       "      <td>0.839216</td>\n",
       "      <td>0.687639</td>\n",
       "      <td>0.939048</td>\n",
       "      <td>0.099639</td>\n",
       "      <td>525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`relationship` == \" Own-child\")</td>\n",
       "      <td>0.932081</td>\n",
       "      <td>0.551532</td>\n",
       "      <td>0.866812</td>\n",
       "      <td>0.558926</td>\n",
       "      <td>0.869877</td>\n",
       "      <td>0.015063</td>\n",
       "      <td>2513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`relationship` == \" Unmarried\")</td>\n",
       "      <td>0.903355</td>\n",
       "      <td>0.617015</td>\n",
       "      <td>0.792140</td>\n",
       "      <td>0.650214</td>\n",
       "      <td>0.871352</td>\n",
       "      <td>0.089455</td>\n",
       "      <td>1679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`relationship` == \" Wife\")</td>\n",
       "      <td>0.861501</td>\n",
       "      <td>0.782736</td>\n",
       "      <td>0.780328</td>\n",
       "      <td>0.781221</td>\n",
       "      <td>0.783748</td>\n",
       "      <td>0.603711</td>\n",
       "      <td>763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.921874   0.804539   \n",
       "1  cohort_0         (`relationship` == \" Husband\")  0.835034   0.758721   \n",
       "2  cohort_1   (`relationship` == \" Not-in-family\")  0.899895   0.696652   \n",
       "3  cohort_2  (`relationship` == \" Other-relative\")  0.953791   0.636910   \n",
       "4  cohort_3       (`relationship` == \" Own-child\")  0.932081   0.551532   \n",
       "5  cohort_4       (`relationship` == \" Unmarried\")  0.903355   0.617015   \n",
       "6  cohort_5            (`relationship` == \" Wife\")  0.861501   0.782736   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.819558  0.811534  0.860574   0.516163     16281  \n",
       "1  0.727895  0.729487  0.743830   0.744579      6523  \n",
       "2  0.812623  0.733305  0.876344   0.162488      4278  \n",
       "3  0.839216  0.687639  0.939048   0.099639       525  \n",
       "4  0.866812  0.558926  0.869877   0.015063      2513  \n",
       "5  0.792140  0.650214  0.871352   0.089455      1679  \n",
       "6  0.780328  0.781221  0.783748   0.603711       763  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Baseline 4\n",
    "\n",
    "pipe = Pipeline([\n",
    "            (\"scaler\", dp.DataStandardScaler(verbose=False)),\n",
    "            (\"encoder\", dp.EncoderOHE(verbose=False)),\n",
    "            (\"estimator\", get_model()),\n",
    "        ])\n",
    "pipe.fit(new_X_train, new_y_train)\n",
    "pred_org = pipe.predict_proba(X_test)\n",
    "\n",
    "pred_train_org = pipe.predict_proba(new_X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(new_X_train, new_y_train, pred_train_org, cohort_col=[\"relationship\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_org, cohort_col=[\"relationship\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As expected, we didn't have a considerable improvement. The only meaningful improvement is for ``cohort_2``. For the other cohorts, we either got a slight increase or decrease in some metrics (compared to [Baseline 3](#baseline3)).\n",
    "\n",
    "We'll now try using the cohort-based pipeline over the rebalanced dataset:\n",
    "\n",
    "<a id='cohort4'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.917939</td>\n",
       "      <td>0.807377</td>\n",
       "      <td>0.802695</td>\n",
       "      <td>0.804988</td>\n",
       "      <td>0.860328</td>\n",
       "      <td>0.558872</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`relationship` == \" Husband\")</td>\n",
       "      <td>0.831617</td>\n",
       "      <td>0.756983</td>\n",
       "      <td>0.728497</td>\n",
       "      <td>0.730241</td>\n",
       "      <td>0.743830</td>\n",
       "      <td>0.735383</td>\n",
       "      <td>6523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`relationship` == \" Not-in-family\")</td>\n",
       "      <td>0.900655</td>\n",
       "      <td>0.712755</td>\n",
       "      <td>0.789351</td>\n",
       "      <td>0.742101</td>\n",
       "      <td>0.891772</td>\n",
       "      <td>0.189098</td>\n",
       "      <td>4278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`relationship` == \" Other-relative\")</td>\n",
       "      <td>0.905359</td>\n",
       "      <td>0.986641</td>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.555730</td>\n",
       "      <td>0.973333</td>\n",
       "      <td>0.972915</td>\n",
       "      <td>525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`relationship` == \" Own-child\")</td>\n",
       "      <td>0.918816</td>\n",
       "      <td>0.993800</td>\n",
       "      <td>0.647727</td>\n",
       "      <td>0.724951</td>\n",
       "      <td>0.987664</td>\n",
       "      <td>0.889831</td>\n",
       "      <td>2513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`relationship` == \" Unmarried\")</td>\n",
       "      <td>0.881868</td>\n",
       "      <td>0.690658</td>\n",
       "      <td>0.721922</td>\n",
       "      <td>0.704817</td>\n",
       "      <td>0.934485</td>\n",
       "      <td>0.234289</td>\n",
       "      <td>1679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`relationship` == \" Wife\")</td>\n",
       "      <td>0.835875</td>\n",
       "      <td>0.758354</td>\n",
       "      <td>0.759105</td>\n",
       "      <td>0.758665</td>\n",
       "      <td>0.760157</td>\n",
       "      <td>0.577520</td>\n",
       "      <td>763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.917939   0.807377   \n",
       "1  cohort_0         (`relationship` == \" Husband\")  0.831617   0.756983   \n",
       "2  cohort_1   (`relationship` == \" Not-in-family\")  0.900655   0.712755   \n",
       "3  cohort_2  (`relationship` == \" Other-relative\")  0.905359   0.986641   \n",
       "4  cohort_3       (`relationship` == \" Own-child\")  0.918816   0.993800   \n",
       "5  cohort_4       (`relationship` == \" Unmarried\")  0.881868   0.690658   \n",
       "6  cohort_5            (`relationship` == \" Wife\")  0.835875   0.758354   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.802695  0.804988  0.860328   0.558872     16281  \n",
       "1  0.728497  0.730241  0.743830   0.735383      6523  \n",
       "2  0.789351  0.742101  0.891772   0.189098      4278  \n",
       "3  0.533333  0.555730  0.973333   0.972915       525  \n",
       "4  0.647727  0.724951  0.987664   0.889831      2513  \n",
       "5  0.721922  0.704817  0.934485   0.234289      1679  \n",
       "6  0.759105  0.758665  0.760157   0.577520       763  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Cohort 4\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_col=[\"relationship\"]\n",
    ")\n",
    "cht_manager.fit(new_X_train, new_y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "pred_train = cht_manager.predict_proba(new_X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(new_X_train, new_y_train, pred_train, cohort_col=[\"relationship\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"relationship\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results shown above depict a similar scenario to the previous results (baseline pipeline over the rebalanced dataset): an improvement over some cohorts and performance reduction for other cohorts. Once again, this is because a different number of data points were added to each cohort, due to the nature of the SMOTE rebalancing technique (used in the ``Rebalance`` class).\n",
    "\n",
    "### Rebalancing only a few cohorts\n",
    "\n",
    "Let's try to mitigate these issues by rebalancing only a few cohorts because as we've seen in the label distribution of the original dataset, only a few cohorts have a serious label imbalance. This way, we'll try to improve the results of only a few cohorts. In the following cell, we use the ``Rebalance`` class together with the ``CohortManager`` in order to rebalance only cohorts ``cohort_2`` and ``cohort_3``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c0_pipe = []\n",
    "c1_pipe = []\n",
    "c2_pipe = [dp.Rebalance(strategy_over=0.2, verbose=False)]\n",
    "c3_pipe = [dp.Rebalance(strategy_over=0.2, verbose=False)]\n",
    "c4_pipe = []\n",
    "c5_pipe = []\n",
    "\n",
    "rebalance_cohort = CohortManager(\n",
    "    transform_pipe=[c0_pipe, c1_pipe, c2_pipe, c3_pipe, c4_pipe, c5_pipe],\n",
    "    cohort_col=[\"relationship\"]\n",
    ")\n",
    "new_X_train, new_y_train = rebalance_cohort.fit_resample(X_train, y_train)\n",
    "\n",
    "subsets = rebalance_cohort.get_subsets(new_X_train, new_y_train, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll now repeat the same experiments as before. We'll first train the baseline pipeline over the new rebalanced dataset:\n",
    "\n",
    "<a id='baseline5'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.922955</td>\n",
       "      <td>0.766924</td>\n",
       "      <td>0.838044</td>\n",
       "      <td>0.785133</td>\n",
       "      <td>0.821325</td>\n",
       "      <td>0.248997</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`relationship` == \" Husband\")</td>\n",
       "      <td>0.849175</td>\n",
       "      <td>0.753510</td>\n",
       "      <td>0.755060</td>\n",
       "      <td>0.754039</td>\n",
       "      <td>0.755787</td>\n",
       "      <td>0.426605</td>\n",
       "      <td>6523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`relationship` == \" Not-in-family\")</td>\n",
       "      <td>0.900467</td>\n",
       "      <td>0.673765</td>\n",
       "      <td>0.810531</td>\n",
       "      <td>0.708795</td>\n",
       "      <td>0.853436</td>\n",
       "      <td>0.160477</td>\n",
       "      <td>4278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`relationship` == \" Other-relative\")</td>\n",
       "      <td>0.949020</td>\n",
       "      <td>0.603624</td>\n",
       "      <td>0.827451</td>\n",
       "      <td>0.644309</td>\n",
       "      <td>0.916190</td>\n",
       "      <td>0.183510</td>\n",
       "      <td>525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`relationship` == \" Own-child\")</td>\n",
       "      <td>0.920128</td>\n",
       "      <td>0.584059</td>\n",
       "      <td>0.781099</td>\n",
       "      <td>0.621451</td>\n",
       "      <td>0.942698</td>\n",
       "      <td>0.211052</td>\n",
       "      <td>2513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`relationship` == \" Unmarried\")</td>\n",
       "      <td>0.905372</td>\n",
       "      <td>0.628509</td>\n",
       "      <td>0.794202</td>\n",
       "      <td>0.665738</td>\n",
       "      <td>0.885051</td>\n",
       "      <td>0.096555</td>\n",
       "      <td>1679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`relationship` == \" Wife\")</td>\n",
       "      <td>0.870593</td>\n",
       "      <td>0.775162</td>\n",
       "      <td>0.776953</td>\n",
       "      <td>0.773108</td>\n",
       "      <td>0.773263</td>\n",
       "      <td>0.447575</td>\n",
       "      <td>763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.922955   0.766924   \n",
       "1  cohort_0         (`relationship` == \" Husband\")  0.849175   0.753510   \n",
       "2  cohort_1   (`relationship` == \" Not-in-family\")  0.900467   0.673765   \n",
       "3  cohort_2  (`relationship` == \" Other-relative\")  0.949020   0.603624   \n",
       "4  cohort_3       (`relationship` == \" Own-child\")  0.920128   0.584059   \n",
       "5  cohort_4       (`relationship` == \" Unmarried\")  0.905372   0.628509   \n",
       "6  cohort_5            (`relationship` == \" Wife\")  0.870593   0.775162   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.838044  0.785133  0.821325   0.248997     16281  \n",
       "1  0.755060  0.754039  0.755787   0.426605      6523  \n",
       "2  0.810531  0.708795  0.853436   0.160477      4278  \n",
       "3  0.827451  0.644309  0.916190   0.183510       525  \n",
       "4  0.781099  0.621451  0.942698   0.211052      2513  \n",
       "5  0.794202  0.665738  0.885051   0.096555      1679  \n",
       "6  0.776953  0.773108  0.773263   0.447575       763  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Baseline 5\n",
    "\n",
    "pipe = Pipeline([\n",
    "            (\"scaler\", dp.DataStandardScaler(verbose=False)),\n",
    "            (\"encoder\", dp.EncoderOHE(verbose=False)),\n",
    "            (\"estimator\", get_model()),\n",
    "        ])\n",
    "pipe.fit(new_X_train, new_y_train)\n",
    "pred_org = pipe.predict_proba(X_test)\n",
    "\n",
    "pred_train_org = pipe.predict_proba(new_X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(new_X_train, new_y_train, pred_train_org, cohort_col=[\"relationship\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_org, cohort_col=[\"relationship\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once again, we did get improvements for some cohorts, and performance reduction for others. Let's try using the cohort-based pipeline over this new rebalanced dataset:\n",
    "\n",
    "<a id='cohort5'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.921497</td>\n",
       "      <td>0.781029</td>\n",
       "      <td>0.836569</td>\n",
       "      <td>0.799910</td>\n",
       "      <td>0.840059</td>\n",
       "      <td>0.268842</td>\n",
       "      <td>16281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`relationship` == \" Husband\")</td>\n",
       "      <td>0.847310</td>\n",
       "      <td>0.763712</td>\n",
       "      <td>0.760496</td>\n",
       "      <td>0.761651</td>\n",
       "      <td>0.765445</td>\n",
       "      <td>0.467993</td>\n",
       "      <td>6523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`relationship` == \" Not-in-family\")</td>\n",
       "      <td>0.894365</td>\n",
       "      <td>0.705684</td>\n",
       "      <td>0.785957</td>\n",
       "      <td>0.735656</td>\n",
       "      <td>0.887564</td>\n",
       "      <td>0.162837</td>\n",
       "      <td>4278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`relationship` == \" Other-relative\")</td>\n",
       "      <td>0.888235</td>\n",
       "      <td>0.863484</td>\n",
       "      <td>0.599020</td>\n",
       "      <td>0.651590</td>\n",
       "      <td>0.975238</td>\n",
       "      <td>0.937766</td>\n",
       "      <td>525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`relationship` == \" Own-child\")</td>\n",
       "      <td>0.902776</td>\n",
       "      <td>0.780872</td>\n",
       "      <td>0.724235</td>\n",
       "      <td>0.749223</td>\n",
       "      <td>0.984481</td>\n",
       "      <td>0.470157</td>\n",
       "      <td>2513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`relationship` == \" Unmarried\")</td>\n",
       "      <td>0.872706</td>\n",
       "      <td>0.707712</td>\n",
       "      <td>0.739665</td>\n",
       "      <td>0.722286</td>\n",
       "      <td>0.938654</td>\n",
       "      <td>0.209798</td>\n",
       "      <td>1679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`relationship` == \" Wife\")</td>\n",
       "      <td>0.830681</td>\n",
       "      <td>0.734595</td>\n",
       "      <td>0.735099</td>\n",
       "      <td>0.734815</td>\n",
       "      <td>0.736566</td>\n",
       "      <td>0.510850</td>\n",
       "      <td>763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.921497   0.781029   \n",
       "1  cohort_0         (`relationship` == \" Husband\")  0.847310   0.763712   \n",
       "2  cohort_1   (`relationship` == \" Not-in-family\")  0.894365   0.705684   \n",
       "3  cohort_2  (`relationship` == \" Other-relative\")  0.888235   0.863484   \n",
       "4  cohort_3       (`relationship` == \" Own-child\")  0.902776   0.780872   \n",
       "5  cohort_4       (`relationship` == \" Unmarried\")  0.872706   0.707712   \n",
       "6  cohort_5            (`relationship` == \" Wife\")  0.830681   0.734595   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.836569  0.799910  0.840059   0.268842     16281  \n",
       "1  0.760496  0.761651  0.765445   0.467993      6523  \n",
       "2  0.785957  0.735656  0.887564   0.162837      4278  \n",
       "3  0.599020  0.651590  0.975238   0.937766       525  \n",
       "4  0.724235  0.749223  0.984481   0.470157      2513  \n",
       "5  0.739665  0.722286  0.938654   0.209798      1679  \n",
       "6  0.735099  0.734815  0.736566   0.510850       763  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Cohort 5\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_col=[\"relationship\"]\n",
    ")\n",
    "cht_manager.fit(new_X_train, new_y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "pred_train = cht_manager.predict_proba(new_X_train)\n",
    "metrics_train, th_dict = fetch_cohort_results(new_X_train, new_y_train, pred_train, cohort_col=[\"relationship\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"relationship\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's compare this last results with the results obtained by using the cohort-base pipeline over the original dataset ([Cohort 3](#cohort3)): by using the rebalanced dataset, we managed to improve the performance for ``cohort_2`` and ``cohort_3``, where the performance increase for ``cohort_2`` was considerably higher."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "rai",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13 (main, Oct 13 2022, 21:15:33) \n[GCC 11.2.0]"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "239972f3e2cce5deeefd34fe5d6dd927057b08952d864776048f8db51d1a831a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
