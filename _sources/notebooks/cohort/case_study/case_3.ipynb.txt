{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cohort Case Study 3\n",
    "\n",
    "This notebook will follow a similar approach to what was done in the notebook ``Cohort Case Study 2``.\n",
    "\n",
    "We'll start by downloading the dataset and reading the train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>education</th>\n",
       "      <th>gender</th>\n",
       "      <th>recruitment_channel</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_7</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>f</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Operations</td>\n",
       "      <td>region_22</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_19</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_23</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Technology</td>\n",
       "      <td>region_26</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54803</th>\n",
       "      <td>Technology</td>\n",
       "      <td>region_14</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54804</th>\n",
       "      <td>Operations</td>\n",
       "      <td>region_27</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>f</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>56</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54805</th>\n",
       "      <td>Analytics</td>\n",
       "      <td>region_1</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>79</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54806</th>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54807</th>\n",
       "      <td>HR</td>\n",
       "      <td>region_22</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>54808 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              department     region         education gender  \\\n",
       "0      Sales & Marketing   region_7  Master's & above      f   \n",
       "1             Operations  region_22        Bachelor's      m   \n",
       "2      Sales & Marketing  region_19        Bachelor's      m   \n",
       "3      Sales & Marketing  region_23        Bachelor's      m   \n",
       "4             Technology  region_26        Bachelor's      m   \n",
       "...                  ...        ...               ...    ...   \n",
       "54803         Technology  region_14        Bachelor's      m   \n",
       "54804         Operations  region_27  Master's & above      f   \n",
       "54805          Analytics   region_1        Bachelor's      m   \n",
       "54806  Sales & Marketing   region_9               NaN      m   \n",
       "54807                 HR  region_22        Bachelor's      m   \n",
       "\n",
       "      recruitment_channel  no_of_trainings  age  previous_year_rating  \\\n",
       "0                sourcing                1   35                   5.0   \n",
       "1                   other                1   30                   5.0   \n",
       "2                sourcing                1   34                   3.0   \n",
       "3                   other                2   39                   1.0   \n",
       "4                   other                1   45                   3.0   \n",
       "...                   ...              ...  ...                   ...   \n",
       "54803            sourcing                1   48                   3.0   \n",
       "54804               other                1   37                   2.0   \n",
       "54805               other                1   27                   5.0   \n",
       "54806            sourcing                1   29                   1.0   \n",
       "54807               other                1   27                   1.0   \n",
       "\n",
       "       length_of_service  KPIs_met >80%  awards_won?  avg_training_score  \\\n",
       "0                      8              1            0                  49   \n",
       "1                      4              0            0                  60   \n",
       "2                      7              0            0                  50   \n",
       "3                     10              0            0                  50   \n",
       "4                      2              0            0                  73   \n",
       "...                  ...            ...          ...                 ...   \n",
       "54803                 17              0            0                  78   \n",
       "54804                  6              0            0                  56   \n",
       "54805                  3              1            0                  79   \n",
       "54806                  2              0            0                  45   \n",
       "54807                  5              0            0                  49   \n",
       "\n",
       "       is_promoted  \n",
       "0                0  \n",
       "1                0  \n",
       "2                0  \n",
       "3                0  \n",
       "4                0  \n",
       "...            ...  \n",
       "54803            0  \n",
       "54804            0  \n",
       "54805            0  \n",
       "54806            0  \n",
       "54807            0  \n",
       "\n",
       "[54808 rows x 13 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sys\n",
    "sys.path.append('../../../notebooks')\n",
    "import random\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xgboost as xgb\n",
    "from sklearn.pipeline import Pipeline\n",
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import matplotlib.pyplot as plt\n",
    "import uci_dataset as database\n",
    "\n",
    "from raimitigations.utils import split_data\n",
    "import raimitigations.dataprocessing as dp\n",
    "from raimitigations.cohort import (\n",
    "    CohortDefinition,\n",
    "    CohortManager,\n",
    "    fetch_cohort_results\n",
    ")\n",
    "from download import download_datasets\n",
    "\n",
    "SEED = 42\n",
    "#SEED = None\n",
    "\n",
    "np.random.seed(SEED)\n",
    "random.seed(SEED)\n",
    "\n",
    "data_dir = '../../../datasets/'\n",
    "download_datasets(data_dir)\n",
    "df =  pd.read_csv(data_dir + 'hr_promotion/train.csv')\n",
    "df.drop(columns=['employee_id'], inplace=True)\n",
    "label_col = 'is_promoted'\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "department              False\n",
       "region                  False\n",
       "education                True\n",
       "gender                  False\n",
       "recruitment_channel     False\n",
       "no_of_trainings         False\n",
       "age                     False\n",
       "previous_year_rating     True\n",
       "length_of_service       False\n",
       "KPIs_met >80%           False\n",
       "awards_won?             False\n",
       "avg_training_score      False\n",
       "is_promoted             False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(38365, 12)\n",
      "(16443, 12)\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = split_data(df, label_col, test_size=0.3)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once again, we'll be using the same estimator for all of our experiments, since our goal here is to compare different approaches to cohort processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_model():\n",
    "    model = LGBMClassifier(random_state=SEED)\n",
    "    #model = LogisticRegression()\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initial analysis of multiple cohort definitions\n",
    "\n",
    "Now that we have our dataset, we can create a simple pipeline and fit it using the training data. We'll then use the ``fetch_cohort_results`` function to show the results obtained for the entire dataset, as well as for different cohorts. Notice that this function computes all metrics for each cohort separately, and therefore, different thresholds might be encountered for each cohort (the optimal threshold of a given set of predictions is found using the ROC curve)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = Pipeline([\n",
    "    (\"imputer\", dp.BasicImputer(verbose=False)),\n",
    "    (\"scaler\", dp.DataStandardScaler(verbose=False)),\n",
    "    (\"endcoder\", dp.EncoderOHE(verbose=False)),\n",
    "    (\"estimator\", get_model())\n",
    "])\n",
    "pipe.fit(X_train, y_train)\n",
    "pred = pipe.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our first analysis will focus on the cohorts defined by the ``department`` feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.906538</td>\n",
       "      <td>0.616454</td>\n",
       "      <td>0.823112</td>\n",
       "      <td>0.615452</td>\n",
       "      <td>0.753391</td>\n",
       "      <td>0.089788</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`department` == \"Analytics\")</td>\n",
       "      <td>0.776998</td>\n",
       "      <td>0.578525</td>\n",
       "      <td>0.722444</td>\n",
       "      <td>0.520467</td>\n",
       "      <td>0.620292</td>\n",
       "      <td>0.087371</td>\n",
       "      <td>1646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`department` == \"Finance\")</td>\n",
       "      <td>0.928949</td>\n",
       "      <td>0.648721</td>\n",
       "      <td>0.856663</td>\n",
       "      <td>0.673398</td>\n",
       "      <td>0.812336</td>\n",
       "      <td>0.114001</td>\n",
       "      <td>762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`department` == \"HR\")</td>\n",
       "      <td>0.915106</td>\n",
       "      <td>0.584000</td>\n",
       "      <td>0.851852</td>\n",
       "      <td>0.556879</td>\n",
       "      <td>0.720430</td>\n",
       "      <td>0.052669</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`department` == \"Legal\")</td>\n",
       "      <td>0.900643</td>\n",
       "      <td>0.575758</td>\n",
       "      <td>0.864952</td>\n",
       "      <td>0.553512</td>\n",
       "      <td>0.742331</td>\n",
       "      <td>0.079485</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`department` == \"Operations\")</td>\n",
       "      <td>0.904996</td>\n",
       "      <td>0.618573</td>\n",
       "      <td>0.813711</td>\n",
       "      <td>0.614847</td>\n",
       "      <td>0.743316</td>\n",
       "      <td>0.090309</td>\n",
       "      <td>3366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`department` == \"Procurement\")</td>\n",
       "      <td>0.906561</td>\n",
       "      <td>0.631548</td>\n",
       "      <td>0.837096</td>\n",
       "      <td>0.631717</td>\n",
       "      <td>0.751835</td>\n",
       "      <td>0.090988</td>\n",
       "      <td>2180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`department` == \"R&amp;D\")</td>\n",
       "      <td>0.813484</td>\n",
       "      <td>0.550874</td>\n",
       "      <td>0.751133</td>\n",
       "      <td>0.511048</td>\n",
       "      <td>0.706790</td>\n",
       "      <td>0.096184</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`department` == \"Sales &amp; Marketing\")</td>\n",
       "      <td>0.941234</td>\n",
       "      <td>0.625089</td>\n",
       "      <td>0.881531</td>\n",
       "      <td>0.638384</td>\n",
       "      <td>0.794311</td>\n",
       "      <td>0.035142</td>\n",
       "      <td>5027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`department` == \"Technology\")</td>\n",
       "      <td>0.888814</td>\n",
       "      <td>0.626106</td>\n",
       "      <td>0.798857</td>\n",
       "      <td>0.612364</td>\n",
       "      <td>0.713250</td>\n",
       "      <td>0.078958</td>\n",
       "      <td>2068</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.906538   0.616454   \n",
       "1  cohort_0          (`department` == \"Analytics\")  0.776998   0.578525   \n",
       "2  cohort_1            (`department` == \"Finance\")  0.928949   0.648721   \n",
       "3  cohort_2                 (`department` == \"HR\")  0.915106   0.584000   \n",
       "4  cohort_3              (`department` == \"Legal\")  0.900643   0.575758   \n",
       "5  cohort_4         (`department` == \"Operations\")  0.904996   0.618573   \n",
       "6  cohort_5        (`department` == \"Procurement\")  0.906561   0.631548   \n",
       "7  cohort_6                (`department` == \"R&D\")  0.813484   0.550874   \n",
       "8  cohort_7  (`department` == \"Sales & Marketing\")  0.941234   0.625089   \n",
       "9  cohort_8         (`department` == \"Technology\")  0.888814   0.626106   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.823112  0.615452  0.753391   0.089788     16443  \n",
       "1  0.722444  0.520467  0.620292   0.087371      1646  \n",
       "2  0.856663  0.673398  0.812336   0.114001       762  \n",
       "3  0.851852  0.556879  0.720430   0.052669       744  \n",
       "4  0.864952  0.553512  0.742331   0.079485       326  \n",
       "5  0.813711  0.614847  0.743316   0.090309      3366  \n",
       "6  0.837096  0.631717  0.751835   0.090988      2180  \n",
       "7  0.751133  0.511048  0.706790   0.096184       324  \n",
       "8  0.881531  0.638384  0.794311   0.035142      5027  \n",
       "9  0.798857  0.612364  0.713250   0.078958      2068  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fetch_cohort_results(X_test, y_test, pred, cohort_col=[\"department\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now check the results for the cohorts defined by the ``education`` feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.906538</td>\n",
       "      <td>0.616454</td>\n",
       "      <td>0.823112</td>\n",
       "      <td>0.615452</td>\n",
       "      <td>0.753391</td>\n",
       "      <td>0.089788</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`education` == \"Bachelor's\")</td>\n",
       "      <td>0.901324</td>\n",
       "      <td>0.599656</td>\n",
       "      <td>0.815149</td>\n",
       "      <td>0.568436</td>\n",
       "      <td>0.692456</td>\n",
       "      <td>0.049121</td>\n",
       "      <td>10909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`education` == \"Below Secondary\")</td>\n",
       "      <td>0.880221</td>\n",
       "      <td>0.633316</td>\n",
       "      <td>0.823710</td>\n",
       "      <td>0.649573</td>\n",
       "      <td>0.790984</td>\n",
       "      <td>0.108318</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`education` == \"Master's &amp; above\")</td>\n",
       "      <td>0.911406</td>\n",
       "      <td>0.631539</td>\n",
       "      <td>0.833324</td>\n",
       "      <td>0.627961</td>\n",
       "      <td>0.742454</td>\n",
       "      <td>0.091447</td>\n",
       "      <td>4539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`education`.isnull())</td>\n",
       "      <td>0.947114</td>\n",
       "      <td>0.615054</td>\n",
       "      <td>0.885469</td>\n",
       "      <td>0.637268</td>\n",
       "      <td>0.826897</td>\n",
       "      <td>0.089839</td>\n",
       "      <td>751</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                            cht_query       roc  precision  \\\n",
       "0       all                                  all  0.906538   0.616454   \n",
       "1  cohort_0        (`education` == \"Bachelor's\")  0.901324   0.599656   \n",
       "2  cohort_1   (`education` == \"Below Secondary\")  0.880221   0.633316   \n",
       "3  cohort_2  (`education` == \"Master's & above\")  0.911406   0.631539   \n",
       "4  cohort_3               (`education`.isnull())  0.947114   0.615054   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.823112  0.615452  0.753391   0.089788     16443  \n",
       "1  0.815149  0.568436  0.692456   0.049121     10909  \n",
       "2  0.823710  0.649573  0.790984   0.108318       244  \n",
       "3  0.833324  0.627961  0.742454   0.091447      4539  \n",
       "4  0.885469  0.637268  0.826897   0.089839       751  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fetch_cohort_results(X_test, y_test, pred, cohort_col=[\"education\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now check the results for the cohorts defined by the ``gender`` feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.906538</td>\n",
       "      <td>0.616454</td>\n",
       "      <td>0.823112</td>\n",
       "      <td>0.615452</td>\n",
       "      <td>0.753391</td>\n",
       "      <td>0.089788</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`gender` == \"f\")</td>\n",
       "      <td>0.901428</td>\n",
       "      <td>0.622138</td>\n",
       "      <td>0.818894</td>\n",
       "      <td>0.615670</td>\n",
       "      <td>0.736268</td>\n",
       "      <td>0.090309</td>\n",
       "      <td>4770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`gender` == \"m\")</td>\n",
       "      <td>0.908411</td>\n",
       "      <td>0.613932</td>\n",
       "      <td>0.824385</td>\n",
       "      <td>0.615038</td>\n",
       "      <td>0.760644</td>\n",
       "      <td>0.089788</td>\n",
       "      <td>11673</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort          cht_query       roc  precision    recall        f1  \\\n",
       "0       all                all  0.906538   0.616454  0.823112  0.615452   \n",
       "1  cohort_0  (`gender` == \"f\")  0.901428   0.622138  0.818894  0.615670   \n",
       "2  cohort_1  (`gender` == \"m\")  0.908411   0.613932  0.824385  0.615038   \n",
       "\n",
       "   accuracy  threshold  cht_size  \n",
       "0  0.753391   0.089788     16443  \n",
       "1  0.736268   0.090309      4770  \n",
       "2  0.760644   0.089788     11673  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fetch_cohort_results(X_test, y_test, pred, cohort_col=[\"gender\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, let's check the results for the cohorts defined by the ``recruitment_channel`` feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.906538</td>\n",
       "      <td>0.616454</td>\n",
       "      <td>0.823112</td>\n",
       "      <td>0.615452</td>\n",
       "      <td>0.753391</td>\n",
       "      <td>0.089788</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`recruitment_channel` == \"other\")</td>\n",
       "      <td>0.904970</td>\n",
       "      <td>0.615133</td>\n",
       "      <td>0.818465</td>\n",
       "      <td>0.615180</td>\n",
       "      <td>0.755889</td>\n",
       "      <td>0.089788</td>\n",
       "      <td>9127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`recruitment_channel` == \"referred\")</td>\n",
       "      <td>0.877682</td>\n",
       "      <td>0.631111</td>\n",
       "      <td>0.787951</td>\n",
       "      <td>0.637350</td>\n",
       "      <td>0.756329</td>\n",
       "      <td>0.156246</td>\n",
       "      <td>316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`recruitment_channel` == \"sourcing\")</td>\n",
       "      <td>0.910529</td>\n",
       "      <td>0.621039</td>\n",
       "      <td>0.834244</td>\n",
       "      <td>0.623219</td>\n",
       "      <td>0.761000</td>\n",
       "      <td>0.090309</td>\n",
       "      <td>7000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.906538   0.616454   \n",
       "1  cohort_0     (`recruitment_channel` == \"other\")  0.904970   0.615133   \n",
       "2  cohort_1  (`recruitment_channel` == \"referred\")  0.877682   0.631111   \n",
       "3  cohort_2  (`recruitment_channel` == \"sourcing\")  0.910529   0.621039   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.823112  0.615452  0.753391   0.089788     16443  \n",
       "1  0.818465  0.615180  0.755889   0.089788      9127  \n",
       "2  0.787951  0.637350  0.756329   0.156246       316  \n",
       "3  0.834244  0.623219  0.761000   0.090309      7000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fetch_cohort_results(X_test, y_test, pred, cohort_col=[\"recruitment_channel\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyzing the results, we can see that many of the cohort definitions result in cohorts with relatively similar metrics, with the exception of the ``department`` column. Therefore, for the rest of this notebook, we'll make an in-depth analysis of how we can improve the performance metrics for the cohorts defined by the ``department`` column.\n",
    "\n",
    "## A Closer Look at the \"department\" cohorts\n",
    "\n",
    "In this section, we'll take a closer look at how we can try to improve the results for the cohorts defined by the ``department`` column. As we've shown, this set of cohorts does present some considerably different metrics between different cohorts. Here we'll try using different cohort definitions, and data rebalancing to improve the performance over a set of cohorts.\n",
    "\n",
    "Before starting the analysis, we'll create a function for plotting the label distribution over different cohorts. This will be useful when we start looking at data imbalance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "def plot_value_counts_cohort(y_full, subsets, normalize = True):\n",
    "    plt.figure().clear()\n",
    "    plt.close()\n",
    "    plt.cla()\n",
    "    plt.clf()\n",
    "    fig = plt.gcf()\n",
    "    fig.set_size_inches(18, 10)\n",
    "    sns.set_theme(style=\"whitegrid\")\n",
    "    if normalize:\n",
    "        plt.ylim(0, 1)\n",
    "    #plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0, fontsize=23)\n",
    "\n",
    "    value_count = y_full.value_counts(normalize=normalize)\n",
    "\n",
    "    subsets_col = ['full df', 'full df']\n",
    "    counts_col = [value_count[0], value_count[1]]\n",
    "    label_col = [0, 1]\n",
    "\n",
    "    for key in subsets.keys():\n",
    "        value_count = subsets[key][\"y\"].value_counts(normalize=normalize)\n",
    "        subsets_col += [key, key]\n",
    "        counts_col += [value_count[0], value_count[1]]\n",
    "        label_col += [0, 1]\n",
    "\n",
    "    count_df = pd.DataFrame({\"subsets\":subsets_col, \"label\":label_col, \"counts\":counts_col})\n",
    "    \n",
    "    y_label = \"Occurrences\"\n",
    "    if normalize:\n",
    "        y_label = \"Fraction\"\n",
    "\n",
    "    ax = sns.barplot(x=\"subsets\", y=\"counts\", hue=\"label\", data=count_df)\n",
    "    ax.set_xlabel(\"Subsets\", fontsize=30)\n",
    "    ax.set_ylabel(y_label, fontsize=30)\n",
    "    #ax.tick_params(labelsize=15)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cohort-based pipeline for the ``department`` column\n",
    "\n",
    "As we've done in other examples from other ``Cohort Case Study`` notebooks, we'll create a cohort-based pipeline using the ``department`` column as the cohort definition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:172: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.896297</td>\n",
       "      <td>0.608318</td>\n",
       "      <td>0.811462</td>\n",
       "      <td>0.597154</td>\n",
       "      <td>0.730889</td>\n",
       "      <td>0.025164</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`department` == \"Analytics\")</td>\n",
       "      <td>0.739505</td>\n",
       "      <td>0.569908</td>\n",
       "      <td>0.689931</td>\n",
       "      <td>0.533177</td>\n",
       "      <td>0.657959</td>\n",
       "      <td>0.051147</td>\n",
       "      <td>1646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`department` == \"Finance\")</td>\n",
       "      <td>0.914678</td>\n",
       "      <td>0.667155</td>\n",
       "      <td>0.821153</td>\n",
       "      <td>0.704124</td>\n",
       "      <td>0.858268</td>\n",
       "      <td>0.043113</td>\n",
       "      <td>762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`department` == \"HR\")</td>\n",
       "      <td>0.896995</td>\n",
       "      <td>0.582149</td>\n",
       "      <td>0.822039</td>\n",
       "      <td>0.568160</td>\n",
       "      <td>0.748656</td>\n",
       "      <td>0.001879</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`department` == \"Legal\")</td>\n",
       "      <td>0.918971</td>\n",
       "      <td>0.627995</td>\n",
       "      <td>0.846945</td>\n",
       "      <td>0.669595</td>\n",
       "      <td>0.889571</td>\n",
       "      <td>0.046406</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`department` == \"Operations\")</td>\n",
       "      <td>0.895444</td>\n",
       "      <td>0.605694</td>\n",
       "      <td>0.801792</td>\n",
       "      <td>0.575266</td>\n",
       "      <td>0.687463</td>\n",
       "      <td>0.025188</td>\n",
       "      <td>3366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`department` == \"Procurement\")</td>\n",
       "      <td>0.902884</td>\n",
       "      <td>0.622536</td>\n",
       "      <td>0.833767</td>\n",
       "      <td>0.602760</td>\n",
       "      <td>0.711009</td>\n",
       "      <td>0.012863</td>\n",
       "      <td>2180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`department` == \"R&amp;D\")</td>\n",
       "      <td>0.688026</td>\n",
       "      <td>0.529920</td>\n",
       "      <td>0.667961</td>\n",
       "      <td>0.385691</td>\n",
       "      <td>0.487654</td>\n",
       "      <td>0.004688</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`department` == \"Sales &amp; Marketing\")</td>\n",
       "      <td>0.937158</td>\n",
       "      <td>0.625365</td>\n",
       "      <td>0.881852</td>\n",
       "      <td>0.638935</td>\n",
       "      <td>0.794907</td>\n",
       "      <td>0.014010</td>\n",
       "      <td>5027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`department` == \"Technology\")</td>\n",
       "      <td>0.874313</td>\n",
       "      <td>0.638954</td>\n",
       "      <td>0.782902</td>\n",
       "      <td>0.655217</td>\n",
       "      <td>0.782398</td>\n",
       "      <td>0.107164</td>\n",
       "      <td>2068</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.896297   0.608318   \n",
       "1  cohort_0          (`department` == \"Analytics\")  0.739505   0.569908   \n",
       "2  cohort_1            (`department` == \"Finance\")  0.914678   0.667155   \n",
       "3  cohort_2                 (`department` == \"HR\")  0.896995   0.582149   \n",
       "4  cohort_3              (`department` == \"Legal\")  0.918971   0.627995   \n",
       "5  cohort_4         (`department` == \"Operations\")  0.895444   0.605694   \n",
       "6  cohort_5        (`department` == \"Procurement\")  0.902884   0.622536   \n",
       "7  cohort_6                (`department` == \"R&D\")  0.688026   0.529920   \n",
       "8  cohort_7  (`department` == \"Sales & Marketing\")  0.937158   0.625365   \n",
       "9  cohort_8         (`department` == \"Technology\")  0.874313   0.638954   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.811462  0.597154  0.730889   0.025164     16443  \n",
       "1  0.689931  0.533177  0.657959   0.051147      1646  \n",
       "2  0.821153  0.704124  0.858268   0.043113       762  \n",
       "3  0.822039  0.568160  0.748656   0.001879       744  \n",
       "4  0.846945  0.669595  0.889571   0.046406       326  \n",
       "5  0.801792  0.575266  0.687463   0.025188      3366  \n",
       "6  0.833767  0.602760  0.711009   0.012863      2180  \n",
       "7  0.667961  0.385691  0.487654   0.004688       324  \n",
       "8  0.881852  0.638935  0.794907   0.014010      5027  \n",
       "9  0.782902  0.655217  0.782398   0.107164      2068  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.BasicImputer(verbose=False),\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_col=[\"department\"]\n",
    ")\n",
    "cht_manager.fit(X_train, y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"department\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the previous results, we can see that using the cohort-based pipeline for the ``department`` column had mixed results:\n",
    "\n",
    "* For cohorts ``cohort_1``, ``cohort_3``, and ``cohort_8`` we had a considerable improvement;\n",
    "* For cohorts ``cohort_4``, ``cohort_5``, and ``cohort_6`` we had a considerable downgrade of the metrics;\n",
    "* For the remaining cohorts, the results were only slightly different.\n",
    "\n",
    "We can now try creating different cohort definitions and see what works best. For example, after experimenting with a few combinations, we noticed that training a pipeline for ``cohort_3`` alone is the best option for that cohort, as adding data from other cohorts only makes things worse. We also found that training cohorts ``cohort_1``, ``cohort_2``, ``cohort_4``, ``cohort_5``, and ``cohort_6`` together generate superior results. Therefore, we can use the following cohorts to try to improve the results for the cohorts defined by the ``department`` column:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.905887</td>\n",
       "      <td>0.616113</td>\n",
       "      <td>0.814485</td>\n",
       "      <td>0.619013</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.078479</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`department` == \"Analytics\")</td>\n",
       "      <td>0.780691</td>\n",
       "      <td>0.582943</td>\n",
       "      <td>0.723158</td>\n",
       "      <td>0.553528</td>\n",
       "      <td>0.677400</td>\n",
       "      <td>0.087622</td>\n",
       "      <td>1646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`department` == \"Finance\")</td>\n",
       "      <td>0.917696</td>\n",
       "      <td>0.705546</td>\n",
       "      <td>0.833115</td>\n",
       "      <td>0.746577</td>\n",
       "      <td>0.892388</td>\n",
       "      <td>0.147653</td>\n",
       "      <td>762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`department` == \"HR\")</td>\n",
       "      <td>0.914903</td>\n",
       "      <td>0.583004</td>\n",
       "      <td>0.849715</td>\n",
       "      <td>0.553940</td>\n",
       "      <td>0.716398</td>\n",
       "      <td>0.022274</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`department` == \"Legal\")</td>\n",
       "      <td>0.918971</td>\n",
       "      <td>0.627995</td>\n",
       "      <td>0.846945</td>\n",
       "      <td>0.669595</td>\n",
       "      <td>0.889571</td>\n",
       "      <td>0.046406</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`department` == \"Operations\")</td>\n",
       "      <td>0.903670</td>\n",
       "      <td>0.618868</td>\n",
       "      <td>0.803845</td>\n",
       "      <td>0.621463</td>\n",
       "      <td>0.756982</td>\n",
       "      <td>0.085596</td>\n",
       "      <td>3366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`department` == \"Procurement\")</td>\n",
       "      <td>0.907424</td>\n",
       "      <td>0.624047</td>\n",
       "      <td>0.836303</td>\n",
       "      <td>0.606463</td>\n",
       "      <td>0.715596</td>\n",
       "      <td>0.037807</td>\n",
       "      <td>2180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`department` == \"R&amp;D\")</td>\n",
       "      <td>0.854369</td>\n",
       "      <td>0.607382</td>\n",
       "      <td>0.779935</td>\n",
       "      <td>0.640210</td>\n",
       "      <td>0.882716</td>\n",
       "      <td>0.207671</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`department` == \"Sales &amp; Marketing\")</td>\n",
       "      <td>0.939642</td>\n",
       "      <td>0.624811</td>\n",
       "      <td>0.883088</td>\n",
       "      <td>0.637214</td>\n",
       "      <td>0.792321</td>\n",
       "      <td>0.028015</td>\n",
       "      <td>5027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`department` == \"Technology\")</td>\n",
       "      <td>0.884630</td>\n",
       "      <td>0.639348</td>\n",
       "      <td>0.799336</td>\n",
       "      <td>0.650063</td>\n",
       "      <td>0.767892</td>\n",
       "      <td>0.130006</td>\n",
       "      <td>2068</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.905887   0.616113   \n",
       "1  cohort_0          (`department` == \"Analytics\")  0.780691   0.582943   \n",
       "2  cohort_1            (`department` == \"Finance\")  0.917696   0.705546   \n",
       "3  cohort_2                 (`department` == \"HR\")  0.914903   0.583004   \n",
       "4  cohort_3              (`department` == \"Legal\")  0.918971   0.627995   \n",
       "5  cohort_4         (`department` == \"Operations\")  0.903670   0.618868   \n",
       "6  cohort_5        (`department` == \"Procurement\")  0.907424   0.624047   \n",
       "7  cohort_6                (`department` == \"R&D\")  0.854369   0.607382   \n",
       "8  cohort_7  (`department` == \"Sales & Marketing\")  0.939642   0.624811   \n",
       "9  cohort_8         (`department` == \"Technology\")  0.884630   0.639348   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.814485  0.619013  0.761905   0.078479     16443  \n",
       "1  0.723158  0.553528  0.677400   0.087622      1646  \n",
       "2  0.833115  0.746577  0.892388   0.147653       762  \n",
       "3  0.849715  0.553940  0.716398   0.022274       744  \n",
       "4  0.846945  0.669595  0.889571   0.046406       326  \n",
       "5  0.803845  0.621463  0.756982   0.085596      3366  \n",
       "6  0.836303  0.606463  0.715596   0.037807      2180  \n",
       "7  0.779935  0.640210  0.882716   0.207671       324  \n",
       "8  0.883088  0.637214  0.792321   0.028015      5027  \n",
       "9  0.799336  0.650063  0.767892   0.130006      2068  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c0 = [[\"department\", '==', ['Finance', 'HR', 'R&D', 'Operations', 'Procurement']]]\n",
    "c1 = [[\"department\", '==', ['Legal']]]\n",
    "c2 = None\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.BasicImputer(verbose=False),\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_def=[c0, c1, c2]\n",
    ")\n",
    "cht_manager.fit(X_train, y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"department\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the results obtained with this new set of cohort definitions managed to attain superior results. We'll use this cohort definition scheme for the rest of the experiments.\n",
    "\n",
    "### Rebalancing the \"department\" cohorts\n",
    "\n",
    "We'll now see how rebalancing the dataset impacts the overall results. Let's start by analyzing the class imbalance in each cohort and over the entire dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    cohort_col=[\"department\"]\n",
    ")\n",
    "cohort_set.fit(X=X_train, y=y_train)\n",
    "subsets = cohort_set.get_subsets(X_train, y_train, apply_transform=False)\n",
    "\n",
    "#print(y_train.value_counts())\n",
    "#for key in subsets.keys():\n",
    "#    print(f\"\\n{key}:\\n{subsets[key]['y'].value_counts()}\\n***********\")\n",
    "\n",
    "plot_value_counts_cohort(y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following cell, we'll rebalance the entire dataset using the ``Rebalance`` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance = dp.Rebalance(strategy_over=0.2, verbose=False)\n",
    "new_X_train, new_y_train = rebalance.fit_resample(X_train, y_train)\n",
    "\n",
    "cohort_set.fit(X=new_X_train, y=new_y_train)\n",
    "subsets = cohort_set.get_subsets(new_X_train, new_y_train, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the rebalanced dataset, let's now use our previous cohort-based pipeline using the previously defined cohort definitions over this rebalanced dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:172: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.882653</td>\n",
       "      <td>0.606043</td>\n",
       "      <td>0.795527</td>\n",
       "      <td>0.600614</td>\n",
       "      <td>0.742626</td>\n",
       "      <td>0.115362</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`department` == \"Analytics\")</td>\n",
       "      <td>0.713936</td>\n",
       "      <td>0.561761</td>\n",
       "      <td>0.673356</td>\n",
       "      <td>0.506832</td>\n",
       "      <td>0.617861</td>\n",
       "      <td>0.134958</td>\n",
       "      <td>1646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`department` == \"Finance\")</td>\n",
       "      <td>0.897563</td>\n",
       "      <td>0.621696</td>\n",
       "      <td>0.814131</td>\n",
       "      <td>0.629498</td>\n",
       "      <td>0.771654</td>\n",
       "      <td>0.116745</td>\n",
       "      <td>762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`department` == \"HR\")</td>\n",
       "      <td>0.903948</td>\n",
       "      <td>0.594252</td>\n",
       "      <td>0.848901</td>\n",
       "      <td>0.594229</td>\n",
       "      <td>0.778226</td>\n",
       "      <td>0.079907</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`department` == \"Legal\")</td>\n",
       "      <td>0.903537</td>\n",
       "      <td>0.648620</td>\n",
       "      <td>0.856592</td>\n",
       "      <td>0.697139</td>\n",
       "      <td>0.907975</td>\n",
       "      <td>0.080067</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`department` == \"Operations\")</td>\n",
       "      <td>0.879093</td>\n",
       "      <td>0.618373</td>\n",
       "      <td>0.782128</td>\n",
       "      <td>0.629625</td>\n",
       "      <td>0.778075</td>\n",
       "      <td>0.154786</td>\n",
       "      <td>3366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`department` == \"Procurement\")</td>\n",
       "      <td>0.878716</td>\n",
       "      <td>0.602116</td>\n",
       "      <td>0.790458</td>\n",
       "      <td>0.552245</td>\n",
       "      <td>0.648165</td>\n",
       "      <td>0.060732</td>\n",
       "      <td>2180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`department` == \"R&amp;D\")</td>\n",
       "      <td>0.809061</td>\n",
       "      <td>0.568452</td>\n",
       "      <td>0.767961</td>\n",
       "      <td>0.568505</td>\n",
       "      <td>0.799383</td>\n",
       "      <td>0.204584</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`department` == \"Sales &amp; Marketing\")</td>\n",
       "      <td>0.936626</td>\n",
       "      <td>0.625037</td>\n",
       "      <td>0.884295</td>\n",
       "      <td>0.637361</td>\n",
       "      <td>0.792123</td>\n",
       "      <td>0.039171</td>\n",
       "      <td>5027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`department` == \"Technology\")</td>\n",
       "      <td>0.843155</td>\n",
       "      <td>0.611393</td>\n",
       "      <td>0.768748</td>\n",
       "      <td>0.586957</td>\n",
       "      <td>0.686654</td>\n",
       "      <td>0.124896</td>\n",
       "      <td>2068</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.882653   0.606043   \n",
       "1  cohort_0          (`department` == \"Analytics\")  0.713936   0.561761   \n",
       "2  cohort_1            (`department` == \"Finance\")  0.897563   0.621696   \n",
       "3  cohort_2                 (`department` == \"HR\")  0.903948   0.594252   \n",
       "4  cohort_3              (`department` == \"Legal\")  0.903537   0.648620   \n",
       "5  cohort_4         (`department` == \"Operations\")  0.879093   0.618373   \n",
       "6  cohort_5        (`department` == \"Procurement\")  0.878716   0.602116   \n",
       "7  cohort_6                (`department` == \"R&D\")  0.809061   0.568452   \n",
       "8  cohort_7  (`department` == \"Sales & Marketing\")  0.936626   0.625037   \n",
       "9  cohort_8         (`department` == \"Technology\")  0.843155   0.611393   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.795527  0.600614  0.742626   0.115362     16443  \n",
       "1  0.673356  0.506832  0.617861   0.134958      1646  \n",
       "2  0.814131  0.629498  0.771654   0.116745       762  \n",
       "3  0.848901  0.594229  0.778226   0.079907       744  \n",
       "4  0.856592  0.697139  0.907975   0.080067       326  \n",
       "5  0.782128  0.629625  0.778075   0.154786      3366  \n",
       "6  0.790458  0.552245  0.648165   0.060732      2180  \n",
       "7  0.767961  0.568505  0.799383   0.204584       324  \n",
       "8  0.884295  0.637361  0.792123   0.039171      5027  \n",
       "9  0.768748  0.586957  0.686654   0.124896      2068  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c0 = [[\"department\", '==', ['Finance', 'HR', 'R&D', 'Operations', 'Procurement']]]\n",
    "c1 = [[\"department\", '==', ['Legal']]]\n",
    "c2 = None\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.BasicImputer(verbose=False),\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_def=[c0, c1, c2]\n",
    ")\n",
    "cht_manager.fit(new_X_train, new_y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"department\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once again, we got mixed results after rebalancing the dataset when we compare these results with the ones obtained by using a similar cohort-based pipeline over the original dataset. But in the end, the latter managed to attain considerably better results for many cohorts. Given these results, let's try to rebalance the dataset for each ``department`` cohort separately, with the help of the ``CohortManager`` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance_cohort = CohortManager(\n",
    "    transform_pipe=[dp.Rebalance(strategy_over=0.2, verbose=False)],\n",
    "    cohort_col=[\"department\"]\n",
    ")\n",
    "new_X_train, new_y_train = rebalance_cohort.fit_resample(X_train, y_train)\n",
    "\n",
    "subsets = rebalance_cohort.get_subsets(new_X_train, new_y_train, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now repeat the same cohort-based pipeline, but this time over the dataset rebalanced for each cohort separately:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.898558</td>\n",
       "      <td>0.602245</td>\n",
       "      <td>0.812015</td>\n",
       "      <td>0.570510</td>\n",
       "      <td>0.689229</td>\n",
       "      <td>0.050383</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`department` == \"Analytics\")</td>\n",
       "      <td>0.766249</td>\n",
       "      <td>0.576293</td>\n",
       "      <td>0.702372</td>\n",
       "      <td>0.549246</td>\n",
       "      <td>0.680437</td>\n",
       "      <td>0.141058</td>\n",
       "      <td>1646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`department` == \"Finance\")</td>\n",
       "      <td>0.903855</td>\n",
       "      <td>0.659268</td>\n",
       "      <td>0.810813</td>\n",
       "      <td>0.694047</td>\n",
       "      <td>0.851706</td>\n",
       "      <td>0.209098</td>\n",
       "      <td>762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`department` == \"HR\")</td>\n",
       "      <td>0.920703</td>\n",
       "      <td>0.585020</td>\n",
       "      <td>0.853989</td>\n",
       "      <td>0.559841</td>\n",
       "      <td>0.724462</td>\n",
       "      <td>0.043647</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`department` == \"Legal\")</td>\n",
       "      <td>0.879528</td>\n",
       "      <td>0.732530</td>\n",
       "      <td>0.847374</td>\n",
       "      <td>0.776444</td>\n",
       "      <td>0.950920</td>\n",
       "      <td>0.580881</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`department` == \"Operations\")</td>\n",
       "      <td>0.897570</td>\n",
       "      <td>0.615737</td>\n",
       "      <td>0.810415</td>\n",
       "      <td>0.608124</td>\n",
       "      <td>0.734700</td>\n",
       "      <td>0.093616</td>\n",
       "      <td>3366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`department` == \"Procurement\")</td>\n",
       "      <td>0.911637</td>\n",
       "      <td>0.625208</td>\n",
       "      <td>0.836085</td>\n",
       "      <td>0.611378</td>\n",
       "      <td>0.722936</td>\n",
       "      <td>0.067863</td>\n",
       "      <td>2180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`department` == \"R&amp;D\")</td>\n",
       "      <td>0.828047</td>\n",
       "      <td>0.574164</td>\n",
       "      <td>0.820065</td>\n",
       "      <td>0.567199</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>0.177297</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`department` == \"Sales &amp; Marketing\")</td>\n",
       "      <td>0.935829</td>\n",
       "      <td>0.626330</td>\n",
       "      <td>0.883914</td>\n",
       "      <td>0.640559</td>\n",
       "      <td>0.796300</td>\n",
       "      <td>0.044099</td>\n",
       "      <td>5027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`department` == \"Technology\")</td>\n",
       "      <td>0.869562</td>\n",
       "      <td>0.612508</td>\n",
       "      <td>0.779713</td>\n",
       "      <td>0.570291</td>\n",
       "      <td>0.655706</td>\n",
       "      <td>0.050525</td>\n",
       "      <td>2068</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.898558   0.602245   \n",
       "1  cohort_0          (`department` == \"Analytics\")  0.766249   0.576293   \n",
       "2  cohort_1            (`department` == \"Finance\")  0.903855   0.659268   \n",
       "3  cohort_2                 (`department` == \"HR\")  0.920703   0.585020   \n",
       "4  cohort_3              (`department` == \"Legal\")  0.879528   0.732530   \n",
       "5  cohort_4         (`department` == \"Operations\")  0.897570   0.615737   \n",
       "6  cohort_5        (`department` == \"Procurement\")  0.911637   0.625208   \n",
       "7  cohort_6                (`department` == \"R&D\")  0.828047   0.574164   \n",
       "8  cohort_7  (`department` == \"Sales & Marketing\")  0.935829   0.626330   \n",
       "9  cohort_8         (`department` == \"Technology\")  0.869562   0.612508   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.812015  0.570510  0.689229   0.050383     16443  \n",
       "1  0.702372  0.549246  0.680437   0.141058      1646  \n",
       "2  0.810813  0.694047  0.851706   0.209098       762  \n",
       "3  0.853989  0.559841  0.724462   0.043647       744  \n",
       "4  0.847374  0.776444  0.950920   0.580881       326  \n",
       "5  0.810415  0.608124  0.734700   0.093616      3366  \n",
       "6  0.836085  0.611378  0.722936   0.067863      2180  \n",
       "7  0.820065  0.567199  0.777778   0.177297       324  \n",
       "8  0.883914  0.640559  0.796300   0.044099      5027  \n",
       "9  0.779713  0.570291  0.655706   0.050525      2068  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c0 = [[\"department\", '==', ['Finance', 'HR', 'R&D', 'Operations', 'Procurement']]]\n",
    "c1 = [[\"department\", '==', ['Legal']]]\n",
    "c2 = None\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.BasicImputer(verbose=False),\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_def=[c0, c1, c2]\n",
    ")\n",
    "cht_manager.fit(new_X_train, new_y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"department\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And once again, we got mixed results when comparing the latest result with the other cohort-based pipelines. This might indicate that rebalancing the dataset is not providing very good results, except for a single cohort: ``cohort_3``. Therefore, we'll perform a third rebalance procedure, but this time, we'll only rebalance the dataset associated to the cohort where ``department`` == \"Legal\":"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance_cohort = CohortManager(\n",
    "    transform_pipe=[[], [dp.Rebalance(strategy_over=0.2, verbose=False)], []],\n",
    "    cohort_def=[c0, c1, c2]\n",
    ")\n",
    "new_X_train, new_y_train = rebalance_cohort.fit_resample(X_train, y_train)\n",
    "\n",
    "subsets = rebalance_cohort.get_subsets(new_X_train, new_y_train, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.906262</td>\n",
       "      <td>0.616146</td>\n",
       "      <td>0.814934</td>\n",
       "      <td>0.618883</td>\n",
       "      <td>0.761540</td>\n",
       "      <td>0.078479</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`department` == \"Analytics\")</td>\n",
       "      <td>0.780691</td>\n",
       "      <td>0.582943</td>\n",
       "      <td>0.723158</td>\n",
       "      <td>0.553528</td>\n",
       "      <td>0.677400</td>\n",
       "      <td>0.087622</td>\n",
       "      <td>1646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`department` == \"Finance\")</td>\n",
       "      <td>0.917696</td>\n",
       "      <td>0.705546</td>\n",
       "      <td>0.833115</td>\n",
       "      <td>0.746577</td>\n",
       "      <td>0.892388</td>\n",
       "      <td>0.147653</td>\n",
       "      <td>762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`department` == \"HR\")</td>\n",
       "      <td>0.914903</td>\n",
       "      <td>0.583004</td>\n",
       "      <td>0.849715</td>\n",
       "      <td>0.553940</td>\n",
       "      <td>0.716398</td>\n",
       "      <td>0.022274</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`department` == \"Legal\")</td>\n",
       "      <td>0.915756</td>\n",
       "      <td>0.651241</td>\n",
       "      <td>0.886710</td>\n",
       "      <td>0.702020</td>\n",
       "      <td>0.904908</td>\n",
       "      <td>0.085186</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`department` == \"Operations\")</td>\n",
       "      <td>0.903670</td>\n",
       "      <td>0.618868</td>\n",
       "      <td>0.803845</td>\n",
       "      <td>0.621463</td>\n",
       "      <td>0.756982</td>\n",
       "      <td>0.085596</td>\n",
       "      <td>3366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`department` == \"Procurement\")</td>\n",
       "      <td>0.907424</td>\n",
       "      <td>0.624047</td>\n",
       "      <td>0.836303</td>\n",
       "      <td>0.606463</td>\n",
       "      <td>0.715596</td>\n",
       "      <td>0.037807</td>\n",
       "      <td>2180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`department` == \"R&amp;D\")</td>\n",
       "      <td>0.854369</td>\n",
       "      <td>0.607382</td>\n",
       "      <td>0.779935</td>\n",
       "      <td>0.640210</td>\n",
       "      <td>0.882716</td>\n",
       "      <td>0.207671</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`department` == \"Sales &amp; Marketing\")</td>\n",
       "      <td>0.939642</td>\n",
       "      <td>0.624811</td>\n",
       "      <td>0.883088</td>\n",
       "      <td>0.637214</td>\n",
       "      <td>0.792321</td>\n",
       "      <td>0.028015</td>\n",
       "      <td>5027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`department` == \"Technology\")</td>\n",
       "      <td>0.884630</td>\n",
       "      <td>0.639348</td>\n",
       "      <td>0.799336</td>\n",
       "      <td>0.650063</td>\n",
       "      <td>0.767892</td>\n",
       "      <td>0.130006</td>\n",
       "      <td>2068</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cohort                              cht_query       roc  precision  \\\n",
       "0       all                                    all  0.906262   0.616146   \n",
       "1  cohort_0          (`department` == \"Analytics\")  0.780691   0.582943   \n",
       "2  cohort_1            (`department` == \"Finance\")  0.917696   0.705546   \n",
       "3  cohort_2                 (`department` == \"HR\")  0.914903   0.583004   \n",
       "4  cohort_3              (`department` == \"Legal\")  0.915756   0.651241   \n",
       "5  cohort_4         (`department` == \"Operations\")  0.903670   0.618868   \n",
       "6  cohort_5        (`department` == \"Procurement\")  0.907424   0.624047   \n",
       "7  cohort_6                (`department` == \"R&D\")  0.854369   0.607382   \n",
       "8  cohort_7  (`department` == \"Sales & Marketing\")  0.939642   0.624811   \n",
       "9  cohort_8         (`department` == \"Technology\")  0.884630   0.639348   \n",
       "\n",
       "     recall        f1  accuracy  threshold  cht_size  \n",
       "0  0.814934  0.618883  0.761540   0.078479     16443  \n",
       "1  0.723158  0.553528  0.677400   0.087622      1646  \n",
       "2  0.833115  0.746577  0.892388   0.147653       762  \n",
       "3  0.849715  0.553940  0.716398   0.022274       744  \n",
       "4  0.886710  0.702020  0.904908   0.085186       326  \n",
       "5  0.803845  0.621463  0.756982   0.085596      3366  \n",
       "6  0.836303  0.606463  0.715596   0.037807      2180  \n",
       "7  0.779935  0.640210  0.882716   0.207671       324  \n",
       "8  0.883088  0.637214  0.792321   0.028015      5027  \n",
       "9  0.799336  0.650063  0.767892   0.130006      2068  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c0 = [[\"department\", '==', ['Finance', 'HR', 'R&D', 'Operations', 'Procurement']]]\n",
    "c1 = [[\"department\", '==', ['Legal']]]\n",
    "c2 = None\n",
    "\n",
    "np.random.seed(SEED)\n",
    "random.seed(SEED)\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.BasicImputer(verbose=False),\n",
    "        dp.DataStandardScaler(verbose=False),\n",
    "        dp.EncoderOHE(drop=False, unknown_err=False, verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_def=[c0, c1, c2]\n",
    ")\n",
    "cht_manager.fit(new_X_train, new_y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"department\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that now we have an improved set of metrics, where we managed to train three different pipelines for the three cohorts being used, where for the second cohort (where ``department`` == \"Legal\") we also used a rebalance operation, but maintained the training sets for the other cohorts unchanged.\n",
    "\n",
    "These notebooks aim to highlight the flexibility that the ``CohortManager`` class provides when creating the training pipelines. There are many options that it provides, allowing for complex analysis and operations."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.13 ('raipub')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "98cf402749abf383affb54f23cdde06b52ae2a6e4394659b91d1cafca4224ff4"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
