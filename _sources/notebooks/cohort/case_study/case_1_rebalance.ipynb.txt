{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cohort Case Study 1 - Rebalancing\n",
    "\n",
    "This notebook is a continuation of the notebook [Case 1](./case_1.ipynb). Here, we'll show a situation where using the ``CohortManager`` to rebalance the dataset is a good idea.\n",
    "\n",
    "First of all, we'll need to create the artificial dataset once again. We'll just copy the code used in the previous notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xgboost as xgb\n",
    "from sklearn.pipeline import Pipeline\n",
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from raimitigations.utils import split_data\n",
    "import raimitigations.dataprocessing as dp\n",
    "from raimitigations.cohort import (\n",
    "    CohortDefinition,\n",
    "    CohortManager,\n",
    "    fetch_cohort_results,\n",
    "    plot_value_counts_cohort\n",
    ")\n",
    "\n",
    "SEED = 51\n",
    "#SEED = None\n",
    "np.random.seed(SEED)\n",
    "random.seed(SEED)\n",
    "\n",
    "def _create_country_df(samples: int, sectors: dict, country_name: str):\n",
    "    df = None\n",
    "    for key in sectors.keys():\n",
    "        size = int(samples * sectors[key][\"prob_occur\"])\n",
    "        invest = np.random.uniform(low=sectors[key][\"min\"], high=sectors[key][\"max\"], size=size)\n",
    "        min_invest = min(invest)\n",
    "        max_invest = max(invest)\n",
    "        range_invest = max_invest - min_invest\n",
    "        bankrupt_th = sectors[key][\"prob_success\"] * range_invest\n",
    "        inverted_behavior = sectors[key][\"inverted_behavior\"]\n",
    "        bankrupt = []\n",
    "        for i in range(invest.shape[0]):\n",
    "            inst_class = 1\n",
    "            if invest[i] > bankrupt_th:\n",
    "                inst_class = 0\n",
    "            if inverted_behavior:\n",
    "                inst_class = int(not inst_class)\n",
    "            bankrupt.append(inst_class)\n",
    "        noise_ind = np.random.choice(range(size), int(size*0.05), replace=False)\n",
    "        for ind in noise_ind:\n",
    "            bankrupt[ind] = int(not bankrupt[ind])\n",
    "        noise_ind = np.random.choice(range(size), int(size*0.1), replace=False)\n",
    "        for ind in noise_ind:\n",
    "            invest[ind] = np.nan\n",
    "        \n",
    "        country_col = [country_name for _ in range(size)]\n",
    "        sector_col = [key for _ in range(size)]\n",
    "        df_sector = pd.DataFrame({\n",
    "            \"investment\":invest,\n",
    "            \"sector\":sector_col,\n",
    "            \"country\":country_col,\n",
    "            \"bankrupt\":bankrupt\n",
    "        })\n",
    "        \n",
    "        if df is None:\n",
    "            df = df_sector\n",
    "        else:\n",
    "            df = pd.concat([df, df_sector], axis=0)\n",
    "    return df\n",
    "\n",
    "def create_df_multiple_distributions(samples: list):\n",
    "    sectors_c1 = {\n",
    "        \"s1\": {\"prob_occur\":0.5, \"prob_success\":0.99, \"inverted_behavior\":False, \"min\":2e6, \"max\":1e7},\n",
    "        \"s2\": {\"prob_occur\":0.1, \"prob_success\":0.2, \"inverted_behavior\":False, \"min\":1e7, \"max\":1.5e9},\n",
    "        \"s3\": {\"prob_occur\":0.1, \"prob_success\":0.9, \"inverted_behavior\":True, \"min\":1e9, \"max\":1e10},\n",
    "        \"s4\": {\"prob_occur\":0.3, \"prob_success\":0.7, \"inverted_behavior\":False, \"min\":4e10, \"max\":9e13},\n",
    "    }\n",
    "    sectors_c2 = {\n",
    "        \"s1\": {\"prob_occur\":0.1, \"prob_success\":0.6, \"inverted_behavior\":True, \"min\":1e3, \"max\":5e3},\n",
    "        \"s2\": {\"prob_occur\":0.3, \"prob_success\":0.9, \"inverted_behavior\":False, \"min\":1e5, \"max\":1.5e6},\n",
    "        \"s3\": {\"prob_occur\":0.5, \"prob_success\":0.3, \"inverted_behavior\":False, \"min\":5e4, \"max\":3e5},\n",
    "        \"s4\": {\"prob_occur\":0.1, \"prob_success\":0.8, \"inverted_behavior\":False, \"min\":1e6, \"max\":1e7},\n",
    "    }\n",
    "    sectors_c3 = {\n",
    "        \"s1\": {\"prob_occur\":0.3, \"prob_success\":0.9, \"inverted_behavior\":False, \"min\":3e2, \"max\":6e2},\n",
    "        \"s2\": {\"prob_occur\":0.6, \"prob_success\":0.7, \"inverted_behavior\":False, \"min\":5e3, \"max\":9e3},\n",
    "        \"s3\": {\"prob_occur\":0.07, \"prob_success\":0.6, \"inverted_behavior\":False, \"min\":4e3, \"max\":2e4},\n",
    "        \"s4\": {\"prob_occur\":0.03, \"prob_success\":0.1, \"inverted_behavior\":True, \"min\":6e5, \"max\":1.3e6},\n",
    "    }\n",
    "    countries = {\n",
    "        \"A\":{\"sectors\":sectors_c1, \"sample_rate\":0.85},\n",
    "        \"B\":{\"sectors\":sectors_c2, \"sample_rate\":0.05},\n",
    "        \"C\":{\"sectors\":sectors_c2, \"sample_rate\":0.1}\n",
    "    }\n",
    "    df = None\n",
    "    for key in countries.keys():\n",
    "        n_sample = int(samples * countries[key][\"sample_rate\"])\n",
    "        df_c = _create_country_df(n_sample, countries[key][\"sectors\"], key)\n",
    "        if df is None:\n",
    "            df = df_c\n",
    "        else:\n",
    "            df = pd.concat([df, df_c], axis=0)\n",
    "    \n",
    "    idx = pd.Index([i for i in range(df.shape[0])])\n",
    "    df = df.set_index(idx)\n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now create our artificial dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>investment</th>\n",
       "      <th>sector</th>\n",
       "      <th>country</th>\n",
       "      <th>bankrupt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.405851e+06</td>\n",
       "      <td>s1</td>\n",
       "      <td>A</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.357697e+06</td>\n",
       "      <td>s1</td>\n",
       "      <td>A</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.746429e+06</td>\n",
       "      <td>s1</td>\n",
       "      <td>A</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.152158e+06</td>\n",
       "      <td>s1</td>\n",
       "      <td>A</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>s1</td>\n",
       "      <td>A</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>4.226512e+06</td>\n",
       "      <td>s4</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>3.566758e+06</td>\n",
       "      <td>s4</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>9.281006e+06</td>\n",
       "      <td>s4</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>5.770378e+06</td>\n",
       "      <td>s4</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>3.661511e+06</td>\n",
       "      <td>s4</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        investment sector country  bankrupt\n",
       "0     7.405851e+06     s1       A         1\n",
       "1     2.357697e+06     s1       A         1\n",
       "2     4.746429e+06     s1       A         1\n",
       "3     7.152158e+06     s1       A         1\n",
       "4              NaN     s1       A         1\n",
       "...            ...    ...     ...       ...\n",
       "9995  4.226512e+06     s4       C         1\n",
       "9996  3.566758e+06     s4       C         0\n",
       "9997  9.281006e+06     s4       C         0\n",
       "9998  5.770378e+06     s4       C         1\n",
       "9999  3.661511e+06     s4       C         1\n",
       "\n",
       "[10000 rows x 4 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = create_df_multiple_distributions(10000)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll now split our dataset into train and test sets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = split_data(df, label=\"bankrupt\", test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_model():\n",
    "    #model = LGBMClassifier(random_state=SEED)\n",
    "    model = LogisticRegression(random_state=SEED)\n",
    "    return model"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rebalancing\n",
    "\n",
    "In the following experiments, we'll test different ways the ``Rebalance`` class can be used in this dataset."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the `plot_value_counts_cohort` function with the subsets returned by the ``CohortManager`` class, let's take a look at the label distributions of the cohorts based on the ``sector`` and ``country`` columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    cohort_col=[\"sector\", \"country\"]\n",
    ")\n",
    "cohort_set.fit(X=X_train, y=y_train)\n",
    "subsets = cohort_set.get_subsets(X_train, y_train, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, there is a slight class imbalance in the entire dataset, but if we look at each cohort individually, this imbalance varies greatly. We can see that the imbalance is inverted for some cohorts.\n",
    "\n",
    "### Rebalance the entire dataset\n",
    "\n",
    "For our first experiment, let's try rebalancing the entire dataset to see how this will affect the results. Note that we don't expect great changes to the results, since the imbalance in the entire dataset is not very accentuated.\n",
    "\n",
    "We'll use the ``Rebalance`` class to rebalance the full dataset. We then plot the label distributions for all cohorts once again to see how the rebalance process affected the distributions inside each cohort."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rebalance = dp.Rebalance(verbose=False)\n",
    "new_X_train, new_y_train = rebalance.fit_resample(X_train, y_train)\n",
    "\n",
    "cohort_set = CohortManager(\n",
    "    cohort_col=[\"sector\", \"country\"]\n",
    ")\n",
    "cohort_set.fit(X=X_train, y=y_train)\n",
    "subsets = cohort_set.get_subsets(new_X_train,new_y_train, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, after rebalancing the full dataset, there is no class imbalance when we look at the full dataset. However, the imbalance inside the cohorts with an inverted class imbalanced (compared to the full dataset) has only been more accentuated.\n",
    "\n",
    "Let's now check how this new rebalanced dataset impacts the training process when using the baseline pipeline ([Case 1 - Baseline 3](./case_1.ipynb)), where we train a single pipeline for the entire dataset.\n",
    "\n",
    "<a id='rebalance_base1'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.803268</td>\n",
       "      <td>0.788877</td>\n",
       "      <td>0.790533</td>\n",
       "      <td>0.769316</td>\n",
       "      <td>0.769333</td>\n",
       "      <td>0.639927</td>\n",
       "      <td>3000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"A\")</td>\n",
       "      <td>0.852323</td>\n",
       "      <td>0.860370</td>\n",
       "      <td>0.896209</td>\n",
       "      <td>0.873737</td>\n",
       "      <td>0.888436</td>\n",
       "      <td>0.639927</td>\n",
       "      <td>1228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"B\")</td>\n",
       "      <td>0.238095</td>\n",
       "      <td>0.208333</td>\n",
       "      <td>0.416667</td>\n",
       "      <td>0.277778</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>0.649560</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"C\")</td>\n",
       "      <td>0.161905</td>\n",
       "      <td>0.232143</td>\n",
       "      <td>0.464286</td>\n",
       "      <td>0.309524</td>\n",
       "      <td>0.448276</td>\n",
       "      <td>0.715199</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"A\")</td>\n",
       "      <td>0.803265</td>\n",
       "      <td>0.930028</td>\n",
       "      <td>0.852337</td>\n",
       "      <td>0.882836</td>\n",
       "      <td>0.920962</td>\n",
       "      <td>0.332854</td>\n",
       "      <td>291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"B\")</td>\n",
       "      <td>0.813390</td>\n",
       "      <td>0.803529</td>\n",
       "      <td>0.867521</td>\n",
       "      <td>0.828205</td>\n",
       "      <td>0.880597</td>\n",
       "      <td>0.342261</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"C\")</td>\n",
       "      <td>0.775021</td>\n",
       "      <td>0.701744</td>\n",
       "      <td>0.787014</td>\n",
       "      <td>0.730828</td>\n",
       "      <td>0.858491</td>\n",
       "      <td>0.413488</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"A\")</td>\n",
       "      <td>0.188799</td>\n",
       "      <td>0.575122</td>\n",
       "      <td>0.529032</td>\n",
       "      <td>0.285017</td>\n",
       "      <td>0.304878</td>\n",
       "      <td>0.125266</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"B\")</td>\n",
       "      <td>0.710065</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.721612</td>\n",
       "      <td>0.842105</td>\n",
       "      <td>0.129994</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"C\")</td>\n",
       "      <td>0.766817</td>\n",
       "      <td>0.848348</td>\n",
       "      <td>0.785480</td>\n",
       "      <td>0.811509</td>\n",
       "      <td>0.899225</td>\n",
       "      <td>0.168353</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>cohort_9</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"A\")</td>\n",
       "      <td>0.870353</td>\n",
       "      <td>0.935381</td>\n",
       "      <td>0.894539</td>\n",
       "      <td>0.911125</td>\n",
       "      <td>0.925587</td>\n",
       "      <td>0.432214</td>\n",
       "      <td>766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>cohort_10</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"B\")</td>\n",
       "      <td>0.944444</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.892857</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.914203</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>cohort_11</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"C\")</td>\n",
       "      <td>0.794444</td>\n",
       "      <td>0.804813</td>\n",
       "      <td>0.816667</td>\n",
       "      <td>0.809524</td>\n",
       "      <td>0.821429</td>\n",
       "      <td>0.935217</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       cohort                                  cht_query       roc  precision  \\\n",
       "0         all                                        all  0.803268   0.788877   \n",
       "1    cohort_0  (`sector` == \"s1\") and (`country` == \"A\")  0.852323   0.860370   \n",
       "2    cohort_1  (`sector` == \"s1\") and (`country` == \"B\")  0.238095   0.208333   \n",
       "3    cohort_2  (`sector` == \"s1\") and (`country` == \"C\")  0.161905   0.232143   \n",
       "4    cohort_3  (`sector` == \"s2\") and (`country` == \"A\")  0.803265   0.930028   \n",
       "5    cohort_4  (`sector` == \"s2\") and (`country` == \"B\")  0.813390   0.803529   \n",
       "6    cohort_5  (`sector` == \"s2\") and (`country` == \"C\")  0.775021   0.701744   \n",
       "7    cohort_6  (`sector` == \"s3\") and (`country` == \"A\")  0.188799   0.575122   \n",
       "8    cohort_7  (`sector` == \"s3\") and (`country` == \"B\")  0.710065   0.913043   \n",
       "9    cohort_8  (`sector` == \"s3\") and (`country` == \"C\")  0.766817   0.848348   \n",
       "10   cohort_9  (`sector` == \"s4\") and (`country` == \"A\")  0.870353   0.935381   \n",
       "11  cohort_10  (`sector` == \"s4\") and (`country` == \"B\")  0.944444   0.875000   \n",
       "12  cohort_11  (`sector` == \"s4\") and (`country` == \"C\")  0.794444   0.804813   \n",
       "\n",
       "      recall        f1  accuracy  threshold  cht_size  \n",
       "0   0.790533  0.769316  0.769333   0.639927      3000  \n",
       "1   0.896209  0.873737  0.888436   0.639927      1228  \n",
       "2   0.416667  0.277778  0.384615   0.649560        13  \n",
       "3   0.464286  0.309524  0.448276   0.715199        29  \n",
       "4   0.852337  0.882836  0.920962   0.332854       291  \n",
       "5   0.867521  0.828205  0.880597   0.342261        67  \n",
       "6   0.787014  0.730828  0.858491   0.413488       106  \n",
       "7   0.529032  0.285017  0.304878   0.125266       246  \n",
       "8   0.684211  0.721612  0.842105   0.129994        76  \n",
       "9   0.785480  0.811509  0.899225   0.168353       129  \n",
       "10  0.894539  0.911125  0.925587   0.432214       766  \n",
       "11  0.933333  0.892857  0.904762   0.914203        21  \n",
       "12  0.816667  0.809524  0.821429   0.935217        28  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Rebalance-Base 1\n",
    "\n",
    "pipe = Pipeline([\n",
    "            (\"imputer\", dp.BasicImputer(verbose=False)),\n",
    "            (\"scaler\", dp.DataMinMaxScaler(verbose=False)),\n",
    "            (\"encoder\", dp.EncoderOHE(verbose=False)),\n",
    "            (\"estimator\", get_model()),\n",
    "        ])\n",
    "pipe.fit(new_X_train, new_y_train)\n",
    "pred_org = pipe.predict_proba(X_test)\n",
    "\n",
    "pred_train_org = pipe.predict_proba(new_X_train)\n",
    "_, th_dict = fetch_cohort_results(new_X_train, new_y_train, pred_train_org, cohort_col=[\"sector\", \"country\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_org, cohort_col=[\"sector\", \"country\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the previous results, we can see that the results haven't changed much (compared to [Case 1 - Baseline 3](./case_1.ipynb)). This is true for the full dataset, as well as when we analyze each cohort individually. Therefore, this rebalancing process didn't impact the results for the baseline pipeline.\n",
    "\n",
    "In the following cell, we use the rebalanced dataset in the cohort-based pipeline ([Case 1 - Cohort 5](./case_1.ipynb)).\n",
    "\n",
    "<a id='rebalance_cohort1'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/mmendonca/anaconda3/envs/raipub/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.827125</td>\n",
       "      <td>0.814789</td>\n",
       "      <td>0.820160</td>\n",
       "      <td>0.801492</td>\n",
       "      <td>0.801667</td>\n",
       "      <td>0.637556</td>\n",
       "      <td>3000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"A\")</td>\n",
       "      <td>0.852323</td>\n",
       "      <td>0.860370</td>\n",
       "      <td>0.896209</td>\n",
       "      <td>0.873737</td>\n",
       "      <td>0.888436</td>\n",
       "      <td>0.637556</td>\n",
       "      <td>1228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"B\")</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.888889</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.837500</td>\n",
       "      <td>0.846154</td>\n",
       "      <td>0.635485</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"C\")</td>\n",
       "      <td>0.838095</td>\n",
       "      <td>0.899038</td>\n",
       "      <td>0.895238</td>\n",
       "      <td>0.896057</td>\n",
       "      <td>0.896552</td>\n",
       "      <td>0.466120</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"A\")</td>\n",
       "      <td>0.196735</td>\n",
       "      <td>0.378007</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.430528</td>\n",
       "      <td>0.756014</td>\n",
       "      <td>0.193607</td>\n",
       "      <td>291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"B\")</td>\n",
       "      <td>0.186610</td>\n",
       "      <td>0.097015</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.162500</td>\n",
       "      <td>0.194030</td>\n",
       "      <td>0.781296</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"C\")</td>\n",
       "      <td>0.224979</td>\n",
       "      <td>0.061321</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.109244</td>\n",
       "      <td>0.122642</td>\n",
       "      <td>0.832238</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"A\")</td>\n",
       "      <td>0.188799</td>\n",
       "      <td>0.575122</td>\n",
       "      <td>0.529032</td>\n",
       "      <td>0.285017</td>\n",
       "      <td>0.304878</td>\n",
       "      <td>0.170009</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"B\")</td>\n",
       "      <td>0.710065</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.721612</td>\n",
       "      <td>0.842105</td>\n",
       "      <td>0.061715</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"C\")</td>\n",
       "      <td>0.766817</td>\n",
       "      <td>0.848348</td>\n",
       "      <td>0.785480</td>\n",
       "      <td>0.811509</td>\n",
       "      <td>0.899225</td>\n",
       "      <td>0.122870</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>cohort_9</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"A\")</td>\n",
       "      <td>0.907025</td>\n",
       "      <td>0.935381</td>\n",
       "      <td>0.894539</td>\n",
       "      <td>0.911125</td>\n",
       "      <td>0.925587</td>\n",
       "      <td>0.421985</td>\n",
       "      <td>766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>cohort_10</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"B\")</td>\n",
       "      <td>0.944444</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.892857</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.570675</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>cohort_11</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"C\")</td>\n",
       "      <td>0.794444</td>\n",
       "      <td>0.804813</td>\n",
       "      <td>0.816667</td>\n",
       "      <td>0.809524</td>\n",
       "      <td>0.821429</td>\n",
       "      <td>0.531133</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       cohort                                  cht_query       roc  precision  \\\n",
       "0         all                                        all  0.827125   0.814789   \n",
       "1    cohort_0  (`sector` == \"s1\") and (`country` == \"A\")  0.852323   0.860370   \n",
       "2    cohort_1  (`sector` == \"s1\") and (`country` == \"B\")  0.761905   0.888889   \n",
       "3    cohort_2  (`sector` == \"s1\") and (`country` == \"C\")  0.838095   0.899038   \n",
       "4    cohort_3  (`sector` == \"s2\") and (`country` == \"A\")  0.196735   0.378007   \n",
       "5    cohort_4  (`sector` == \"s2\") and (`country` == \"B\")  0.186610   0.097015   \n",
       "6    cohort_5  (`sector` == \"s2\") and (`country` == \"C\")  0.224979   0.061321   \n",
       "7    cohort_6  (`sector` == \"s3\") and (`country` == \"A\")  0.188799   0.575122   \n",
       "8    cohort_7  (`sector` == \"s3\") and (`country` == \"B\")  0.710065   0.913043   \n",
       "9    cohort_8  (`sector` == \"s3\") and (`country` == \"C\")  0.766817   0.848348   \n",
       "10   cohort_9  (`sector` == \"s4\") and (`country` == \"A\")  0.907025   0.935381   \n",
       "11  cohort_10  (`sector` == \"s4\") and (`country` == \"B\")  0.944444   0.875000   \n",
       "12  cohort_11  (`sector` == \"s4\") and (`country` == \"C\")  0.794444   0.804813   \n",
       "\n",
       "      recall        f1  accuracy  threshold  cht_size  \n",
       "0   0.820160  0.801492  0.801667   0.637556      3000  \n",
       "1   0.896209  0.873737  0.888436   0.637556      1228  \n",
       "2   0.833333  0.837500  0.846154   0.635485        13  \n",
       "3   0.895238  0.896057  0.896552   0.466120        29  \n",
       "4   0.500000  0.430528  0.756014   0.193607       291  \n",
       "5   0.500000  0.162500  0.194030   0.781296        67  \n",
       "6   0.500000  0.109244  0.122642   0.832238       106  \n",
       "7   0.529032  0.285017  0.304878   0.170009       246  \n",
       "8   0.684211  0.721612  0.842105   0.061715        76  \n",
       "9   0.785480  0.811509  0.899225   0.122870       129  \n",
       "10  0.894539  0.911125  0.925587   0.421985       766  \n",
       "11  0.933333  0.892857  0.904762   0.570675        21  \n",
       "12  0.816667  0.809524  0.821429   0.531133        28  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Rebalance-Cohort 1\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.BasicImputer(verbose=False),\n",
    "        dp.DataMinMaxScaler(verbose=False),\n",
    "        dp.EncoderOHE(verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_col=[\"sector\", \"country\"]\n",
    ")\n",
    "cht_manager.fit(new_X_train, new_y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "pred_train = cht_manager.predict_proba(new_X_train)\n",
    "_, th_dict = fetch_cohort_results(new_X_train, new_y_train, pred_train, cohort_col=[\"sector\", \"country\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"sector\", \"country\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that by comparing the previous results with the one obtained by using the cohort-based pipeline (the one for the cohorts based on the ``sector`` and ``country`` columns - [Case 1 - Cohort 5](./case_1.ipynb)) over the original dataset, we can notice that the new rebalanced dataset performed considerably worse. Using the original dataset, we managed to get good metrics for the entire dataset and for each individual cohort. But when we use the rebalanced dataset, the metrics for some cohorts have become severely worse (for example, the metrics for cohort ``cohort_4``). One possible explanation for this is that, given that each cohort behaves very differently from the other, the new instances created by the SMOTE method (used internally by the ``Rebalance`` class) for some cohorts are not very befitting to the behavior analyzed in each cohort. This is especially true in smaller cohorts, that have fewer data points that can be used in the data creation process used in SMOTE. However, this has little impact when we train a pipeline over the full dataset since these small cohorts are already marginalized in these pipelines. But when we train a separate pipeline for each cohort, and we insert noisy data points into small cohorts, this noise has a great impact on the resulting estimator, as we can see from the previous results.\n",
    "\n",
    "We can check this by printing the statistics for the investment column for all cohorts in the original dataset and for the rebalanced dataset. Notice how the value range changes drastically from the original to the rebalanced datasets for several cohorts. The mean and standard deviation also suffers great changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cohort_0:\n",
      "\tORIGINAL: (min, max, mean, std) = (2.005068e+06, 9.998027e+06, 5.976259e+06, 2.339736e+06)\n",
      "\tREBALANCE: (min, max, mean, std) = (2.005068e+06, 1.098854e+13, 1.040341e+12, 3.217533e+12)\n",
      "cohort_1:\n",
      "\tORIGINAL: (min, max, mean, std) = (1.182911e+03, 4.987448e+03, 3.215314e+03, 1.206982e+03)\n",
      "\tREBALANCE: (min, max, mean, std) = (1.182911e+03, 1.098854e+13, 1.127030e+12, 3.377380e+12)\n",
      "cohort_2:\n",
      "\tORIGINAL: (min, max, mean, std) = (1.149726e+03, 4.982145e+03, 2.959479e+03, 1.251280e+03)\n",
      "\tREBALANCE: (min, max, mean, std) = (1.149726e+03, 1.098854e+13, 1.046528e+12, 3.244988e+12)\n",
      "cohort_3:\n",
      "\tORIGINAL: (min, max, mean, std) = (1.516971e+07, 1.499138e+09, 7.909766e+08, 4.417939e+08)\n",
      "\tREBALANCE: (min, max, mean, std) = (1.516971e+07, 1.098854e+13, 1.252196e+12, 3.492966e+12)\n",
      "cohort_4:\n",
      "\tORIGINAL: (min, max, mean, std) = (1.068535e+05, 1.493043e+06, 8.164178e+05, 4.428167e+05)\n",
      "\tREBALANCE: (min, max, mean, std) = (1.068535e+05, 1.098854e+13, 9.555261e+11, 3.113221e+12)\n",
      "cohort_5:\n",
      "\tORIGINAL: (min, max, mean, std) = (1.037734e+05, 1.498685e+06, 8.011541e+05, 3.926894e+05)\n",
      "\tREBALANCE: (min, max, mean, std) = (1.037734e+05, 1.098854e+13, 1.088488e+12, 3.290464e+12)\n",
      "cohort_6:\n",
      "\tORIGINAL: (min, max, mean, std) = (1.007322e+09, 9.996360e+09, 5.407672e+09, 2.557161e+09)\n",
      "\tREBALANCE: (min, max, mean, std) = (1.007322e+09, 1.098854e+13, 1.239427e+12, 3.471019e+12)\n",
      "cohort_7:\n",
      "\tORIGINAL: (min, max, mean, std) = (5.059673e+04, 2.994070e+05, 1.814661e+05, 7.001416e+04)\n",
      "\tREBALANCE: (min, max, mean, std) = (5.059673e+04, 1.098854e+13, 9.609752e+11, 3.110148e+12)\n",
      "cohort_8:\n",
      "\tORIGINAL: (min, max, mean, std) = (5.057161e+04, 2.981749e+05, 1.635852e+05, 7.342614e+04)\n",
      "\tREBALANCE: (min, max, mean, std) = (5.057161e+04, 1.098854e+13, 1.163756e+12, 3.384817e+12)\n",
      "cohort_9:\n",
      "\tORIGINAL: (min, max, mean, std) = (5.621367e+10, 8.999349e+13, 4.307630e+13, 2.579574e+13)\n",
      "\tREBALANCE: (min, max, mean, std) = (5.621367e+10, 8.999349e+13, 4.251200e+13, 2.731107e+13)\n",
      "cohort_10:\n",
      "\tORIGINAL: (min, max, mean, std) = (1.073877e+06, 9.817396e+06, 5.365237e+06, 2.469238e+06)\n",
      "\tREBALANCE: (min, max, mean, std) = (1.073877e+06, 1.098854e+13, 9.747005e+11, 3.089928e+12)\n",
      "cohort_11:\n",
      "\tORIGINAL: (min, max, mean, std) = (1.209695e+06, 9.919140e+06, 5.624768e+06, 2.545331e+06)\n",
      "\tREBALANCE: (min, max, mean, std) = (1.209695e+06, 1.098854e+13, 1.024707e+12, 3.191871e+12)\n"
     ]
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    cohort_col=[\"sector\", \"country\"]\n",
    ")\n",
    "cohort_set.fit(X=X_train, y=y_train)\n",
    "subsets_original = cohort_set.get_subsets(X_train, y_train, apply_transform=False)\n",
    "subsets_rebalance = cohort_set.get_subsets(new_X_train, new_y_train, apply_transform=False)\n",
    "\n",
    "for cht_name in subsets_original.keys():\n",
    "    min_value = subsets_original[cht_name][\"X\"][\"investment\"].min()\n",
    "    max_value = subsets_original[cht_name][\"X\"][\"investment\"].max()\n",
    "    mean = subsets_original[cht_name][\"X\"][\"investment\"].mean()\n",
    "    std = subsets_original[cht_name][\"X\"][\"investment\"].std()\n",
    "    print(f\"{cht_name}:\")\n",
    "    print(f\"\\tORIGINAL: (min, max, mean, std) = ({min_value:e}, {max_value:e}, {mean:e}, {std:e})\")\n",
    "    min_value = subsets_rebalance[cht_name][\"X\"][\"investment\"].min()\n",
    "    max_value = subsets_rebalance[cht_name][\"X\"][\"investment\"].max()\n",
    "    mean = subsets_rebalance[cht_name][\"X\"][\"investment\"].mean()\n",
    "    std = subsets_rebalance[cht_name][\"X\"][\"investment\"].std()\n",
    "    print(f\"\\tREBALANCE: (min, max, mean, std) = ({min_value:e}, {max_value:e}, {mean:e}, {std:e})\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rebalance only a specific cohort\n",
    "\n",
    "Suppose now that we are interested in improving the performance over a single cohort, not the entire dataset. For example, let's consider that we are satisfied with the results obtained for all cohorts except for cohort ``cohort_7`` in the experiment [Case 1 - Cohort 5](./case_1.ipynb). This way, we want to improve the metrics only for this cohort and try to leave the other cohorts as is. To this end, we'll use the ``Rebalance`` class once again, but this time we'll use it inside the ``CohortManager`` class. This way, we'll be able to rebalance only a specific set of cohorts. We'll use an empty list of transformations for all cohorts except for ``cohort_7``, which is the 8th cohort in the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "rebalance_cohort = CohortManager(\n",
    "    transform_pipe=[[], [], [], [], [], [], [], [dp.Rebalance(verbose=False)], [], [], [], []],\n",
    "    cohort_col=[\"sector\", \"country\"]\n",
    ")\n",
    "new_X_train, new_y_train = rebalance_cohort.fit_resample(X_train, y_train)\n",
    "\n",
    "subsets = rebalance_cohort.get_subsets(new_X_train,new_y_train, apply_transform=False)\n",
    "\n",
    "plot_value_counts_cohort(new_y_train, subsets, normalize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check if the new instances created are very different from the original instances from cohort ``cohort_7``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cohort_7:\n",
      "\tORIGINAL: (min, max, mean, std) = (5.059673e+04, 2.994070e+05, 1.814661e+05, 7.001416e+04)\n",
      "\tREBALANCE: (min, max, mean, std) = (5.059673e+04, 2.994070e+05, 1.383858e+05, 7.739440e+04)\n"
     ]
    }
   ],
   "source": [
    "cohort_set = CohortManager(\n",
    "    cohort_col=[\"sector\", \"country\"]\n",
    ")\n",
    "cohort_set.fit(X=X_train, y=y_train)\n",
    "subsets_original = cohort_set.get_subsets(X_train, y_train, apply_transform=False)\n",
    "subsets_rebalance = cohort_set.get_subsets(new_X_train, new_y_train, apply_transform=False)\n",
    "\n",
    "cht_name = \"cohort_7\"\n",
    "min_value = subsets_original[cht_name][\"X\"][\"investment\"].min()\n",
    "max_value = subsets_original[cht_name][\"X\"][\"investment\"].max()\n",
    "mean = subsets_original[cht_name][\"X\"][\"investment\"].mean()\n",
    "std = subsets_original[cht_name][\"X\"][\"investment\"].std()\n",
    "print(f\"{cht_name}:\")\n",
    "print(f\"\\tORIGINAL: (min, max, mean, std) = ({min_value:e}, {max_value:e}, {mean:e}, {std:e})\")\n",
    "min_value = subsets_rebalance[cht_name][\"X\"][\"investment\"].min()\n",
    "max_value = subsets_rebalance[cht_name][\"X\"][\"investment\"].max()\n",
    "mean = subsets_rebalance[cht_name][\"X\"][\"investment\"].mean()\n",
    "std = subsets_rebalance[cht_name][\"X\"][\"investment\"].std()\n",
    "print(f\"\\tREBALANCE: (min, max, mean, std) = ({min_value:e}, {max_value:e}, {mean:e}, {std:e})\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the values for the ``investment`` column suffered only slight changes to the mean and standard deviation. This shows that in some cases, rebalancing certain cohorts separately is less harmful than rebalancing the entire dataset.\n",
    "\n",
    "With our new rebalanced dataset, let's repeat the previous experiments:\n",
    "\n",
    "1. train the baseline pipeline over the rebalanced dataset ([Rebalance-Base 1](#rebalance_base1));\n",
    "2. train the cohort-based pipeline over the rebalanced dataset ([Rebalance-Cohort 1](#rebalance_cohort1));\n",
    "\n",
    "In the following cell, we perform the first of these two experiments:\n",
    "\n",
    "<a id='rebalance_base2'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n",
      "/home/mmendonca/ResponsibleAI/code/git/responsible-ai-mitigations/raimitigations/utils/metric_utils.py:189: RuntimeWarning: invalid value encountered in true_divide\n",
      "  fscore = (2 * precision * recall) / (precision + recall)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.804837</td>\n",
       "      <td>0.788418</td>\n",
       "      <td>0.790132</td>\n",
       "      <td>0.768981</td>\n",
       "      <td>0.769000</td>\n",
       "      <td>0.712906</td>\n",
       "      <td>3000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"A\")</td>\n",
       "      <td>0.852323</td>\n",
       "      <td>0.860370</td>\n",
       "      <td>0.896209</td>\n",
       "      <td>0.873737</td>\n",
       "      <td>0.888436</td>\n",
       "      <td>0.712906</td>\n",
       "      <td>1228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"B\")</td>\n",
       "      <td>0.238095</td>\n",
       "      <td>0.208333</td>\n",
       "      <td>0.416667</td>\n",
       "      <td>0.277778</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>0.893269</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"C\")</td>\n",
       "      <td>0.161905</td>\n",
       "      <td>0.232143</td>\n",
       "      <td>0.464286</td>\n",
       "      <td>0.309524</td>\n",
       "      <td>0.448276</td>\n",
       "      <td>0.782414</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"A\")</td>\n",
       "      <td>0.803265</td>\n",
       "      <td>0.867622</td>\n",
       "      <td>0.834155</td>\n",
       "      <td>0.848937</td>\n",
       "      <td>0.893471</td>\n",
       "      <td>0.377946</td>\n",
       "      <td>291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"B\")</td>\n",
       "      <td>0.813390</td>\n",
       "      <td>0.803529</td>\n",
       "      <td>0.867521</td>\n",
       "      <td>0.828205</td>\n",
       "      <td>0.880597</td>\n",
       "      <td>0.671898</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"C\")</td>\n",
       "      <td>0.775021</td>\n",
       "      <td>0.701744</td>\n",
       "      <td>0.787014</td>\n",
       "      <td>0.730828</td>\n",
       "      <td>0.858491</td>\n",
       "      <td>0.468042</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"A\")</td>\n",
       "      <td>0.188799</td>\n",
       "      <td>0.575122</td>\n",
       "      <td>0.529032</td>\n",
       "      <td>0.285017</td>\n",
       "      <td>0.304878</td>\n",
       "      <td>0.196127</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"B\")</td>\n",
       "      <td>0.710065</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.721612</td>\n",
       "      <td>0.842105</td>\n",
       "      <td>0.451353</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"C\")</td>\n",
       "      <td>0.766817</td>\n",
       "      <td>0.889474</td>\n",
       "      <td>0.773175</td>\n",
       "      <td>0.814833</td>\n",
       "      <td>0.906977</td>\n",
       "      <td>0.261151</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>cohort_9</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"A\")</td>\n",
       "      <td>0.869792</td>\n",
       "      <td>0.935381</td>\n",
       "      <td>0.894539</td>\n",
       "      <td>0.911125</td>\n",
       "      <td>0.925587</td>\n",
       "      <td>0.503452</td>\n",
       "      <td>766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>cohort_10</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"B\")</td>\n",
       "      <td>0.944444</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.892857</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.981152</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>cohort_11</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"C\")</td>\n",
       "      <td>0.794444</td>\n",
       "      <td>0.804813</td>\n",
       "      <td>0.816667</td>\n",
       "      <td>0.809524</td>\n",
       "      <td>0.821429</td>\n",
       "      <td>0.957202</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       cohort                                  cht_query       roc  precision  \\\n",
       "0         all                                        all  0.804837   0.788418   \n",
       "1    cohort_0  (`sector` == \"s1\") and (`country` == \"A\")  0.852323   0.860370   \n",
       "2    cohort_1  (`sector` == \"s1\") and (`country` == \"B\")  0.238095   0.208333   \n",
       "3    cohort_2  (`sector` == \"s1\") and (`country` == \"C\")  0.161905   0.232143   \n",
       "4    cohort_3  (`sector` == \"s2\") and (`country` == \"A\")  0.803265   0.867622   \n",
       "5    cohort_4  (`sector` == \"s2\") and (`country` == \"B\")  0.813390   0.803529   \n",
       "6    cohort_5  (`sector` == \"s2\") and (`country` == \"C\")  0.775021   0.701744   \n",
       "7    cohort_6  (`sector` == \"s3\") and (`country` == \"A\")  0.188799   0.575122   \n",
       "8    cohort_7  (`sector` == \"s3\") and (`country` == \"B\")  0.710065   0.913043   \n",
       "9    cohort_8  (`sector` == \"s3\") and (`country` == \"C\")  0.766817   0.889474   \n",
       "10   cohort_9  (`sector` == \"s4\") and (`country` == \"A\")  0.869792   0.935381   \n",
       "11  cohort_10  (`sector` == \"s4\") and (`country` == \"B\")  0.944444   0.875000   \n",
       "12  cohort_11  (`sector` == \"s4\") and (`country` == \"C\")  0.794444   0.804813   \n",
       "\n",
       "      recall        f1  accuracy  threshold  cht_size  \n",
       "0   0.790132  0.768981  0.769000   0.712906      3000  \n",
       "1   0.896209  0.873737  0.888436   0.712906      1228  \n",
       "2   0.416667  0.277778  0.384615   0.893269        13  \n",
       "3   0.464286  0.309524  0.448276   0.782414        29  \n",
       "4   0.834155  0.848937  0.893471   0.377946       291  \n",
       "5   0.867521  0.828205  0.880597   0.671898        67  \n",
       "6   0.787014  0.730828  0.858491   0.468042       106  \n",
       "7   0.529032  0.285017  0.304878   0.196127       246  \n",
       "8   0.684211  0.721612  0.842105   0.451353        76  \n",
       "9   0.773175  0.814833  0.906977   0.261151       129  \n",
       "10  0.894539  0.911125  0.925587   0.503452       766  \n",
       "11  0.933333  0.892857  0.904762   0.981152        21  \n",
       "12  0.816667  0.809524  0.821429   0.957202        28  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Rebalance-Base 2\n",
    "\n",
    "pipe = Pipeline([\n",
    "            (\"imputer\", dp.BasicImputer(verbose=False)),\n",
    "            (\"scaler\", dp.DataMinMaxScaler(verbose=False)),\n",
    "            (\"encoder\", dp.EncoderOHE(verbose=False)),\n",
    "            (\"estimator\", get_model()),\n",
    "        ])\n",
    "pipe.fit(new_X_train, new_y_train)\n",
    "pred_org = pipe.predict_proba(X_test)\n",
    "\n",
    "pred_train_org = pipe.predict_proba(new_X_train)\n",
    "_, th_dict = fetch_cohort_results(new_X_train, new_y_train, pred_train_org, cohort_col=[\"sector\", \"country\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_org, cohort_col=[\"sector\", \"country\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the results obtained are very similar to the baseline pipeline over the original dataset ([Case 1 - Baseline 3](./case_1.ipynb)). This was already expected, since ``cohort_7`` is a small cohort, and since we are training a single pipeline over the entire dataset, the new instances added had little impact on the results of the other cohorts.\n",
    "\n",
    "Let's now check how this rebalancing process impacts the cohort-based pipeline:\n",
    "\n",
    "<a id='rebalance_cohort2'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cohort</th>\n",
       "      <th>cht_query</th>\n",
       "      <th>roc</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>threshold</th>\n",
       "      <th>cht_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>all</td>\n",
       "      <td>0.923553</td>\n",
       "      <td>0.908323</td>\n",
       "      <td>0.898396</td>\n",
       "      <td>0.902471</td>\n",
       "      <td>0.906333</td>\n",
       "      <td>0.475074</td>\n",
       "      <td>3000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cohort_0</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"A\")</td>\n",
       "      <td>0.911655</td>\n",
       "      <td>0.941368</td>\n",
       "      <td>0.894939</td>\n",
       "      <td>0.914116</td>\n",
       "      <td>0.931596</td>\n",
       "      <td>0.445645</td>\n",
       "      <td>1228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cohort_1</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"B\")</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.888889</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.837500</td>\n",
       "      <td>0.846154</td>\n",
       "      <td>0.616965</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cohort_2</td>\n",
       "      <td>(`sector` == \"s1\") and (`country` == \"C\")</td>\n",
       "      <td>0.914286</td>\n",
       "      <td>0.899038</td>\n",
       "      <td>0.895238</td>\n",
       "      <td>0.896057</td>\n",
       "      <td>0.896552</td>\n",
       "      <td>0.471948</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cohort_3</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"A\")</td>\n",
       "      <td>0.861716</td>\n",
       "      <td>0.867622</td>\n",
       "      <td>0.834155</td>\n",
       "      <td>0.848937</td>\n",
       "      <td>0.893471</td>\n",
       "      <td>0.488684</td>\n",
       "      <td>291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cohort_4</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"B\")</td>\n",
       "      <td>0.814815</td>\n",
       "      <td>0.914912</td>\n",
       "      <td>0.836895</td>\n",
       "      <td>0.868782</td>\n",
       "      <td>0.925373</td>\n",
       "      <td>0.521201</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cohort_5</td>\n",
       "      <td>(`sector` == \"s2\") and (`country` == \"C\")</td>\n",
       "      <td>0.874276</td>\n",
       "      <td>0.929167</td>\n",
       "      <td>0.840778</td>\n",
       "      <td>0.878077</td>\n",
       "      <td>0.952830</td>\n",
       "      <td>0.662477</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cohort_6</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"A\")</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.943813</td>\n",
       "      <td>0.877957</td>\n",
       "      <td>0.905093</td>\n",
       "      <td>0.934959</td>\n",
       "      <td>0.477076</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cohort_7</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"B\")</td>\n",
       "      <td>0.787627</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.721612</td>\n",
       "      <td>0.842105</td>\n",
       "      <td>0.771149</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cohort_8</td>\n",
       "      <td>(`sector` == \"s3\") and (`country` == \"C\")</td>\n",
       "      <td>0.780353</td>\n",
       "      <td>0.889474</td>\n",
       "      <td>0.773175</td>\n",
       "      <td>0.814833</td>\n",
       "      <td>0.906977</td>\n",
       "      <td>0.388728</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>cohort_9</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"A\")</td>\n",
       "      <td>0.907772</td>\n",
       "      <td>0.935381</td>\n",
       "      <td>0.894539</td>\n",
       "      <td>0.911125</td>\n",
       "      <td>0.925587</td>\n",
       "      <td>0.480231</td>\n",
       "      <td>766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>cohort_10</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"B\")</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.837500</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.815249</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.559088</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>cohort_11</td>\n",
       "      <td>(`sector` == \"s4\") and (`country` == \"C\")</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.862500</td>\n",
       "      <td>0.822222</td>\n",
       "      <td>0.836257</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.560495</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       cohort                                  cht_query       roc  precision  \\\n",
       "0         all                                        all  0.923553   0.908323   \n",
       "1    cohort_0  (`sector` == \"s1\") and (`country` == \"A\")  0.911655   0.941368   \n",
       "2    cohort_1  (`sector` == \"s1\") and (`country` == \"B\")  0.904762   0.888889   \n",
       "3    cohort_2  (`sector` == \"s1\") and (`country` == \"C\")  0.914286   0.899038   \n",
       "4    cohort_3  (`sector` == \"s2\") and (`country` == \"A\")  0.861716   0.867622   \n",
       "5    cohort_4  (`sector` == \"s2\") and (`country` == \"B\")  0.814815   0.914912   \n",
       "6    cohort_5  (`sector` == \"s2\") and (`country` == \"C\")  0.874276   0.929167   \n",
       "7    cohort_6  (`sector` == \"s3\") and (`country` == \"A\")  0.875000   0.943813   \n",
       "8    cohort_7  (`sector` == \"s3\") and (`country` == \"B\")  0.787627   0.913043   \n",
       "9    cohort_8  (`sector` == \"s3\") and (`country` == \"C\")  0.780353   0.889474   \n",
       "10   cohort_9  (`sector` == \"s4\") and (`country` == \"A\")  0.907772   0.935381   \n",
       "11  cohort_10  (`sector` == \"s4\") and (`country` == \"B\")  0.900000   0.837500   \n",
       "12  cohort_11  (`sector` == \"s4\") and (`country` == \"C\")  0.833333   0.862500   \n",
       "\n",
       "      recall        f1  accuracy  threshold  cht_size  \n",
       "0   0.898396  0.902471  0.906333   0.475074      3000  \n",
       "1   0.894939  0.914116  0.931596   0.445645      1228  \n",
       "2   0.833333  0.837500  0.846154   0.616965        13  \n",
       "3   0.895238  0.896057  0.896552   0.471948        29  \n",
       "4   0.834155  0.848937  0.893471   0.488684       291  \n",
       "5   0.836895  0.868782  0.925373   0.521201        67  \n",
       "6   0.840778  0.878077  0.952830   0.662477       106  \n",
       "7   0.877957  0.905093  0.934959   0.477076       246  \n",
       "8   0.684211  0.721612  0.842105   0.771149        76  \n",
       "9   0.773175  0.814833  0.906977   0.388728       129  \n",
       "10  0.894539  0.911125  0.925587   0.480231       766  \n",
       "11  0.800000  0.815249  0.857143   0.559088        21  \n",
       "12  0.822222  0.836257  0.857143   0.560495        28  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXPERIMENT: Rebalance-Cohort 2\n",
    "\n",
    "cht_manager = CohortManager(\n",
    "    transform_pipe=[\n",
    "        dp.BasicImputer(verbose=False),\n",
    "        dp.DataMinMaxScaler(verbose=False),\n",
    "        dp.EncoderOHE(verbose=False),\n",
    "        get_model()\n",
    "    ],\n",
    "    cohort_col=[\"sector\", \"country\"]\n",
    ")\n",
    "cht_manager.fit(new_X_train, new_y_train)\n",
    "pred_cht = cht_manager.predict_proba(X_test)\n",
    "\n",
    "pred_train = cht_manager.predict_proba(new_X_train)\n",
    "_, th_dict = fetch_cohort_results(new_X_train, new_y_train, pred_train, cohort_col=[\"sector\", \"country\"], return_th_dict=True)\n",
    "fetch_cohort_results(X_test, y_test, pred_cht, cohort_col=[\"sector\", \"country\"], fixed_th=th_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that we managed to get a slight improvement over the ROC AUC metric for ``cohort_7`` (compared to [Case 1 - Cohort 5](./case_1.ipynb)), although the other metrics were left unchanged. It is interesting to note that the threshold used for ``cohort_7`` changed considerably when compared to the cohort-based pipeline trained over the original dataset ([Case 1 - Cohort 5](./case_1.ipynb))."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5 (default, Jan 27 2021, 15:41:15) \n[GCC 9.3.0]"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
