{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import uci_dataset as database\n",
    "import torch\n",
    "\n",
    "import raimitigations.dataprocessing as dp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Case Study 2\n",
    "\n",
    "## Fixing a seed\n",
    "\n",
    "To avoid randomness in the following experiments, we'll fix the seeds to guarantee that the results obtained are the same each time we run this notebook. Feel free to comment the next cell or test different seeds to see how this affects the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<torch._C.Generator at 0x7fbb89512070>"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "SEED = 42\n",
    "np.random.seed(SEED)\n",
    "random.seed(SEED)\n",
    "torch.manual_seed(SEED)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 - Understanding the Data\n",
    "\n",
    "In this example, we will build a classifier to detect diseased trees using the `dataprocessing` library, with data from the `uci_dataset`. The data itself comes from spectral imagery, and the data columns relate to features in the imagery.\n",
    "\n",
    "The data columns have the following meaning:\n",
    "- class: 'w' (diseased trees), 'n' (all other land cover)\n",
    "- GLCM_Pan: GLCM mean texture (Pan band)\n",
    "- Mean_G: Mean green value\n",
    "- Mean_R: Mean red value\n",
    "- Mean_NIR: Mean NIR value\n",
    "- SD_Pan: Standard deviation (Pan band)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>GLCM_pan</th>\n",
       "      <th>Mean_Green</th>\n",
       "      <th>Mean_Red</th>\n",
       "      <th>Mean_NIR</th>\n",
       "      <th>SD_pan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>w</td>\n",
       "      <td>120.362774</td>\n",
       "      <td>205.500000</td>\n",
       "      <td>119.395349</td>\n",
       "      <td>416.581395</td>\n",
       "      <td>20.676318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>w</td>\n",
       "      <td>124.739583</td>\n",
       "      <td>202.800000</td>\n",
       "      <td>115.333333</td>\n",
       "      <td>354.333333</td>\n",
       "      <td>16.707151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>w</td>\n",
       "      <td>134.691964</td>\n",
       "      <td>199.285714</td>\n",
       "      <td>116.857143</td>\n",
       "      <td>477.857143</td>\n",
       "      <td>22.496712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>w</td>\n",
       "      <td>127.946309</td>\n",
       "      <td>178.368421</td>\n",
       "      <td>92.368421</td>\n",
       "      <td>278.473684</td>\n",
       "      <td>14.977453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>w</td>\n",
       "      <td>135.431548</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>112.690476</td>\n",
       "      <td>532.952381</td>\n",
       "      <td>17.604193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>n</td>\n",
       "      <td>123.554348</td>\n",
       "      <td>202.826087</td>\n",
       "      <td>106.391304</td>\n",
       "      <td>364.565217</td>\n",
       "      <td>17.314068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>n</td>\n",
       "      <td>121.549028</td>\n",
       "      <td>276.220000</td>\n",
       "      <td>175.593333</td>\n",
       "      <td>402.620000</td>\n",
       "      <td>13.394574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>n</td>\n",
       "      <td>119.076687</td>\n",
       "      <td>247.951220</td>\n",
       "      <td>113.365854</td>\n",
       "      <td>808.024390</td>\n",
       "      <td>24.830059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>n</td>\n",
       "      <td>107.944444</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>451.000000</td>\n",
       "      <td>8.214887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>n</td>\n",
       "      <td>119.731928</td>\n",
       "      <td>182.238095</td>\n",
       "      <td>74.285714</td>\n",
       "      <td>301.690476</td>\n",
       "      <td>22.944278</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4839 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    class    GLCM_pan  Mean_Green    Mean_Red    Mean_NIR     SD_pan\n",
       "0       w  120.362774  205.500000  119.395349  416.581395  20.676318\n",
       "1       w  124.739583  202.800000  115.333333  354.333333  16.707151\n",
       "2       w  134.691964  199.285714  116.857143  477.857143  22.496712\n",
       "3       w  127.946309  178.368421   92.368421  278.473684  14.977453\n",
       "4       w  135.431548  197.000000  112.690476  532.952381  17.604193\n",
       "..    ...         ...         ...         ...         ...        ...\n",
       "495     n  123.554348  202.826087  106.391304  364.565217  17.314068\n",
       "496     n  121.549028  276.220000  175.593333  402.620000  13.394574\n",
       "497     n  119.076687  247.951220  113.365854  808.024390  24.830059\n",
       "498     n  107.944444  197.000000   90.000000  451.000000   8.214887\n",
       "499     n  119.731928  182.238095   74.285714  301.690476  22.944278\n",
       "\n",
       "[4839 rows x 6 columns]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = database.load_wilt()\n",
    "label_col = \"class\"\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4839 entries, 0 to 499\n",
      "Data columns (total 6 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   class       4839 non-null   int64  \n",
      " 1   GLCM_pan    4839 non-null   float64\n",
      " 2   Mean_Green  4839 non-null   float64\n",
      " 3   Mean_Red    4839 non-null   float64\n",
      " 4   Mean_NIR    4839 non-null   float64\n",
      " 5   SD_pan      4839 non-null   float64\n",
      "dtypes: float64(5), int64(1)\n",
      "memory usage: 264.6 KB\n"
     ]
    }
   ],
   "source": [
    "df[label_col] = df[label_col].replace({\"w\": 1, \"n\": 0})\n",
    "df.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "class         False\n",
       "GLCM_pan      False\n",
       "Mean_Green    False\n",
       "Mean_Red      False\n",
       "Mean_NIR      False\n",
       "SD_pan        False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().any()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we will try to determine if any of the features are correlated, and remove the correlated features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No correlations detected. Nothing to be done here.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<raimitigations.dataprocessing.feat_selection.correlated_features.CorrelatedFeatures at 0x7fbb35ccab20>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cor_feat = dp.CorrelatedFeatures(\n",
    "\t\t\t\t\tmethod_num_num=[\"spearman\", \"pearson\", \"kendall\"],\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tnum_corr_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tnum_pvalue_th=0.05,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Numerical correlations\n",
    "\t\t\t\t\tmethod_num_cat=\"model\",\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tmodel_metrics=[\"f1\", \"auc\"],\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tmetric_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t\t# Used for Numerical x Categorical correlations\n",
    "\t\t\t\t\tcat_corr_th=0.9,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Categorical x Categorical correlations\n",
    "\t\t\t\t\tcat_pvalue_th=0.01,\t\t\t\t\t\t\t\t\t\t\t\t# Used for Categorical x Categorical correlations\n",
    "\t\t\t\t\tjson_summary=\"./corr_json/c2_summary.json\",\n",
    "\t\t\t\t\tjson_corr=\"./corr_json/c2_corr.json\",\n",
    "\t\t\t\t\tjson_uncorr=\"./corr_json/c2_uncorr.json\"\n",
    "\t\t\t\t)\n",
    "cor_feat.fit(df=df, label_col=label_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember to look through the JSON files generated in the previous cell. But, according to the thresholds we have set, no features are correlated."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 - Baseline Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    4578\n",
       "1     261\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[label_col].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, we have an imbalanced dataset (most trees are not diseased). While we will take a look at a number of different metrics, we will be focused on improved the F1 score for this dataset.\n",
    "\n",
    "After splitting the data into train and test sets, we will build two baseline models, one with XGBoost, and the other with KNN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x, test_x, train_y, test_y = dp.split_data(df, label_col, test_size=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1115   30]\n",
      " [   6   59]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 97.02%\n",
      "\n",
      "Precision:  0.8287844921769287\n",
      "\n",
      "Recall:  0.9407457171649312\n",
      "\n",
      "F1 =  0.8751733703190014\n",
      "\n",
      "ROC AUC =  0.9681558616056434\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x, train_y, test_x, test_y, model_name=\"xgb\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1120   25]\n",
      " [   8   57]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 97.27%\n",
      "\n",
      "Precision:  0.8440148763189759\n",
      "\n",
      "Recall:  0.9275445078938529\n",
      "\n",
      "F1 =  0.8804959731362849\n",
      "\n",
      "ROC AUC =  0.9348202888814242\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x, train_y, test_x, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For a baseline, XGBoost and KNN have F1 scores around 0.86 (this will depend on your train/test split if you rerun this notebook). We will now proceed to try and improve on these results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3 - Data Transformation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DataMinMaxScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first data transformation we will perform is a MinMaxScaler, which will scale each feature to have a range between zero and one. This does not improve the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1018  127]\n",
      " [  23   42]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 87.60%\n",
      "\n",
      "Precision:  0.6132132849047058\n",
      "\n",
      "Recall:  0.7676184077930803\n",
      "\n",
      "F1 =  0.6451779388650385\n",
      "\n",
      "ROC AUC =  0.7821296607322807\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataMinMaxScaler()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DataNormalizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we try `DataNormalizer`, which will scale the vectors to have unit norm (i.e. vector of length one). This is often used in text classification, but we will use it here as well. But it does not improve the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No columns specified for imputation. These columns have been automatically identified:\n",
      "[]\n",
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1089   56]\n",
      " [   6   59]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 94.88%\n",
      "\n",
      "Precision:  0.7537820131030375\n",
      "\n",
      "Recall:  0.9293920053745381\n",
      "\n",
      "F1 =  0.8139384920634921\n",
      "\n",
      "ROC AUC =  0.9453745381256298\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataNormalizer()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DataStandardScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The standard scaler sets the mean to zero and scales the vectors to have unit variance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1088   57]\n",
      " [  15   50]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 94.05%\n",
      "\n",
      "Precision:  0.7268452224604096\n",
      "\n",
      "Recall:  0.8597245549210615\n",
      "\n",
      "F1 =  0.7746834395431599\n",
      "\n",
      "ROC AUC =  0.8714746388982196\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataStandardScaler()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DataQuantileTransformer\n",
    "\n",
    "The Quantile Transformer transforms the each feature to have a normal distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1113   32]\n",
      " [  10   55]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 96.53%\n",
      "\n",
      "Precision:  0.8116395942723207\n",
      "\n",
      "Recall:  0.9091031239502856\n",
      "\n",
      "F1 =  0.8525828460038987\n",
      "\n",
      "ROC AUC =  0.917991266375546\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataQuantileTransformer()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DataPowerTransformer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The power transformer makes the data more Gaussian-like (by default using the Yeo-Johnson transform)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1118   27]\n",
      " [   7   58]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 97.19%\n",
      "\n",
      "Precision:  0.8380653594771241\n",
      "\n",
      "Recall:  0.9343634531407458\n",
      "\n",
      "F1 =  0.8791776798825257\n",
      "\n",
      "ROC AUC =  0.9416392341283171\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataPowerTransformer()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DataRobustScaler\n",
    "\n",
    "The robust scaler centers the data (median=zero) and scales the data based on the interquartile range (IQR)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1121   24]\n",
      " [   5   60]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 97.60%\n",
      "\n",
      "Precision:  0.8549226084750063\n",
      "\n",
      "Recall:  0.9510581121934834\n",
      "\n",
      "F1 =  0.8962997112704985\n",
      "\n",
      "ROC AUC =  0.9579711118575748\n"
     ]
    }
   ],
   "source": [
    "scaler = dp.DataRobustScaler()\n",
    "scaler.fit(train_x)\n",
    "train_x_scl = scaler.transform(train_x)\n",
    "test_x_scl = scaler.transform(test_x)\n",
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, this transformation had some impact in the results (depends on the seed used) when we use KNN. Let's check how this data transformation impacts the XGBoost model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1115   30]\n",
      " [   6   59]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 97.02%\n",
      "\n",
      "Precision:  0.8287844921769287\n",
      "\n",
      "Recall:  0.9407457171649312\n",
      "\n",
      "F1 =  0.8751733703190014\n",
      "\n",
      "ROC AUC =  0.9681558616056434\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x_scl, train_y, test_x_scl, test_y, model_name=\"xgb\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As depicted above, the results for the XGBoost remains the same as before. This shows us that data transformations are more impactful in certain models and less meaningful in others."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4 - Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By using data scaling (Robust Scaler), we managed to get a small performance increase. We now proceed to use feature selection over the dataset and see if we can manage to get an even higher performance. We start out with 5 features, and use feature selection to remove unneeded features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The number of features selection steps (5) is greater than the number of features to eliminate (3). The number of steps was reduced to 3.\n"
     ]
    }
   ],
   "source": [
    "feat_sel = dp.CatBoostSelection(steps=5, verbose=False)\n",
    "feat_sel.fit(X=train_x_scl, y=train_y)\n",
    "train_x_sel = feat_sel.transform(train_x_scl)\n",
    "test_x_sel = feat_sel.transform(test_x_scl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Mean_Green', 'Mean_Red', 'Mean_NIR', 'SD_pan']"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_sel.get_selected_features()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, ``CatBoostSelection`` feature selection has removed one of the features (GLCM_pan)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1124   21]\n",
      " [   5   60]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 97.85%\n",
      "\n",
      "Precision:  0.8681560213889709\n",
      "\n",
      "Recall:  0.9523681558616057\n",
      "\n",
      "F1 =  0.9052421055168011\n",
      "\n",
      "ROC AUC =  0.9586362109506215\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x_sel, train_y, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the previous results, we can see that we removed one of the features, but without any noticeable gains in performance. However, we are now achieving the same metrics using less data, so we can already call it successful pre-processing step."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5 - Synthetic Data\n",
    "\n",
    "### imblearn Library\n",
    "\n",
    "With unbalanced classes, we can instead choose to create synthetic data for the minority class. Here we use `Rebalance`, which connects to the `imblearn` library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    3433\n",
       "1     196\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_y.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No columns specified for imputation. These columns have been automatically identified:\n",
      "[]\n",
      "Running oversampling...\n",
      "...finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    3433\n",
       "1     400\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rebalance = dp.Rebalance(\n",
    "\t\t\t\tX=train_x_sel,\n",
    "\t\t\t\ty=train_y,\n",
    "\t\t\t\tstrategy_over={0:3433, 1:400},\n",
    "\t\t\t\tover_sampler=True,\n",
    "\t\t\t\tunder_sampler=False\n",
    "\t\t\t)\n",
    "train_x_res, train_y_res = rebalance.fit_resample()\n",
    "train_y_res.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1122   23]\n",
      " [   5   60]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 97.69%\n",
      "\n",
      "Precision:  0.8592275045167359\n",
      "\n",
      "Recall:  0.9514947934161908\n",
      "\n",
      "F1 =  0.8992434335744195\n",
      "\n",
      "ROC AUC =  0.9583338931810548\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(train_x_res, train_y_res, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly to the feature selection step, using the **Rebalance** class didn't provide any considerable gains."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating Artificial Data using Deep Learning\n",
    "\n",
    "#### CTGAN\n",
    "\n",
    "Let's now test rebalancing the dataset using CTGAN:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/sklearn/mixture/_base.py:277: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/sklearn/mixture/_base.py:277: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/sklearn/mixture/_base.py:277: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/sklearn/mixture/_base.py:277: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/ctgan/data_transformer.py:111: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[column_name] = data[column_name].to_numpy().flatten()\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/ctgan/data_transformer.py:111: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[column_name] = data[column_name].to_numpy().flatten()\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/ctgan/data_transformer.py:111: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[column_name] = data[column_name].to_numpy().flatten()\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/ctgan/data_transformer.py:111: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[column_name] = data[column_name].to_numpy().flatten()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    3433\n",
       "1     396\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "synth = dp.Synthesizer(\n",
    "\t\t\t\tX=train_x_sel,\n",
    "\t\t\t\ty=train_y,\n",
    "\t\t\t\tepochs=200,\n",
    "\t\t\t\tmodel=\"ctgan\",\n",
    "\t\t\t\tload_existing=False\n",
    "\t\t\t)\n",
    "synth.fit()\n",
    "\n",
    "conditions = {label_col:1}\t# create more of the undersampled class\n",
    "syn_train_x, syn_train_y = synth.transform(X=train_x_sel, y=train_y, n_samples=200, conditions=conditions)\n",
    "\n",
    "syn_train_y.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1083   62]\n",
      " [   4   61]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 94.55%\n",
      "\n",
      "Precision:  0.7461275532718529\n",
      "\n",
      "Recall:  0.942156533422909\n",
      "\n",
      "F1 =  0.8096831388698238\n",
      "\n",
      "ROC AUC =  0.9631776956667787\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(syn_train_x, syn_train_y, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try creating more artificial instances and check how this impacts the model's performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1100   45]\n",
      " [   6   59]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 95.79%\n",
      "\n",
      "Precision:  0.7809413687578244\n",
      "\n",
      "Recall:  0.9341954988243197\n",
      "\n",
      "F1 =  0.8377841275015181\n",
      "\n",
      "ROC AUC =  0.9658649647295936\n"
     ]
    }
   ],
   "source": [
    "conditions = {label_col:1}\t# create more of the undersampled class\n",
    "syn_train_x, syn_train_y = synth.transform(X=train_x_sel, y=train_y, n_samples=2000, conditions=conditions)\n",
    "\n",
    "model = dp.train_model_plot_results(syn_train_x, syn_train_y, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TVAE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/sklearn/mixture/_base.py:277: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/sklearn/mixture/_base.py:277: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/sklearn/mixture/_base.py:277: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/sklearn/mixture/_base.py:277: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  warnings.warn(\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/ctgan/data_transformer.py:111: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[column_name] = data[column_name].to_numpy().flatten()\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/ctgan/data_transformer.py:111: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[column_name] = data[column_name].to_numpy().flatten()\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/ctgan/data_transformer.py:111: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[column_name] = data[column_name].to_numpy().flatten()\n",
      "/home/mmendonca/anaconda3/envs/rai/lib/python3.9/site-packages/ctgan/data_transformer.py:111: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[column_name] = data[column_name].to_numpy().flatten()\n"
     ]
    }
   ],
   "source": [
    "synth = dp.Synthesizer(\n",
    "\t\t\t\tX=train_x_sel,\n",
    "\t\t\t\ty=train_y,\n",
    "\t\t\t\tepochs=200,\n",
    "\t\t\t\tmodel=\"tvae\",\n",
    "\t\t\t\tload_existing=False\n",
    "\t\t\t)\n",
    "synth.fit()\n",
    "\n",
    "conditions = {label_col:1}\t# create more of the undersampled class\n",
    "syn2_train_x, syn2_train_y = synth.transform(X=train_x_sel, y=train_y, n_samples=200, conditions=conditions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------\n",
      "TEST\n",
      "------------\n",
      "[[1037  108]\n",
      " [   2   63]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acuracy: 90.91%\n",
      "\n",
      "Precision:  0.683248062408186\n",
      "\n",
      "Recall:  0.9374538125629829\n",
      "\n",
      "F1 =  0.7417660023592227\n",
      "\n",
      "ROC AUC =  0.9730332549546523\n"
     ]
    }
   ],
   "source": [
    "model = dp.train_model_plot_results(syn2_train_x, syn2_train_y, test_x_sel, test_y, model_name=\"knn\", train_result=False, plot_pr=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.12 ('rai')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "5215fd1cce9b64233b490e6c4e868a314fa8a5a2b064fe0583fd0c29542af034"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
